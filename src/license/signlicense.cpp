#include <stdio.h>
#include <string>
#include <time.h>
#include <unistd.h>
#include "core/buffers/Hash.hpp"

#include <openssl/crypto.h>
#include <openssl/rsa.h>
#include <openssl/rand.h>
#include <openssl/pem.h>
#include <openssl/err.h>

using namespace std;
using smsc::core::buffers::Hash;

namespace smsc{
namespace license{
namespace check{
bool ReadLicense(FILE* f,Hash<string>& lic);
}
}
}

static const unsigned char rsaprivatekey[]={
0x30,0x82,0x09,0x27,0x02,0x01,0x00,0x02,0x82,0x02,0x01,0x00,0xC4,0xF1,0x44,0x34,0x08,0xD7,0x03,0xA3,
0x6C,0xBF,0x8F,0xF8,0x48,0xCF,0x8D,0xEF,0xBC,0x34,0x8D,0xAE,0x66,0x49,0x83,0xAC,0x99,0x94,0x7E,0xC5,
0x44,0x22,0xC1,0x44,0xCD,0xD2,0xCF,0xF6,0xF6,0x4D,0x07,0xBA,0x07,0x70,0x5E,0x49,0x38,0xC3,0xD1,0xD2,
0x23,0xBA,0xC8,0xAD,0x0C,0x5A,0x7D,0x19,0xD9,0x1D,0x9F,0xA3,0x32,0x0C,0x1D,0x15,0xC5,0x32,0xAF,0x21,
0xBD,0x73,0xA3,0xC9,0x2D,0x8A,0x78,0x0D,0x6D,0x19,0x4D,0x74,0x2E,0x9F,0xF1,0xDD,0x06,0x6D,0x6D,0x39,
0xAB,0xB7,0x9E,0xF7,0xF9,0xFB,0xBB,0xCD,0xFB,0xBD,0x64,0xBE,0x44,0x1E,0xA0,0x3C,0xEF,0x9D,0xB5,0xE2,
0x60,0x28,0xDC,0x4E,0xF3,0x9B,0x09,0xBD,0x31,0x30,0xCD,0x83,0x12,0xEB,0x9C,0xAE,0x5F,0xDD,0x7D,0x71,
0x4E,0x33,0xCA,0x6D,0x96,0x3D,0x8B,0xD0,0x0F,0x99,0x8C,0xE8,0xD1,0x2B,0xED,0xA4,0x3B,0x20,0x78,0x23,
0xDF,0xFB,0x10,0xD4,0x99,0x2D,0x8B,0xF1,0x8D,0x0A,0xB2,0x09,0xB2,0x1C,0xE4,0x58,0xAC,0x38,0xD7,0xE1,
0xBD,0x24,0x48,0x99,0x27,0x00,0xCF,0x30,0x09,0xD8,0x7E,0x80,0x7C,0x11,0xC6,0xCC,0x41,0x5F,0x96,0xD4,
0x33,0xEC,0x85,0x7B,0x27,0xA8,0xB0,0x84,0xC5,0x63,0x6B,0x3C,0xD2,0x27,0x9C,0x24,0x35,0x18,0x49,0xD4,
0x35,0xAA,0x88,0x4D,0x42,0x30,0xAF,0x11,0x9A,0xCB,0x5D,0xAC,0x40,0xD4,0x89,0xB5,0x28,0x64,0xE3,0x6D,
0xF2,0x75,0x59,0x32,0x59,0x2F,0x81,0x7D,0x6B,0xF9,0xCC,0x36,0xB5,0xFD,0xC8,0x05,0xA3,0x09,0x6C,0xC6,
0x65,0x4D,0x84,0x6D,0x77,0x71,0xD4,0x93,0xDF,0xE7,0x57,0xB5,0x2B,0xB6,0xE7,0x41,0x3B,0xEC,0xD3,0xA6,
0x2C,0xF0,0xC4,0x47,0xE3,0x79,0x95,0xD6,0x6A,0xD8,0xBE,0xE9,0x2C,0xE0,0x03,0x76,0xDA,0x75,0x4B,0xB7,
0x97,0x92,0x55,0x07,0x24,0xEE,0xE7,0xB7,0xC4,0xFB,0x16,0x0A,0x38,0x42,0x3C,0x40,0x4F,0x92,0x68,0xC1,
0x48,0x9A,0x7D,0xD2,0xB5,0xF2,0x8E,0xCA,0xA8,0x38,0x5A,0x20,0x61,0x2A,0x27,0xFD,0xC1,0xAA,0xEF,0x8F,
0xFC,0x97,0xFB,0xAD,0x0B,0xA1,0x00,0x72,0x51,0xD9,0x6B,0xAA,0x41,0x34,0x8B,0xD5,0xBD,0x2A,0xEF,0x38,
0x13,0xB4,0xB9,0x3A,0xA7,0xC8,0x2C,0xDB,0x42,0xAC,0xEA,0x36,0x78,0xC3,0x71,0x8C,0x94,0x3D,0xF7,0x9E,
0xA3,0xDB,0x35,0x4B,0x0D,0x8C,0xA3,0x88,0xFA,0xED,0x4B,0x5E,0xA6,0x02,0x5F,0xF9,0x39,0x6D,0x65,0xF5,
0x11,0x4D,0xEB,0x54,0xDE,0x2B,0x7F,0xC7,0xFE,0x49,0x43,0x1B,0x0E,0x26,0xEC,0xAA,0x9F,0xE1,0xD1,0x43,
0xB0,0xD3,0xF3,0x84,0x28,0x92,0x45,0x00,0xF2,0xCB,0x70,0xE3,0xD8,0x45,0xB8,0x20,0xE7,0xCC,0x9B,0x07,
0xC6,0xDC,0x74,0x49,0xB8,0x61,0x3D,0x5F,0xED,0xA1,0xCF,0x1F,0x2D,0xB0,0x0D,0x1A,0xF6,0xC1,0x6A,0x3A,
0x04,0x91,0xCF,0x47,0x79,0x81,0xD7,0xB9,0x1B,0x12,0x61,0x89,0x58,0xA1,0x0B,0x2C,0x94,0xD4,0xE5,0xA5,
0x32,0x3D,0x73,0x22,0xEC,0x78,0x5E,0xF8,0xDC,0xB9,0x8A,0x6F,0x7F,0x9E,0x99,0x5A,0xA2,0xC5,0xC9,0xA9,
0x15,0x15,0x6B,0x5F,0xC9,0x63,0xCA,0xAF,0x0B,0xB9,0x40,0x1F,0x62,0x68,0x4E,0x3D,0x47,0x5E,0x20,0x1D,
0xF2,0xA7,0x61,0xB3,0x02,0x01,0x11,0x02,0x82,0x02,0x00,0x17,0x2B,0x71,0x6F,0x88,0x91,0xC4,0x31,0x58,
0x16,0x89,0x68,0x81,0x09,0x5B,0xFE,0x16,0x24,0x4C,0xE7,0x57,0x53,0xF1,0x5F,0x99,0x98,0xFF,0xDA,0xF8,
0xF5,0x07,0xAD,0xBD,0xDC,0x90,0xEF,0xE0,0xBD,0xC4,0xAC,0x79,0x58,0x83,0x90,0x24,0xCB,0xBE,0x54,0xF5,
0x25,0x08,0x8C,0xD4,0x46,0xE1,0x8A,0x92,0x03,0x7C,0x31,0x51,0x2E,0x9A,0x02,0x8F,0xAB,0x9C,0x22,0x16,
0x49,0xD7,0x08,0x9B,0xF2,0x2C,0x3D,0xD0,0x99,0x90,0xA4,0x41,0xB8,0x76,0xCE,0xB5,0x76,0x49,0x15,0xD7,
0xF7,0x7C,0x1D,0x2C,0x77,0xF7,0xFA,0x1D,0x9D,0xCF,0x9D,0xE9,0xE5,0x7C,0x43,0x67,0x7B,0xF7,0x47,0xCF,
0x13,0xDD,0xAE,0xEF,0x7B,0xA6,0xCA,0xF6,0xBA,0x72,0x87,0xE4,0x1B,0xB8,0x14,0x83,0xBF,0xB4,0x67,0xAE,
0xD8,0xEA,0xA3,0x7B,0x16,0x4C,0xAF,0x10,0xE4,0xE3,0x66,0xAF,0x32,0x58,0x31,0x70,0x5E,0x2C,0x40,0x74,
0xB4,0x20,0x19,0x02,0xF6,0x4C,0xB3,0x01,0x88,0xC9,0xA6,0xC9,0xA9,0x0B,0xCE,0x32,0x61,0x0A,0x56,0xCA,
0xF5,0x35,0xB7,0xAA,0x3C,0x54,0x9C,0x3D,0x64,0xC3,0x96,0xA5,0x2F,0x44,0x90,0x80,0x29,0x5D,0x09,0xE7,
0xFD,0xB5,0x59,0xC8,0x6E,0x32,0xE2,0x71,0x93,0x39,0xCA,0xEB,0x8C,0x30,0x7C,0xBA,0xF3,0xCC,0x73,0x51,
0x9B,0x97,0x90,0x9E,0x60,0x14,0x98,0xA8,0xCC,0xA1,0x9B,0xCB,0x64,0x4C,0x6F,0xAA,0x66,0x38,0xDF,0xC2,
0x2B,0xEC,0x60,0x46,0xBA,0x4B,0x78,0x2A,0xD2,0x18,0x06,0x6F,0xC3,0x80,0xF1,0x9A,0xB5,0xD0,0x8F,0xCF,
0xAE,0xC4,0x49,0x1D,0x1C,0x73,0x5C,0x7B,0xF5,0x2A,0xBE,0x9D,0x82,0x2A,0xDD,0xFE,0x81,0x96,0xC9,0x52,
0x90,0x04,0x28,0x41,0x47,0x63,0x8B,0xFD,0x93,0xED,0xF0,0x48,0xB7,0xA0,0x57,0xCC,0xD9,0xC8,0x21,0x30,
0x8B,0xA7,0xAD,0xD6,0x99,0x93,0xF9,0x81,0x58,0x6D,0xF5,0x9D,0xA4,0x15,0xE6,0x35,0x91,0x4A,0x1D,0xE8,
0x1B,0x0D,0xE5,0xBF,0xD5,0x51,0xBD,0xC2,0x9E,0xA8,0x87,0x77,0x98,0x39,0x92,0x15,0x3F,0x33,0xBB,0x71,
0x00,0x2B,0x0D,0x85,0x88,0x5B,0x48,0x02,0x56,0x0C,0xED,0xDF,0xEF,0xFD,0xF7,0x55,0xAA,0x28,0x28,0xC6,
0x57,0xAF,0xE4,0xC9,0xE4,0x2F,0x7D,0x6B,0x10,0x05,0xF5,0xC9,0xBF,0xC5,0x27,0x42,0xB0,0x21,0xC8,0x35,
0xB6,0xCB,0x77,0xCE,0x3A,0x3E,0xA2,0x7D,0x98,0xC5,0x2B,0x1B,0x93,0x7B,0x85,0xE0,0x95,0xC1,0x13,0x34,
0x58,0xA1,0xD1,0x45,0x23,0x85,0xBC,0x70,0x3D,0x19,0xE9,0x3B,0xA4,0x1D,0xDB,0xD2,0x14,0xC6,0xC8,0xEF,
0x89,0xBF,0xC8,0x4B,0x03,0x8F,0xED,0x46,0xA6,0x85,0x91,0xF6,0x3B,0x8E,0x60,0xFB,0x56,0xF9,0x6E,0x0F,
0xB4,0x50,0x43,0xEF,0x7D,0x88,0xE3,0x45,0x0A,0x86,0x6E,0xC0,0xD0,0xF2,0xF8,0x1F,0x48,0x7C,0xAC,0xFD,
0x09,0x67,0xDB,0x90,0x2D,0x90,0xB9,0x0D,0x80,0x2C,0xEE,0x63,0xAC,0xC1,0xAF,0xEF,0x83,0x72,0x0C,0xF9,
0x21,0x8A,0x02,0x13,0x98,0x83,0x88,0xD4,0xED,0x2D,0x93,0xE9,0xF7,0xA7,0x28,0x98,0x2E,0xE7,0xAF,0xDC,
0x95,0x1F,0x89,0x0F,0x1B,0x64,0xF4,0xAA,0xE0,0x16,0x80,0xA4,0xA9,0x9C,0xBF,0x40,0x89,0xD3,0xEC,0x92,
0x37,0xAC,0x91,0x02,0x82,0x01,0x01,0x00,0xF1,0x78,0xDC,0xC3,0xB1,0xB8,0xF1,0xA7,0xA8,0xBA,0x49,0x92,
0x35,0x17,0xE2,0xF2,0x64,0x42,0x01,0x57,0xF2,0x40,0x99,0xB7,0xEA,0xC0,0xF9,0x84,0xAC,0xEF,0xA7,0x22,
0x59,0xB5,0x5B,0xF4,0x07,0x6B,0x57,0xD0,0x62,0xCA,0xBD,0x90,0x2A,0xCF,0x76,0xC4,0xF3,0xF9,0xDC,0xF3,
0xA5,0xBA,0xCE,0x1A,0x57,0x3F,0xFA,0xD1,0x84,0x1E,0x15,0x48,0x8A,0x93,0xCF,0x44,0xA7,0x7C,0x82,0x36,
0x60,0xC5,0x4B,0xA6,0x6B,0x29,0x85,0x62,0x85,0x0E,0x05,0x71,0x90,0xB2,0xBF,0x85,0x38,0xD8,0x37,0x2A,
0x8E,0xF2,0x55,0x25,0x27,0x01,0xC8,0x76,0xB5,0x14,0xBA,0x91,0x5E,0x91,0xB6,0x87,0xB7,0x27,0x56,0x62,
0xEF,0xEB,0x58,0xB1,0xFC,0xE1,0xCB,0x1A,0x86,0x6A,0x30,0x75,0x42,0x42,0x54,0xC7,0xC6,0x99,0x64,0x44,
0x40,0x9C,0xEC,0xB1,0x2A,0x94,0xC6,0xD9,0xD5,0x2E,0x0A,0x80,0x7F,0x88,0xAA,0x61,0xE3,0x06,0x7F,0xBC,
0xF7,0x46,0x10,0x0C,0x96,0x12,0xD1,0x21,0xD6,0x35,0x1D,0xF3,0x73,0xDB,0x04,0xBD,0xEB,0xB8,0xBF,0x26,
0xBF,0xD2,0x8B,0x91,0x1E,0x89,0xD1,0x3E,0xAB,0x0D,0xE2,0x4A,0xE9,0x34,0xB4,0xA9,0xCA,0x78,0x43,0x59,
0x5C,0x26,0x58,0x1D,0x17,0xFF,0xA7,0x2D,0x0C,0xF2,0x4C,0xED,0x7E,0x28,0x9A,0x53,0x2F,0xA0,0x07,0x1B,
0x33,0x77,0x2B,0x4F,0x31,0xE5,0xE2,0x15,0xC1,0x9C,0xAA,0x05,0xD7,0xD4,0xB5,0x17,0xAE,0x0B,0x11,0xA5,
0xC9,0xAE,0xF4,0xB2,0xE2,0x72,0xBE,0x32,0xCE,0x68,0x12,0x42,0x79,0x1C,0x8D,0xA7,0x9B,0xDF,0xD1,0xBF,
0xE5,0xCE,0x74,0xDB,0x02,0x82,0x01,0x01,0x00,0xD0,0xCA,0x8F,0x9D,0x3F,0x2B,0x89,0x3A,0x9F,0xE5,0x08,
0x64,0xBA,0x10,0xBD,0xFF,0x54,0x58,0xC6,0x58,0x8D,0x2E,0xBE,0xB6,0xD8,0x06,0x37,0x07,0xE0,0x4A,0x7F,
0x7B,0x21,0x39,0xE7,0xCD,0x7D,0x6A,0x26,0x1E,0x96,0xC0,0xB1,0xD2,0x51,0x80,0x0B,0x56,0x94,0x45,0x95,
0xCF,0x6D,0xF9,0xB9,0x97,0x80,0x1D,0x5D,0x2C,0x2D,0xD5,0xAC,0x58,0x5E,0x08,0x6F,0x5F,0x65,0x95,0x35,
0xA0,0x5B,0x51,0x42,0x13,0xB1,0x70,0x73,0x2B,0xB8,0xEF,0xF8,0x52,0xC1,0x09,0xDD,0x9A,0x2C,0x2C,0x62,
0xB2,0xEE,0xD9,0x0C,0xFC,0xCC,0xB2,0xD0,0xBA,0x7F,0x8F,0xFC,0xFB,0xE7,0x53,0xAF,0x37,0x26,0x3D,0x82,
0x15,0xEB,0x5E,0x1B,0x1E,0xB7,0xBB,0xC4,0x09,0x48,0xF0,0x8E,0xFA,0xF9,0x5A,0x71,0x3F,0x7D,0xDB,0x18,
0x8D,0x93,0xBF,0x9F,0x30,0xE7,0xE8,0xC8,0x2C,0x6F,0x13,0xDC,0x5C,0x13,0xAB,0x44,0x7C,0x43,0x2A,0xB7,
0xDA,0xC5,0x7B,0x05,0x51,0x14,0xE1,0x2C,0x7E,0x44,0x0E,0xE3,0x97,0xB7,0x70,0x79,0x2A,0xA3,0xB0,0x93,
0xB9,0x81,0x8D,0x3E,0x77,0x26,0x2C,0x60,0x95,0x77,0xBA,0x76,0x26,0xDD,0x8B,0x47,0x34,0x22,0x61,0x03,
0x22,0x41,0x9B,0x84,0x60,0x17,0xFE,0xE2,0x67,0x1B,0x5E,0x96,0xB1,0x8B,0x3C,0x02,0x81,0xF1,0x57,0x95,
0x1B,0xB9,0x29,0x32,0xC2,0x14,0x02,0x1E,0xD8,0x09,0x3C,0xDD,0x00,0x63,0x10,0xD7,0x69,0xE7,0x2C,0x06,
0xAC,0x78,0x72,0xEA,0x9F,0xE6,0x88,0x32,0x5C,0x90,0xE0,0x6E,0x97,0x71,0xAA,0x0C,0x3C,0x06,0xEA,0xC5,
0x03,0x31,0xFF,0xB2,0x09,0x02,0x82,0x01,0x01,0x00,0xAA,0x73,0x6E,0xA8,0x41,0x37,0x41,0x2B,0x0D,0xB0,
0xAC,0x67,0x34,0x89,0x54,0xE7,0x55,0xD4,0x3D,0x2F,0x05,0x5A,0xC6,0xDC,0x2D,0x3C,0xEC,0x5D,0xA7,0x3F,
0xC1,0x45,0x6C,0x80,0x04,0xAC,0x41,0x78,0xF2,0xB1,0x36,0xAD,0x3A,0x83,0xE1,0xFB,0xDB,0x5D,0xD9,0x65,
0x14,0x6F,0xC0,0x47,0xA0,0x8B,0x10,0x69,0x65,0xC1,0x11,0xF7,0x1E,0x15,0x16,0x86,0x74,0x30,0x76,0x39,
0xC5,0x53,0x8F,0x9A,0x53,0x84,0x87,0xE1,0x12,0xDC,0x21,0xAF,0x8B,0x5F,0x38,0xF6,0xA5,0x4E,0xFA,0xF2,
0xF9,0xC3,0xB0,0x32,0x96,0x74,0x94,0x01,0x42,0x35,0xAC,0xFF,0x92,0xC0,0xF7,0x75,0xEA,0x41,0xAE,0x76,
0x1E,0xDC,0x6D,0x1E,0x98,0xF6,0x1B,0xEA,0xAD,0x7C,0x22,0xA5,0x4F,0x61,0xD4,0x6B,0x0E,0xAB,0x22,0xC6,
0xA1,0x21,0x1E,0x8C,0xE3,0x4F,0xE1,0xD2,0x6E,0x3F,0x69,0x4D,0xAD,0x0F,0x69,0x15,0x2C,0xF9,0xCD,0x6D,
0xFF,0xD0,0xAE,0x8B,0xCF,0x17,0xF1,0x76,0xB1,0xBD,0x88,0x25,0x7E,0x8D,0xBB,0x31,0x30,0x86,0x0F,0xCD,
0xB4,0x1B,0x5A,0x3A,0x44,0x66,0x6F,0xE8,0xCF,0xF0,0x00,0x46,0x09,0x25,0xD1,0xCA,0xD9,0xE1,0x43,0xA0,
0x2F,0x8A,0x5F,0x2A,0x20,0x14,0x89,0x69,0x2A,0xB6,0x63,0x7D,0xDB,0xF2,0xEF,0xA4,0x30,0xB3,0x30,0xAD,
0x32,0x31,0x51,0x81,0x4B,0xBF,0x6E,0x84,0x27,0x1E,0x6A,0x8C,0xB4,0x40,0x5C,0x1D,0xAD,0x01,0xA8,0x07,
0xD0,0x38,0xCA,0x99,0x9D,0xAB,0x72,0xAB,0x59,0x14,0xCD,0xEF,0x1B,0xF2,0xAF,0xD7,0xEB,0x85,0x5E,0xF8,
0x57,0xD2,0xC0,0x55,0x7F,0xA9,0x02,0x82,0x01,0x01,0x00,0xAB,0xF2,0x1B,0xEA,0xE8,0xBA,0x71,0x03,0x1A,
0x44,0x25,0x07,0xA8,0x4A,0x05,0xE1,0x54,0x85,0x58,0x0C,0xB0,0x80,0xD9,0x4B,0x48,0x7D,0x96,0xBB,0x31,
0x2E,0x4A,0xDD,0xDF,0x20,0xA0,0xC7,0x58,0x39,0x4C,0x91,0xA9,0x53,0x65,0x43,0xCA,0xA5,0xAE,0xFC,0x01,
0xA2,0xB7,0x9B,0xC3,0xFA,0xD5,0x13,0x5A,0x72,0x88,0xF7,0x34,0xCE,0x15,0x75,0xF3,0x16,0x01,0x5D,0x9E,
0xF3,0x59,0x56,0xE1,0xCA,0x72,0xA6,0xCE,0x5C,0x9B,0x14,0xF2,0xA7,0x81,0x35,0x17,0x71,0x89,0x51,0xCA,
0x06,0x6F,0x66,0x2E,0x1C,0x28,0xD0,0x30,0x1A,0xCA,0x02,0xFF,0xA3,0xC1,0x47,0xEB,0xAE,0x54,0x0F,0x4C,
0xAB,0x1F,0xD5,0xD0,0xE4,0x16,0x55,0x88,0x40,0x47,0x16,0xB4,0x89,0xDF,0x29,0x09,0x95,0xC6,0xAC,0xC1,
0xFF,0xB9,0xDE,0x01,0x34,0x64,0xFB,0x19,0x56,0x4A,0x7E,0xF2,0x10,0x5B,0x1E,0xA6,0xC9,0x47,0x75,0x64,
0x7D,0x88,0x59,0xCF,0xCE,0xB9,0x15,0x98,0xB9,0x6F,0xEF,0x83,0x57,0x8E,0x40,0xB5,0x2F,0x72,0xD7,0xD2,
0x18,0xF2,0x20,0x4C,0x92,0x6F,0xAD,0x6A,0xBB,0x22,0x5C,0xF9,0x30,0x25,0x10,0xF2,0xAE,0xEF,0x58,0x1C,
0x4F,0xE4,0x76,0x90,0x61,0xF4,0x8B,0x5F,0x0E,0x23,0xDC,0x70,0xE4,0x7C,0x19,0xBD,0xF5,0x2F,0x3D,0xD5,
0xCF,0xA7,0xF8,0xB6,0x9A,0x66,0x09,0x3D,0xA7,0x64,0xB1,0xE9,0x7D,0x6A,0xB5,0x06,0x4A,0x1A,0xCF,0xAF,
0x51,0x6E,0xE8,0x63,0x31,0x75,0xED,0x18,0x33,0xED,0x3D,0x2C,0x04,0x1E,0xD7,0x12,0x4F,0xCD,0xD7,0x14,
0xC1,0x56,0xF3,0x92,0x96,0x56,0x61,0x02,0x82,0x01,0x00,0x59,0x87,0x5D,0x6E,0x72,0x44,0x3E,0xC8,0x8E,
0x5B,0xAA,0x30,0x7E,0x90,0x6D,0x06,0x2B,0x70,0x99,0xE3,0xBD,0xB3,0x5B,0xCD,0x6B,0x04,0x9E,0xE2,0x0E,
0x8C,0x8C,0x2B,0x42,0x2D,0x79,0x7D,0x25,0xFB,0x21,0xCA,0xF0,0xF4,0x5E,0xB3,0xD1,0x74,0xE3,0xD1,0xD9,
0x1D,0xEE,0xBD,0x9A,0x1B,0xC7,0x42,0x51,0xAC,0x6B,0x39,0x99,0xC3,0xA3,0x0E,0x95,0x93,0x70,0x79,0x1A,
0xE3,0xEA,0xF0,0xED,0x1F,0xF1,0x04,0x41,0xD2,0x85,0x54,0xE8,0x60,0xEC,0xCA,0xBA,0xD2,0x2D,0xA6,0x6E,
0x2A,0x8A,0x04,0x37,0xD1,0x5E,0xCA,0x18,0xA4,0xC5,0x5E,0x76,0xFA,0x34,0x08,0x77,0x1B,0x6D,0x53,0x0C,
0xC9,0x88,0x47,0xF0,0x96,0x68,0x4B,0xF9,0x88,0xD0,0xAE,0x2E,0x9F,0xBA,0x8B,0x5D,0x3E,0xB4,0xB9,0x17,
0xAF,0xB2,0x70,0xB5,0xDE,0xA2,0x1A,0xBB,0x6D,0x99,0x75,0xEA,0x9D,0x0A,0x0E,0x3D,0xCD,0x3B,0xA5,0x33,
0xCC,0xE7,0x81,0xC7,0x67,0x62,0xF8,0x8F,0x65,0x65,0x3F,0x3E,0x6D,0x87,0xEA,0xCC,0x1D,0xAD,0x9E,0xA8,
0x38,0xCF,0xD5,0xE0,0x0B,0x66,0x61,0xC9,0x31,0x9F,0x2F,0x20,0x6C,0xEB,0xFA,0xEA,0x3D,0x6E,0xDA,0xE4,
0xCC,0x86,0xA8,0x6F,0x77,0x1F,0xA5,0x30,0x01,0xEC,0x03,0x80,0x69,0xBB,0xC1,0x4A,0xBC,0xED,0xD2,0x09,
0x4D,0x66,0x92,0x2D,0x18,0x99,0x13,0x4D,0x68,0x53,0x0C,0xAA,0x0A,0xFE,0xBE,0xC9,0x69,0x47,0x93,0xB1,
0x0B,0xE5,0x4A,0x80,0xD1,0xAA,0x0F,0x9A,0xD0,0x83,0x15,0x32,0xA4,0xC4,0x5C,0x0A,0x73,0x7E,0xCB,0xF1,
0xED,0xD4,0xFB,0x15,0x01,0xDF,0x05};


//#define getpid _getpid

int main(int argc,char* argv[])
{
  BIO* out=BIO_new(BIO_s_file());
  BIO_set_fp(out,stdout,BIO_NOCLOSE);
  BIO* in=BIO_new(BIO_s_file());
  BIO_set_fp(in,stdin,BIO_NOCLOSE);

  RSA *rsa=NULL;
  const unsigned char* p=rsaprivatekey;
  d2i_RSAPrivateKey(&rsa,&p,sizeof(rsaprivatekey));
  if(!rsa)
  {
    fprintf(stderr,"error: read private key failed\n");
    return -1;
  }
  {
    int r = RSA_check_key(rsa);

    if (r == 1)
    {
      //BIO_printf(out,"RSA key ok\n");
    }
    else if (r == 0)
    {
      long e;

      while ((e = ERR_peek_error()) != 0 &&
        ERR_GET_LIB(e) == ERR_LIB_RSA &&
        ERR_GET_FUNC(e) == RSA_F_RSA_CHECK_KEY &&
        ERR_GET_REASON(e) != ERR_R_MALLOC_FAILURE)
      {
        fprintf(stderr, "RSA key error: %s\n", ERR_reason_error_string(e));
        ERR_get_error(); /* remove e from error stack */
        return -1;
      }
    }

    if (r == -1 || ERR_peek_error() != 0) /* should happen only if r == -1 */
    {
      ERR_print_errors(out);
      return -1;
    }
  }

  Hash<string> lic;
  if(!smsc::license::check::ReadLicense(stdin,lic))
  {
    fprintf(stderr,"There are errors in license file\n");
    return -1;
  }

  /*{
    char* key;
    string* val;
    lic.First();
    while(lic.Next(key,val))
    {
      printf("%s=%s\n",key,val->c_str());
    }
  }*/

  const char *smscKeys[]=
  {
          "Organization",
          "Hostids",
          "MaxSmsThroughput",
          "LicenseExpirationDate",
          "LicenseType",
          "Product",
          0
  };
  const char* scagKeys[]=
  {
          "Organization",
          "Hostids",
          "MaxSmsThroughput",
          "MaxHttpThroughput",
          "MaxMmsThroughput",
          "LicenseExpirationDate",
          "LicenseType",
          "Product",
          0
  };
    const char* infosmeKeys[] =
    {
          "Organization",
          "Hostids",
          "MaxSmsThroughput",
          "LicenseExpirationDate",
          "LicenseType",
          "Product",
          0
    };
    const char** lkeys = 0;
    if (strcmp(argv[1],"smsc")==0 ) {
        lkeys = smscKeys;
    } else if ( strcmp(argv[1],"scag")==0 ) {
        lkeys = scagKeys;
    } else if ( strcmp(argv[1],"infosme")==0 ) {
        lkeys = infosmeKeys;
    }
    if (!lkeys) {
      fprintf(stderr,"Product %s is not supported\n",argv[1]);
      return -1;
    }

  std::string msg;
  for ( size_t i = 0; lkeys[i] != 0; ++i ) {
    msg+=lkeys[i];
    msg+='=';
    if(!lic.Exists(lkeys[i]))
    {
      fprintf(stderr,"Field %s not found in license\n",lkeys[i]);
      return -1;
    }
    msg+=lic[lkeys[i]];
    msg+=';';
  }

  unsigned char md[SHA_DIGEST_LENGTH];
  unsigned int mdsz=SHA_DIGEST_LENGTH;
  SHA1((unsigned char*)msg.c_str(),msg.length(),md);

  unsigned char *ret=new unsigned char[RSA_size(rsa)+1];
  unsigned int rl;

  if(!RSA_sign(NID_sha1,(unsigned char*)md,mdsz,ret,&rl,rsa))
  {
    char buf[2048];
    printf("error: failed to create signature - %s\n",ERR_error_string(ERR_get_error(),buf));
    return -1;
  }
  for(unsigned int i=0;i<rl;i++)
  {
    if(i!=0 && (i%40)==0)printf("\n");
    printf("%02X",(unsigned int)ret[i]);
  }
  return 0;
}
