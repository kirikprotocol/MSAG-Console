// NOTE: Do NOT edit this file (it is auto-generated).
// Instead, edit message-cpp.tmpl and regenerate.

#ifndef __SCAG_PVSS_PVAP_BC_GET_HPP__
#define __SCAG_PVSS_PVAP_BC_GET_HPP__

#include "util/int.h"
#include <string>
#include "scag/pvss/api/pvap/Exceptions.h"

#include "scag/pvss/api/packets/GetCommand.h"





namespace scag2{
namespace pvss{
namespace pvap{

class PVAPBC;

class BC_GET
{
protected:
    static const int varNameTag = 20;

public:
    BC_GET( int seqNum ) :
    owned_(true),
    data_(new GetCommand(seqNum))
    {
    }

    BC_GET( GetCommand* other ) :
    owned_(false),
    data_(other)
    {
    }

    ~BC_GET() {
        if ( data_ && owned_ ) delete data_;
    }

    void clear()
    {
        if ( ! data_ ) return;
        data_->clear();
    }

    GetCommand* pop() {
        GetCommand* rv = data_;
        data_ = 0;
        return rv;
    }

    std::string toString() const
    {
        return data_ ? data_->toString() : "";
    }

    template < class DataStream >
        void serialize( const PVAPBC& proto, DataStream& writer ) const /* throw (PvapException) */ 
    {
        if ( ! data_ ) return;
        checkFields();
        // mandatory fields
        try {
            // printf( "write pos=%d field=%d\n", ds.getPos(), varNameTag );
            writer.writeTag(varNameTag);
            writer.writeAsciiLV(data_->getVarName());
        } catch ( exceptions::IOException e ) {
            throw PvapSerializationException( data_->isRequest(),
                                              data_->getSeqNum(),
                                              "writing field varName in BC_GET: %s",
                                              e.what() );
        }
        // optional fields
    }

    template <class DataStream> void deserialize( PVAPBC& proto, DataStream& reader )
        /* throw (PvapException) */ 
    {
        if ( ! data_ ) return;
        clear();
        int tag = -1;
        try {
            do {
                // int pos = int(reader.getPos());
                tag = reader.readTag();
                // printf( "read pos=%d field=%d\n", pos, tag );
                if ( tag == -1 ) break;
                switch(tag) {
                case varNameTag: {
                    data_->setVarName(reader.readAsciiLV());
                    break;
                }
                default:
                    throw InvalidFieldTypeException(data_->isRequest(),"BC_GET", data_->getSeqNum(),tag);
                }
            } while ( true );
        } catch ( exceptions::IOException e ) {
            throw PvapSerializationException( data_->isRequest(),
                                              data_->getSeqNum(),
                                              "reading field tag=%d of BC_GET: %s",
                                              tag, e.what() );
        }
        checkFields();
    }

    uint32_t getSeqNum() const {
        return data_ ? data_->getSeqNum() : uint32_t(-1);
    }

protected:
    void checkFields() const /* throw (PvapException) */ 
    {
        // using parent check
        if ( !data_->isValid() ) {
            throw MessageIsBrokenException(data_->isRequest(), data_->getSeqNum(), "message BC_GET is broken: %s",data_->toString().c_str());
        }
    }

private:
    BC_GET( const BC_GET& );
    BC_GET& operator = ( const BC_GET& );

protected:
    //static const uint8_t versionMajor=2;
    //static const uint8_t versionMinor=0;

    bool                owned_;
    GetCommand* data_;

};

} // namespace scag2
} // namespace pvss
} // namespace pvap
#endif
