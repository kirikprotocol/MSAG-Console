// NOTE: Do NOT edit this file (it is auto-generated).
// Instead, edit message-cpp.tmpl and regenerate.

#ifndef __SCAG_PVSS_PVAP_PC_PROFILE_RESP_HPP__
#define __SCAG_PVSS_PVAP_PC_PROFILE_RESP_HPP__

#include "util/int.h"
#include <string>
#include "scag/pvss/api/pvap/Exceptions.h"
// #include "scag/pvss/api/pvap/ProfileCommand.h"
#include "scag/pvss/api/pvap/ProfileResponseFiller.h"
#include "scag/pvss/api/packets/ProfileResponse.h"





namespace scag2{
namespace pvss{
namespace pvap{

class PVAP;

class PC_PROFILE_RESP
{
protected:
    static const int commandResponseTag = 40;

public:
    PC_PROFILE_RESP() :
    owned_(true),
    data_(new ProfileResponse)
    {
    }

    PC_PROFILE_RESP( ProfileResponse* other ) :
    owned_(false),
    data_(other)
    {
    }

    ~PC_PROFILE_RESP() {
        if ( data_ && owned_ ) delete data_;
    }

    void clear()
    {
        if ( ! data_ ) return;
        data_->clear();
    }

    ProfileResponse* pop() {
        ProfileResponse* rv = data_;
        data_ = 0;
        return rv;
    }

    std::string toString() const
    {
        return data_ ? data_->toString() : "";
    }

    template < class DataStream >
        void serialize( const PVAP& proto, DataStream& writer ) const throw (PvapException)
    {
        if ( ! data_ ) return;
        checkFields();
        // mandatory fields
        try {
            // printf( "write pos=%d field=%d\n", ds.getPos(), commandResponseTag );
            writer.writeTag(commandResponseTag);
            {
                ProfileResponseFiller helper( data_ );
                helper.serialize( proto, writer );
 
            }
        } catch ( exceptions::IOException e ) {
            throw PvapSerializationException( data_->isRequest(),
                                              getSeqNum(),
                                              "writing field commandResponse in PC_PROFILE_RESP: %s",
                                              e.what() );
        }
        // optional fields
    }

    template <class DataStream> void deserialize( PVAP& proto, DataStream& reader )
        throw (PvapException)
    {
        if ( ! data_ ) return;
        clear();
        int tag = -1;
        try {
            do {
                // int pos = int(reader.getPos());
                tag = reader.readTag();
                // printf( "read pos=%d field=%d\n", pos, tag );
                if ( tag == -1 ) break;
                switch(tag) {
                case commandResponseTag: {
                    ProfileResponseFiller helper(data_);
                    helper.deserialize(proto,reader);
                    break;
                }
                default:
                    throw InvalidFieldTypeException(data_->isRequest(),"PC_PROFILE_RESP", getSeqNum(),tag);
                }
            } while ( true );
        } catch ( exceptions::IOException e ) {
            throw PvapSerializationException( data_->isRequest(),
                                              getSeqNum(),
                                              "reading field tag=%d of PC_PROFILE_RESP: %s",
                                              tag, e.what() );
        }
        checkFields();
    }

    uint32_t getSeqNum() const {
        return
            data_ ? data_->getSeqNum() :
        uint32_t(-1);
    }

    void setSeqNum( uint32_t seqNum ) {
        if (data_) data_->setSeqNum(seqNum);
    }

protected:
    void checkFields() const throw (PvapException)
    {
        // using parent check
        if ( !data_->isValid() ) {
            throw MessageIsBrokenException(data_->isRequest(), getSeqNum(), "message PC_PROFILE_RESP is broken: %s",data_->toString().c_str());
        }
    }

private:
    PC_PROFILE_RESP( const PC_PROFILE_RESP& );
    PC_PROFILE_RESP& operator = ( const PC_PROFILE_RESP& );

protected:
    //static const uint8_t versionMajor=2;
    //static const uint8_t versionMinor=0;

    bool                owned_;
    ProfileResponse* data_;

};

} // namespace scag2
} // namespace pvss
} // namespace pvap
#endif
