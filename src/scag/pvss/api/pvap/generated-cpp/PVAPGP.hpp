// NOTE: Do NOT edit this file (it is auto-generated).
// Instead, edit proto-cpp.tmpl and regenerate.

#ifndef __SCAG_PVSS_PVAP_PVAPGP_HPP__
#define __SCAG_PVSS_PVAP_PVAPGP_HPP__

#include <memory>
#include "scag/pvss/api/pvap/BufferReader.h"
#include "scag/pvss/api/pvap/BufferWriter.h"
#include "scag/pvss/api/pvap/Exceptions.h"
#include "GP_RESP.hpp"

namespace scag2 {
namespace pvss {
namespace pvap {

class PVAPGP
{
public:
    enum {
        tag_GP_RESP=32777,
        tag_NO_TAG = 0xffff
    };

    class Handler
    {
    public:
        // virtual bool hasSeqNum( uint32_t seqNum ) const = 0;
        virtual void handle( GP_RESP& obj ) = 0;
    };

    PVAPGP( unsigned options = 0 ) : handler(0), options_(options) {}

    PVAPGP( Handler* newHandler, unsigned options = 0 ) : handler(newHandler), options_(options) {}

    /*
    void assignHandler( Handler* newHandler)
    {
        handler=newHandler;
    }
     */

    inline unsigned getOptions() const { return options_; }
    inline void setOptions( unsigned opt ) { options_ = opt; }

    void decodeMessage( BufferReader& ss ) throw (PvapException)
    {
        uint32_t seqNum = -1;
        // if ( ! handler->hasSeqNum(seqNum) ) throw UnexpectedSeqNumException(seqNum);
        int tag = ss.readTag();
        switch(tag) {
        case tag_GP_RESP: {
            // printf( "tag %d (%s)\n", tag, "GP_RESP" );
            GP_RESP msg;
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        default:
            throw InvalidMessageTypeException(seqNum,tag);
        }
    }

    void encodeMessage( const GP_RESP& msg, BufferWriter& ss ) const
        throw (PvapException)
    {
        ss.writeTag(tag_GP_RESP);
        msg.serialize(*this,ss);
    }

protected:
    Handler* handler; // unowned
    unsigned options_;
};

}
}
}

#endif
