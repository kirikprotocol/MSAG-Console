// NOTE: Do NOT edit this file (it is auto-generated).
// Instead, edit message-cpp.tmpl and regenerate.

#ifndef __SCAG_PVSS_PVAP_BC_GET_HPP__
#define __SCAG_PVSS_PVAP_BC_GET_HPP__

#include "util/int.h"
#include <string>
#include "Exceptions.h"
#include "TypeId.h"
#include "BC_CMD.h"

namespace scag{
namespace pvss{
namespace pvap{

// class PVAPBC;

class BC_GET : public BC_CMD 
{
public:
    inline int getId() const throw () { return TypeId<BC_GET>::getId(); }

    BC_GET()
    {
        clear();
    }
    void clear()
    {
        varNameFlag=false;
    }

    std::string toString() const
    {
        std::string rv("BC_GET:");
        char buf[32];
        sprintf(buf,"seqNum=%d",seqNum);
        rv+=buf;
        if(varNameFlag) {
            rv+=";varName=";
            rv+=varName;
        }
        return rv;
    }

    /*
    template <class DataStream> uint32_t length()const
    {
        uint32_t rv=0;
        if (varNameFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(varName);
        }
        return rv;
    }
     */

    const std::string& getVarName() const
        throw (FieldIsNullException)
    {
        if (!varNameFlag) {
            throw FieldIsNullException("varName");
        }
        return varName;
    }
    void setVarName(const std::string& value)
    {
        varName=value;
        varNameFlag=true;
    }
    bool hasVarName()const
    {
        return varNameFlag;
    }

    template <class Proto, class DataStream>
        void serialize( const Proto& proto, DataStream& ds ) const throw (PvapException)
    {
        checkFields();
        // mandatory fields
        printf( "write pos=%d field=%d\n", ds.getPos(), varNameTag );
        ds.writeTag(varNameTag);
        ds.writeByteStringLV(varName);
        // optional fields
    }

    template <class Proto, class DataStream> void deserialize(const Proto& proto, DataStream& ds)
        throw (PvapException)
    {
        clear();
        while (true) {
            int pos = int(ds.getPos());
            int tag = ds.readTag();
            printf( "read pos=%d field=%d\n", pos, tag );
            if ( tag == -1 ) break;
            switch(tag) {
            case varNameTag: {
                if (varNameFlag) {
                    throw DuplicateFieldException("varName");
                }
                varName=ds.readByteStringLV();
                varNameFlag=true;
                break;
            }
            default:
                throw NotImplementedException("reaction of reading unknown");
            }
        }
        checkFields();
    }

    uint32_t getSeqNum() const
    {
        return seqNum;
    }
 
    void setSeqNum(uint32_t value)
    {
        seqNum=value;
    }

protected:
    void checkFields() const throw (MandatoryFieldMissingException)
    {
        // checking mandatory fields
        if (!varNameFlag) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "varName", "BC_GET");
            throw MandatoryFieldMissingException(buf);
        }
        // checking optional fields
    }

protected:
    //static const uint8_t versionMajor=2;
    //static const uint8_t versionMinor=0;

    static const int varNameTag=5;

    uint32_t seqNum;

    std::string varName;

    bool varNameFlag;
};

} // namespace scag
} // namespace pvss
} // namespace pvap
#endif
