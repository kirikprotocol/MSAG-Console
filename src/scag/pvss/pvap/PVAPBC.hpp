// NOTE: Do NOT edit this file (it is auto-generated).
// Instead, edit proto-cpp.tmpl and regenerate.

#ifndef __SCAG_PVSS_PVAP_PVAPBC_HPP__
#define __SCAG_PVSS_PVAP_PVAPBC_HPP__

#include "Serializer.h"
#include "PvapBCHandler.h"
#include "Exceptions.h"
#include "BC_DEL.hpp"
#include "BC_DEL_RESP.hpp"
#include "BC_SET.hpp"
#include "BC_SET_RESP.hpp"
#include "BC_GET.hpp"
#include "BC_GET_RESP.hpp"
#include "BC_INC.hpp"
#include "BC_INC_RESP.hpp"
#include "BC_INC_MOD.hpp"
#include "BC_INC_MOD_RESP.hpp"

namespace scag {
namespace pvss {
namespace pvap {

class PVAPBC{
public:
  enum{
    tag_BC_DEL=1,
    tag_BC_DEL_RESP=32769,
    tag_BC_SET=2,
    tag_BC_SET_RESP=32770,
    tag_BC_GET=3,
    tag_BC_GET_RESP=32771,
    tag_BC_INC=4,
    tag_BC_INC_RESP=32772,
    tag_BC_INC_MOD=5,
    tag_BC_INC_MOD_RESP=32773,
    tag_NO_TAG=0xffff
  };

  void assignHandler(PvapBCHandler* newHandler)
  {
    handler=newHandler;
  }

  void decodeMessage(Serializer& ss)
  {
    uint32_t seqNum=ss.readInt32();
    uint16_t tag=ss.readInt16();
    switch(tag)
    {
      case tag_BC_DEL:
      {
        std::auto_ptr<BC_DEL> msg(new BC_DEL);
        msg->setSeqNum(seqNum);
        msg->deserialize(ss);
        handler->handle(msg);
      }break;
      case tag_BC_DEL_RESP:
      {
        std::auto_ptr<BC_DEL_RESP> msg(new BC_DEL_RESP);
        msg->setSeqNum(seqNum);
        msg->deserialize(ss);
        handler->handle(msg);
      }break;
      case tag_BC_SET:
      {
        std::auto_ptr<BC_SET> msg(new BC_SET);
        msg->setSeqNum(seqNum);
        msg->deserialize(ss);
        handler->handle(msg);
      }break;
      case tag_BC_SET_RESP:
      {
        std::auto_ptr<BC_SET_RESP> msg(new BC_SET_RESP);
        msg->setSeqNum(seqNum);
        msg->deserialize(ss);
        handler->handle(msg);
      }break;
      case tag_BC_GET:
      {
        std::auto_ptr<BC_GET> msg(new BC_GET);
        msg->setSeqNum(seqNum);
        msg->deserialize(ss);
        handler->handle(msg);
      }break;
      case tag_BC_GET_RESP:
      {
        std::auto_ptr<BC_GET_RESP> msg(new BC_GET_RESP);
        msg->setSeqNum(seqNum);
        msg->deserialize(ss);
        handler->handle(msg);
      }break;
      case tag_BC_INC:
      {
        std::auto_ptr<BC_INC> msg(new BC_INC);
        msg->setSeqNum(seqNum);
        msg->deserialize(ss);
        handler->handle(msg);
      }break;
      case tag_BC_INC_RESP:
      {
        std::auto_ptr<BC_INC_RESP> msg(new BC_INC_RESP);
        msg->setSeqNum(seqNum);
        msg->deserialize(ss);
        handler->handle(msg);
      }break;
      case tag_BC_INC_MOD:
      {
        std::auto_ptr<BC_INC_MOD> msg(new BC_INC_MOD);
        msg->setSeqNum(seqNum);
        msg->deserialize(ss);
        handler->handle(msg);
      }break;
      case tag_BC_INC_MOD_RESP:
      {
        std::auto_ptr<BC_INC_MOD_RESP> msg(new BC_INC_MOD_RESP);
        msg->setSeqNum(seqNum);
        msg->deserialize(ss);
        handler->handle(msg);
      }break;
      default:
        throw UnhandledMessage(tag);
    }
  }
  void encodeMessage(const BC_DEL& msg,Serializer& ss)
  {
    ss.writeInt32(msg.getSeqNum());
    ss.writeInt16(tag_BC_DEL);
    msg.serialize(ss);
  }
  void encodeMessage(const BC_DEL_RESP& msg,Serializer& ss)
  {
    ss.writeInt32(msg.getSeqNum());
    ss.writeInt16(tag_BC_DEL_RESP);
    msg.serialize(ss);
  }
  void encodeMessage(const BC_SET& msg,Serializer& ss)
  {
    ss.writeInt32(msg.getSeqNum());
    ss.writeInt16(tag_BC_SET);
    msg.serialize(ss);
  }
  void encodeMessage(const BC_SET_RESP& msg,Serializer& ss)
  {
    ss.writeInt32(msg.getSeqNum());
    ss.writeInt16(tag_BC_SET_RESP);
    msg.serialize(ss);
  }
  void encodeMessage(const BC_GET& msg,Serializer& ss)
  {
    ss.writeInt32(msg.getSeqNum());
    ss.writeInt16(tag_BC_GET);
    msg.serialize(ss);
  }
  void encodeMessage(const BC_GET_RESP& msg,Serializer& ss)
  {
    ss.writeInt32(msg.getSeqNum());
    ss.writeInt16(tag_BC_GET_RESP);
    msg.serialize(ss);
  }
  void encodeMessage(const BC_INC& msg,Serializer& ss)
  {
    ss.writeInt32(msg.getSeqNum());
    ss.writeInt16(tag_BC_INC);
    msg.serialize(ss);
  }
  void encodeMessage(const BC_INC_RESP& msg,Serializer& ss)
  {
    ss.writeInt32(msg.getSeqNum());
    ss.writeInt16(tag_BC_INC_RESP);
    msg.serialize(ss);
  }
  void encodeMessage(const BC_INC_MOD& msg,Serializer& ss)
  {
    ss.writeInt32(msg.getSeqNum());
    ss.writeInt16(tag_BC_INC_MOD);
    msg.serialize(ss);
  }
  void encodeMessage(const BC_INC_MOD_RESP& msg,Serializer& ss)
  {
    ss.writeInt32(msg.getSeqNum());
    ss.writeInt16(tag_BC_INC_MOD_RESP);
    msg.serialize(ss);
  }
protected:
  PvapBCHandler* handler;
};

}
}
}

#endif
