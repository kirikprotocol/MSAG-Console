// NOTE: Do NOT edit this file (it is auto-generated).
// Instead, edit message-cpp.tmpl and regenerate.

#ifndef __SCAG_PVSS_PVAP_BC_DEL_HPP__
#define __SCAG_PVSS_PVAP_BC_DEL_HPP__

#include "util/int.h"
#include <string>
#include "Exceptions.h"


namespace scag{
namespace pvss{
namespace pvap{

class BC_DEL : public BC_CMD {
public:
  BC_DEL()
  {
    Clear();
  }
  void Clear()
  {
    varNameFlag=false;
  }

  std::string toString()const
  {
    std::string rv;
    char buf[32];
		sprintf(buf,"seqNum=%d",seqNum);
		rv+=buf;
    if(varNameFlag)
    {
      rv+=";varName=";
      rv+=varName;
    }
    return rv;
  }

  template <class DataStream>
  uint32_t length()const
  {
    uint32_t rv=0;
    if(varNameFlag)
    {
      rv+=DataStream::tagTypeSize;
      rv+=DataStream::lengthTypeSize;
      rv+=DataStream::fieldSize(varName);
    }

    return rv;
  }
  const std::string& getVarName()const
  {
    if(!varNameFlag)
    {
      throw FieldIsNullException("varName");
    }
    return varName;
  }
  void setVarName(const std::string& value)
  {
    varName=value;
    varNameFlag=true;
  }
  bool hasVarName()const
  {
    return varNameFlag;
  }

  template <class DataStream>
  void serialize(DataStream& ds)const
  {
    if(!varNameFlag)
    {
      throw MandatoryFieldMissingException("varName");
    }
    // checking profile type
    //ds.writeByte(versionMajor);
    //ds.writeByte(versionMinor);
    //ds.writeInt32(seqNum);
    ds.writeTag(varNameTag);
    ds.writeStrLV(varName);
    //ds.writeTag(DataStream::endOfMessage_tag);
  }

  template <class DataStream>
  void deserialize(DataStream& ds)
  {
    Clear();
    bool endOfMessage=false;
    //uint8_t rdVersionMajor=ds.readByte();
    //uint8_t rdVersionMinor=ds.readByte();
    //if(rdVersionMajor!=versionMajor)
    //{
    //  throw IncompatibleVersionException("BC_DEL");
    //}
    //seqNum=ds.readInt32();
    while(!endOfMessage)
    {
      uint32_t tag=ds.readTag();
      switch(tag)
      {
        case varNameTag:
        {
          if(varNameFlag)
          {
            throw DuplicateFieldException("varName");
          }
          varName=ds.readStrLV();
          varNameFlag=true;
        }break;
        case DataStream::endOfMessage_tag:
          endOfMessage=true;
          break;
        default:
          //if(rdVersionMinor==versionMinor)
          //{
          //  throw UnexpectedTag("BC_DEL",tag);
          //}
          ds.skip(ds.readLength());
      }
    }
    if(!varNameFlag)
    {
      throw MandatoryFieldMissingException("varName");
    }
    // checking profile type
  }

  uint32_t getSeqNum()const
  {
    return seqNum;
  }
 
  void setSeqNum(uint32_t value)
  {
    seqNum=value;
  }

protected:
  //static const uint8_t versionMajor=2;
  //static const uint8_t versionMinor=0;

  static const uint32_t varNameTag=5;

  uint32_t seqNum;

  std::string varName;

  bool varNameFlag;
};

}
}
}
#endif
