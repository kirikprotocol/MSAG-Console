// NOTE: Do NOT edit this file (it is auto-generated).
// Instead, edit message-cpp.tmpl and regenerate.

#ifndef __SCAG_PVSS_PVAP_PC_INC_HPP__
#define __SCAG_PVSS_PVAP_PC_INC_HPP__

#include "util/int.h"
#include <string>
#include "Exceptions.h"
#include "TypeId.h"


namespace scag{
namespace pvss{
namespace pvap{

// class PVAP;

class PC_INC  
{
public:
    PC_INC()
    {
        clear();
    }
    void clear()
    {
        profileTypeFlag=false;
        abonentKeyFlag=false;
        profileKeyFlag=false;
        varNameFlag=false;
        valueTypeFlag=false;
        timePolicyFlag=false;
        finalDateFlag=false;
        lifeTimeFlag=false;
        intValueFlag=false;
    }

    std::string toString() const
    {
        std::string rv("PC_INC:");
        char buf[32];
        sprintf(buf,"seqNum=%d",seqNum);
        rv+=buf;
        if(profileTypeFlag) {
            rv+=";profileType=";
            sprintf(buf,"%u",(unsigned int)profileType);
            rv+=buf;
        }
        if(abonentKeyFlag) {
            rv+=";abonentKey=";
            rv+=abonentKey;
        }
        if(profileKeyFlag) {
            rv+=";profileKey=";
            sprintf(buf,"%u",(unsigned int)profileKey);
            rv+=buf;
        }
        if(varNameFlag) {
            rv+=";varName=";
            rv+=varName;
        }
        if(valueTypeFlag) {
            rv+=";valueType=";
            sprintf(buf,"%u",(unsigned int)valueType);
            rv+=buf;
        }
        if(timePolicyFlag) {
            rv+=";timePolicy=";
            sprintf(buf,"%u",(unsigned int)timePolicy);
            rv+=buf;
        }
        if(finalDateFlag) {
            rv+=";finalDate=";
            sprintf(buf,"%u",(unsigned int)finalDate);
            rv+=buf;
        }
        if(lifeTimeFlag) {
            rv+=";lifeTime=";
            sprintf(buf,"%u",(unsigned int)lifeTime);
            rv+=buf;
        }
        if(intValueFlag) {
            rv+=";intValue=";
            sprintf(buf,"%u",(unsigned int)intValue);
            rv+=buf;
        }
        return rv;
    }

    /*
    template <class DataStream> uint32_t length()const
    {
        uint32_t rv=0;
        if (profileTypeFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(profileType);
        }
        if (abonentKeyFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(abonentKey);
        }
        if (profileKeyFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(profileKey);
        }
        if (varNameFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(varName);
        }
        if (valueTypeFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(valueType);
        }
        if (timePolicyFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(timePolicy);
        }
        if (finalDateFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(finalDate);
        }
        if (lifeTimeFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(lifeTime);
        }
        if (intValueFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(intValue);
        }
        return rv;
    }
     */

    uint8_t getProfileType() const
        throw (FieldIsNullException)
    {
        if (!profileTypeFlag) {
            throw FieldIsNullException("profileType");
        }
        return profileType;
    }
    void setProfileType(uint8_t value)
    {
        profileType=value;
        profileTypeFlag=true;
    }
    bool hasProfileType()const
    {
        return profileTypeFlag;
    }
    const std::string& getAbonentKey() const
        throw (FieldIsNullException)
    {
        if (!abonentKeyFlag) {
            throw FieldIsNullException("abonentKey");
        }
        return abonentKey;
    }
    void setAbonentKey(const std::string& value)
    {
        abonentKey=value;
        abonentKeyFlag=true;
    }
    bool hasAbonentKey()const
    {
        return abonentKeyFlag;
    }
    uint32_t getProfileKey() const
        throw (FieldIsNullException)
    {
        if (!profileKeyFlag) {
            throw FieldIsNullException("profileKey");
        }
        return profileKey;
    }
    void setProfileKey(uint32_t value)
    {
        profileKey=value;
        profileKeyFlag=true;
    }
    bool hasProfileKey()const
    {
        return profileKeyFlag;
    }
    const std::string& getVarName() const
        throw (FieldIsNullException)
    {
        if (!varNameFlag) {
            throw FieldIsNullException("varName");
        }
        return varName;
    }
    void setVarName(const std::string& value)
    {
        varName=value;
        varNameFlag=true;
    }
    bool hasVarName()const
    {
        return varNameFlag;
    }
    uint8_t getValueType() const
        throw (FieldIsNullException)
    {
        if (!valueTypeFlag) {
            throw FieldIsNullException("valueType");
        }
        return valueType;
    }
    void setValueType(uint8_t value)
    {
        valueType=value;
        valueTypeFlag=true;
    }
    bool hasValueType()const
    {
        return valueTypeFlag;
    }
    uint8_t getTimePolicy() const
        throw (FieldIsNullException)
    {
        if (!timePolicyFlag) {
            throw FieldIsNullException("timePolicy");
        }
        return timePolicy;
    }
    void setTimePolicy(uint8_t value)
    {
        timePolicy=value;
        timePolicyFlag=true;
    }
    bool hasTimePolicy()const
    {
        return timePolicyFlag;
    }
    uint32_t getFinalDate() const
        throw (FieldIsNullException)
    {
        if (!finalDateFlag) {
            throw FieldIsNullException("finalDate");
        }
        return finalDate;
    }
    void setFinalDate(uint32_t value)
    {
        finalDate=value;
        finalDateFlag=true;
    }
    bool hasFinalDate()const
    {
        return finalDateFlag;
    }
    uint32_t getLifeTime() const
        throw (FieldIsNullException)
    {
        if (!lifeTimeFlag) {
            throw FieldIsNullException("lifeTime");
        }
        return lifeTime;
    }
    void setLifeTime(uint32_t value)
    {
        lifeTime=value;
        lifeTimeFlag=true;
    }
    bool hasLifeTime()const
    {
        return lifeTimeFlag;
    }
    uint32_t getIntValue() const
        throw (FieldIsNullException)
    {
        if (!intValueFlag) {
            throw FieldIsNullException("intValue");
        }
        return intValue;
    }
    void setIntValue(uint32_t value)
    {
        intValue=value;
        intValueFlag=true;
    }
    bool hasIntValue()const
    {
        return intValueFlag;
    }

    template <class Proto, class DataStream>
        void serialize( const Proto& proto, DataStream& ds ) const throw (PvapException)
    {
        checkFields();
        // mandatory fields
        printf( "write pos=%d field=%d\n", ds.getPos(), profileTypeTag );
        ds.writeTag(profileTypeTag);
        ds.writeByteLV(profileType);
        printf( "write pos=%d field=%d\n", ds.getPos(), varNameTag );
        ds.writeTag(varNameTag);
        ds.writeByteStringLV(varName);
        printf( "write pos=%d field=%d\n", ds.getPos(), valueTypeTag );
        ds.writeTag(valueTypeTag);
        ds.writeByteLV(valueType);
        printf( "write pos=%d field=%d\n", ds.getPos(), timePolicyTag );
        ds.writeTag(timePolicyTag);
        ds.writeByteLV(timePolicy);
        printf( "write pos=%d field=%d\n", ds.getPos(), finalDateTag );
        ds.writeTag(finalDateTag);
        ds.writeInt32LV(finalDate);
        printf( "write pos=%d field=%d\n", ds.getPos(), lifeTimeTag );
        ds.writeTag(lifeTimeTag);
        ds.writeInt32LV(lifeTime);
        printf( "write pos=%d field=%d\n", ds.getPos(), intValueTag );
        ds.writeTag(intValueTag);
        ds.writeInt32LV(intValue);
        // optional fields
        if (abonentKeyFlag) {
            printf( "write pos=%d field=%d\n", ds.getPos(), abonentKeyTag );
            ds.writeTag(abonentKeyTag);
            ds.writeByteStringLV(abonentKey);
        }
        if (profileKeyFlag) {
            printf( "write pos=%d field=%d\n", ds.getPos(), profileKeyTag );
            ds.writeTag(profileKeyTag);
            ds.writeInt32LV(profileKey);
        }
    }

    template <class Proto, class DataStream> void deserialize(const Proto& proto, DataStream& ds)
        throw (PvapException)
    {
        clear();
        while (true) {
            int pos = int(ds.getPos());
            int tag = ds.readTag();
            printf( "read pos=%d field=%d\n", pos, tag );
            if ( tag == -1 ) break;
            switch(tag) {
            case profileTypeTag: {
                if (profileTypeFlag) {
                    throw DuplicateFieldException("profileType");
                }
                profileType=ds.readByteLV();
                profileTypeFlag=true;
                break;
            }
            case abonentKeyTag: {
                if (abonentKeyFlag) {
                    throw DuplicateFieldException("abonentKey");
                }
                abonentKey=ds.readByteStringLV();
                abonentKeyFlag=true;
                break;
            }
            case profileKeyTag: {
                if (profileKeyFlag) {
                    throw DuplicateFieldException("profileKey");
                }
                profileKey=ds.readInt32LV();
                profileKeyFlag=true;
                break;
            }
            case varNameTag: {
                if (varNameFlag) {
                    throw DuplicateFieldException("varName");
                }
                varName=ds.readByteStringLV();
                varNameFlag=true;
                break;
            }
            case valueTypeTag: {
                if (valueTypeFlag) {
                    throw DuplicateFieldException("valueType");
                }
                valueType=ds.readByteLV();
                valueTypeFlag=true;
                break;
            }
            case timePolicyTag: {
                if (timePolicyFlag) {
                    throw DuplicateFieldException("timePolicy");
                }
                timePolicy=ds.readByteLV();
                timePolicyFlag=true;
                break;
            }
            case finalDateTag: {
                if (finalDateFlag) {
                    throw DuplicateFieldException("finalDate");
                }
                finalDate=ds.readInt32LV();
                finalDateFlag=true;
                break;
            }
            case lifeTimeTag: {
                if (lifeTimeFlag) {
                    throw DuplicateFieldException("lifeTime");
                }
                lifeTime=ds.readInt32LV();
                lifeTimeFlag=true;
                break;
            }
            case intValueTag: {
                if (intValueFlag) {
                    throw DuplicateFieldException("intValue");
                }
                intValue=ds.readInt32LV();
                intValueFlag=true;
                break;
            }
            default:
                throw NotImplementedException("reaction of reading unknown");
            }
        }
        checkFields();
    }

    uint32_t getSeqNum() const
    {
        return seqNum;
    }
 
    void setSeqNum(uint32_t value)
    {
        seqNum=value;
    }

protected:
    void checkFields() const throw (MandatoryFieldMissingException)
    {
        // checking mandatory fields
        if (!profileTypeFlag) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "profileType", "PC_INC");
            throw MandatoryFieldMissingException(buf);
        }
        if (!varNameFlag) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "varName", "PC_INC");
            throw MandatoryFieldMissingException(buf);
        }
        if (!valueTypeFlag) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "valueType", "PC_INC");
            throw MandatoryFieldMissingException(buf);
        }
        if (!timePolicyFlag) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "timePolicy", "PC_INC");
            throw MandatoryFieldMissingException(buf);
        }
        if (!finalDateFlag) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "finalDate", "PC_INC");
            throw MandatoryFieldMissingException(buf);
        }
        if (!lifeTimeFlag) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "lifeTime", "PC_INC");
            throw MandatoryFieldMissingException(buf);
        }
        if (!intValueFlag) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "intValue", "PC_INC");
            throw MandatoryFieldMissingException(buf);
        }
        // checking optional fields
        if (!abonentKeyFlag
            && (profileType==1)
            ) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "abonentKey", "PC_INC");
            throw MandatoryFieldMissingException(buf);
        }
        if (!profileKeyFlag
            && (profileType>1)
            && (profileType<5)
            ) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "profileKey", "PC_INC");
            throw MandatoryFieldMissingException(buf);
        }
    }

protected:
    //static const uint8_t versionMajor=2;
    //static const uint8_t versionMinor=0;

    static const int profileTypeTag=2;
    static const int abonentKeyTag=3;
    static const int profileKeyTag=4;
    static const int varNameTag=5;
    static const int valueTypeTag=6;
    static const int timePolicyTag=7;
    static const int finalDateTag=8;
    static const int lifeTimeTag=9;
    static const int intValueTag=10;

    uint32_t seqNum;

    uint8_t profileType;
    std::string abonentKey;
    uint32_t profileKey;
    std::string varName;
    uint8_t valueType;
    uint8_t timePolicy;
    uint32_t finalDate;
    uint32_t lifeTime;
    uint32_t intValue;

    bool profileTypeFlag;
    bool abonentKeyFlag;
    bool profileKeyFlag;
    bool varNameFlag;
    bool valueTypeFlag;
    bool timePolicyFlag;
    bool finalDateFlag;
    bool lifeTimeFlag;
    bool intValueFlag;
};

} // namespace scag
} // namespace pvss
} // namespace pvap
#endif
