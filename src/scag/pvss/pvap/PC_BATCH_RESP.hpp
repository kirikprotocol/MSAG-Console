// NOTE: Do NOT edit this file (it is auto-generated).
// Instead, edit message-cpp.tmpl and regenerate.

#ifndef __SCAG_PVSS_PVAP_PC_BATCH_RESP_HPP__
#define __SCAG_PVSS_PVAP_PC_BATCH_RESP_HPP__

#include "util/int.h"
#include <string>
#include "Exceptions.h"
#include "TypeId.h"
#include "BatchCmdArray.h"


namespace scag{
namespace pvss{
namespace pvap{

// class PVAP;

class PC_BATCH_RESP  
{
public:
    PC_BATCH_RESP()
    {
        clear();
    }
    void clear()
    {
        statusFlag=false;
        batchContentFlag=false;
    }

    std::string toString() const
    {
        std::string rv("PC_BATCH_RESP:");
        char buf[32];
        sprintf(buf,"seqNum=%d",seqNum);
        rv+=buf;
        if(statusFlag) {
            rv+=";status=";
            sprintf(buf,"%u",(unsigned int)status);
            rv+=buf;
        }
        if(batchContentFlag) {
            rv+=";batchContent=";
            rv+=batchContent.toString();
        }
        return rv;
    }

    /*
    template <class DataStream> uint32_t length()const
    {
        uint32_t rv=0;
        if (statusFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(status);
        }
        if (batchContentFlag) {
            rv+=DataStream::tagTypeSize;
            rv+=DataStream::lengthTypeSize;
            rv+=DataStream::fieldSize(batchContent);
        }
        return rv;
    }
     */

    uint8_t getStatus() const
        throw (FieldIsNullException)
    {
        if (!statusFlag) {
            throw FieldIsNullException("status");
        }
        return status;
    }
    void setStatus(uint8_t value)
    {
        status=value;
        statusFlag=true;
    }
    bool hasStatus()const
    {
        return statusFlag;
    }
    const BatchCmdArray& getBatchContent() const
        throw (FieldIsNullException)
    {
        if (!batchContentFlag) {
            throw FieldIsNullException("batchContent");
        }
        return batchContent;
    }
    void setBatchContent(const BatchCmdArray& value)
    {
        batchContent=value;
        batchContentFlag=true;
    }
    bool hasBatchContent()const
    {
        return batchContentFlag;
    }

    template <class Proto, class DataStream>
        void serialize( const Proto& proto, DataStream& ds ) const throw (PvapException)
    {
        checkFields();
        // mandatory fields
        printf( "write pos=%d field=%d\n", ds.getPos(), statusTag );
        ds.writeTag(statusTag);
        ds.writeByteLV(status);
        printf( "write pos=%d field=%d\n", ds.getPos(), batchContentTag );
        ds.writeTag(batchContentTag);
        batchContent.serialize(proto,ds);
        // optional fields
    }

    template <class Proto, class DataStream> void deserialize(const Proto& proto, DataStream& ds)
        throw (PvapException)
    {
        clear();
        while (true) {
            int pos = int(ds.getPos());
            int tag = ds.readTag();
            printf( "read pos=%d field=%d\n", pos, tag );
            if ( tag == -1 ) break;
            switch(tag) {
            case statusTag: {
                if (statusFlag) {
                    throw DuplicateFieldException("status");
                }
                status=ds.readByteLV();
                statusFlag=true;
                break;
            }
            case batchContentTag: {
                if (batchContentFlag) {
                    throw DuplicateFieldException("batchContent");
                }
                batchContent.deserialize(proto,ds);
                batchContentFlag=true;
                break;
            }
            default:
                throw NotImplementedException("reaction of reading unknown");
            }
        }
        checkFields();
    }

    uint32_t getSeqNum() const
    {
        return seqNum;
    }
 
    void setSeqNum(uint32_t value)
    {
        seqNum=value;
    }

protected:
    void checkFields() const throw (MandatoryFieldMissingException)
    {
        // checking mandatory fields
        if (!statusFlag) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "status", "PC_BATCH_RESP");
            throw MandatoryFieldMissingException(buf);
        }
        if (!batchContentFlag) {
            char buf[256];
            snprintf( buf, sizeof(buf), "field=%s msg=%s", "batchContent", "PC_BATCH_RESP");
            throw MandatoryFieldMissingException(buf);
        }
        // checking optional fields
    }

protected:
    //static const uint8_t versionMajor=2;
    //static const uint8_t versionMinor=0;

    static const int statusTag=1;
    static const int batchContentTag=23;

    uint32_t seqNum;

    uint8_t status;
    BatchCmdArray batchContent;

    bool statusFlag;
    bool batchContentFlag;
};

} // namespace scag
} // namespace pvss
} // namespace pvap
#endif
