package $var package$.pvap.protocol.pdu;

import $var package$.pvap.*;
import $var package$.pvap.protocol.*;
import $var package$.common.PvapException;

$macro type$$pack$
$select %1$
$case byte$byte
$case uint16$short
$case uint32$int
$case uint64$long
$case string$String
$case ascii$String
$case utf8$String
$case bool$boolean
$default$$var %1$
$-select$
$-pack$$-macro$

public class $var message.name$ $if options.inheritsFromBatchCmd$ extends BatchCmd$-if$ 
{
    // static Logger logger = Logger.getLogger($var message.name$.class);

$foreach field$
    static final int $var field.name$Tag = $var field.tag$;
$-foreach$

    int seqNum;
$foreach field$
    $expand type field.type$ $var field.name$;
    boolean $var field.name$Flag=false;
$-foreach$

    public $var message.name$() {
    }

    public $var message.name$( int seqNum ) {
        this.seqNum = seqNum;
    }

    /*
    public $var message.name$(int seqNum$pack$
$foreach field$
, $expand type field.type$ $var field.name$
$-foreach$
$-pack$)
    {
        this.seqNum = seqNum;
$foreach field$
        this.$var field.name$ = $var field.name$;
        this.$var field.name$Flag = true;
$-foreach$
    }
     */
  
    public boolean isRequest() {
        return $if message.request$true$-if$$if !message.request$false$-if$;
    }

    public void clear()
    {
$foreach field$
        $var field.name$Flag=false;
$-foreach$
    }
  
    public String toString()
    {
        StringBuilder sb=new StringBuilder();
        sb.append("$var message.name$:");
        sb.append("seqNum=");
        sb.append(seqNum);
$foreach field$
        if ( has$var field.name:ucf$() ) {
            sb.append(";$var field.name$=");
            $pack$$select field.type$
            $case bool$sb.append($var field.name$);
            $case byte$sb.append($var field.name$);
            $case uint16$sb.append($var field.name$);
            $case uint32$sb.append($var field.name$);
            $case uint64$sb.append($var field.name$);
            $case string$sb.append($var field.name$);
            $case ascii$sb.append($var field.name$);
            $case utf8$sb.append($var field.name$);
            $default$sb.append($var field.name$.toString());
            $-select$$-pack$
        }
$-foreach$
        return sb.toString();
    }
$foreach field$

    public $expand type field.type$ get$var field.name:ucf$()
$if options.throwOnUnsetGet$
           throws FieldIsNullException
$-if$
    {
$if options.throwOnUnsetGet$
        if( ! has$var field.name:ucf$() ) {
            throw new FieldIsNullException(isRequest(), "field $var field.name$ of $var message.name$ is not set", seqNum);
        }
$-if$
        return $var field.name$;
    }

    public void set$var field.name:ucf$($expand type field.type$ $var field.name$)
    {
        this.$var field.name$ = $var field.name$;
        this.$var field.name$Flag = true;
$if field.optional$
$ifdef field.checkVar$
        $var field.checkVar$ = $var field.checkVal$;
        $var field.checkVar$Flag = true;
$-ifdef$
$-if$
    }

    public boolean has$var field.name:ucf$()
    {
        return $var field.name$Flag$if field.optional$$ifdef field.checkVar$ && ( $var field.checkVar$ == $var field.checkVal$ )$-ifdef$$-if$;
    }
$-foreach$

    public void encode( $var protocol.name:ucf$ proto, IBufferWriter writer ) throws PvapException
    {
        checkFields();
        // mandatory fields
$foreach field$
$if field.mandatory$
        // System.out.println("write pos=" + writer.getPos() + " field=" + $var field.name$Tag);
        writer.writeTag($var field.name$Tag);
        $select field.type$
$case string$writer.writeStringLV($var field.name$);
$case ascii$try {
            writer.writeUTFLV($var field.name$);
        } catch ( java.io.IOException e ) {
            throw new PvapSerializationException( isRequest(), "writing ascii field $var field.name$ in $var message.name$:" + e.getMessage(), seqNum );
        }
$case utf8$try {
            writer.writeUTFLV($var field.name$);
        } catch ( java.io.IOException e ) {
            throw new PvapSerializationException( isRequest(), "writing utf8 field $var field.name$ in $var message.name$:" + e.getMessage(), seqNum );
        }
$case byte$writer.writeByteLV($var field.name$);
$case uint16$writer.writeShortLV($var field.name$);
$case uint32$writer.writeIntLV($var field.name$);
$case uint64$writer.writeLongLV($var field.name$);
$case bool$writer.writeBoolLV($var field.name$);
$case nested$throw new NotImplementedException("writing field $var field.name$ of $var message.name$ is not impl yet", seqNum);
$default$$var field.name$.encode(proto,writer);
$-select$
$-if$
$-foreach$
        // optional fields
$foreach field$
$if field.optional$
        if ( has$var field.name:ucf$() ) {
            // System.out.println("write pos=" + writer.getPos() + " field=" + $var field.name$Tag);
            writer.writeTag($var field.name$Tag);
            $select field.type$
$case string$writer.writeStringLV($var field.name$);
$case ascii$try {
                writer.writeUTFLV($var field.name$);
            } catch ( java.io.IOException e ) {
                throw new PvapSerializationException( isRequest(), "writing ascii field $var field.name$ in $var message.name$:" + e.getMessage(), seqNum );
            }
$case utf8$try {
                writer.writeUTFLV($var field.name$);
            } catch ( java.io.IOException e ) {
                throw new PvapSerializationException( isRequest(), "writing utf8 field $var field.name$ in $var message.name$:" + e.getMessage(), seqNum );
            }
$case byte$writer.writeByteLV($var field.name$);
$case uint16$writer.writeShortLV($var field.name$);
$case uint32$writer.writeIntLV($var field.name$);
$case uint64$writer.writeLongLV($var field.name$);
$case bool$writer.writeBoolLV($var field.name$);
$case nested$throw new NotImplementedException("writing field $var field.name$ of $var message.name$ is not impl yet",seqNum);
$default$$var field.name$.encode(proto,writer);
$-select$
        }
$-if$
$-foreach$
    }

    public void decode( $var protocol.name:ucf$ proto, IBufferReader reader ) throws PvapException
    {
        clear();
        int tag = -1;
        try {
            while( true ) {
                // int pos = reader.getPos();
                tag = reader.readTag();
                // System.out.println("read pos=" + pos + " field=" + tag);
                if ( tag == -1 ) break;
                switch( tag ) {
$foreach field$
                case $var field.name$Tag: {
                    if ($var field.name$Flag) {
                        throw new DuplicateFieldException(isRequest(),"duplicate field $var field.name$ of $var message.name$",seqNum);
                    }
                    $select field.type$
$case string$$var field.name$=reader.readStringLV();
$case ascii$$var field.name$=reader.readUTFLV();
$case utf8$$var field.name$=reader.readUTFLV();
$case byte$$var field.name$=reader.readByteLV();
$case uint16$$var field.name$=reader.readShortLV();
$case uint32$$var field.name$=reader.readIntLV();
$case uint64$$var field.name$=reader.readLongLV();
$case bool$$var field.name$=reader.readBoolLV();
$case nested$throw new NotImplementedException("reading field $var field.name$ of $var message.name$ is not impl yet",seqNum);
$default$$var field.name$ = new $var field.type$();
                    $var field.name$.decode(proto,reader);
$-select$
                    $var field.name$Flag=true;
                    break;
                }
$-foreach$
                default:
                    throw new InvalidFieldTypeException(isRequest(),"invalid field in $var message.name$",seqNum,tag);
                }
            }
        } catch ( java.io.IOException e ) {
            throw new PvapSerializationException( isRequest(), "reading field tag=" + tag + " of $var message.name$:" + e.getMessage(), seqNum );
        }
        // checking integrity
        checkFields();
    }

    public int getSeqNum()
    {
        return seqNum;
    }

    public void setSeqNum(int seqNum)
    {
        this.seqNum = seqNum;
    }

    protected void checkFields() throws MandatoryFieldMissingException
    {
        // checking mandatory fields
$foreach field$
$if field.mandatory$
        if (!$var field.name$Flag) {
            throw new MandatoryFieldMissingException(isRequest(),"field is missing $var field.name$ in $var message.name$",seqNum);
        }
$-if$
$-foreach$
        // checking optional fields
$foreach field$
$if field.optional$
$ifdef field.checkVar$
        if ( ($var field.checkVar$==$var field.checkVal$) && ! $var field.name$Flag ) {
            throw new MandatoryFieldMissingException(isRequest(),"field is missing $var field.name$ in $var message.name$",seqNum);
        }
$-ifdef$
$-if$
$-foreach$
    }
}
