package $var package$.generated;

import $var package$.*;

/**
 * This protocol has header: len (4 oct), seq (4 oct), tag ( 2 oct.), message body
 */
public class $var protocol.name:ucf$
{
$foreach message$
    static final short tag_$var message.name:ucf$=(short)$var message.tag$;
$-foreach$

    public static interface Handler {
        public boolean hasSeqNum( int seqNum );
$foreach message$
        public void handle( $var message.name$ object );
$-foreach$
    }

    Handler handler;
    public $var protocol.name$() {
    }

    public $var protocol.name$(Handler handler) {
        this.handler = handler;
    }

    public void assignHandler(Handler newHandler) {
        this.handler = newHandler;
    }

    public void decodeMessage( IBufferReader reader ) throws PvapException
    {
        int seqNum = -1;
        try {
            seqNum = reader.readInt();
            if ( ! handler.hasSeqNum(seqNum) ) throw new UnexpectedSeqNumException(seqNum);
            int tag = reader.readTag();
            switch( tag ) {
$foreach message$
            case tag_$var message.name:ucf$: {
                $var message.name$ object = new $var message.name$();
                object.setSeqNum(seqNum);
                object.decode(this,reader);
                handler.handle(object);
                break;
            }
$-foreach$
            default: throw new InvalidMessageTypeException(seqNum,tag);
            }
        } catch ( java.io.IOException e ) {
            throw new PvapSerializationException( e.getMessage(), seqNum );
        }
    }
$foreach message$

    public byte[] encodeMessage( $var message.name$ object, IBufferWriter writer ) throws PvapException
    {
        // BufferWriter writer = new BufferWriter();
        try {
            writer.writeInt(object.getSeqNum());
            writer.writeTag(tag_$var message.name$);
            object.encode(this,writer);
        } catch ( PvapException e ) {
            e.setSeqNum(object.getSeqNum());
            throw e;
        }
        return writer.getData();
    }
$-foreach$
$if options.inheritsFromBatchCmd$

    public byte[] encodeCastMessage( BatchCmd msg, IBufferWriter writer ) throws PvapException
    {
        try {
            Class<? extends BatchCmd> c = msg.getClass();
$foreach message$
            if ( c == $var message.name:ucf$.class ) {
                encodeMessage(($var message.name:ucf$)msg, writer);
            } else
$-foreach$
            {
                throw new InvalidMessageTypeException("unhandled batch cmd class:" + c.toString(),msg.getSeqNum());
            }
        } catch ( PvapException e ) {
            e.setSeqNum( msg.getSeqNum() );
            throw e;
        }
        return writer.getData();
    }
$-if$
}
