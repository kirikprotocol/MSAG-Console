/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.18.2.1 $ of : mfd-data-get.m2c,v $
 *
 * $Id$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "routeErrTable.hpp"

namespace scag2{
namespace snmp{
namespace routeerrtable{

/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement routeErrTable get routines.
 * TODO:240:M: Implement routeErrTable mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table routeErrTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * routeErrTable is subid 13 of msag.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.26757.2.13, length: 9
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement routeErrTable data context functions.
 */

/*---------------------------------------------------------------------
 * SIBINCO-SMSC-MIB::routeErrEntry.routeErrIndex
 * routeErrIndex is subid 1 of routeErrEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.13.1.1
 * Description:
SME Index.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   0
 *
 * Ranges:  0 - 2000;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * map a value from its original native format to the MIB format.
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_ERROR           : Any other error
 *
 * @note parameters follow the memset convention (dest, src).
 *
 * @note generation and use of this function can be turned off by re-running
 * mib2c after adding the following line to the file
 * default-node-routeErrIndex.m2d :
 *   @eval $m2c_node_skip_mapping = 1@
 *
 * @remark
 *  If the values for your data type don't exactly match the
 *  possible values defined by the mib, you should map them here.
 *  Otherwise, just do a direct copy.
 */
int
routeErrIndex_map(long *mib_routeErrIndex_val_ptr, long raw_routeErrIndex_val)
{
    netsnmp_assert(NULL != mib_routeErrIndex_val_ptr);

    DEBUGMSGTL(("verbose:routeErrTable:routeErrIndex_map","called\n"));

    /*
     * TODO:241:o: |-> Implement routeErrIndex mapping.
     * If the values for your data type don't exactly match the
     * possible values defined by the mib, you should map them here.
     */
    (*mib_routeErrIndex_val_ptr) = raw_routeErrIndex_val;

    return MFD_SUCCESS;
} /* routeErrIndex_map */

/*---------------------------------------------------------------------
 * SIBINCO-SMSC-MIB::routeErrEntry.routeErrCode
 * routeErrCode is subid 2 of routeErrEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.13.1.2
 * Description:
SME Err Code.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   0
 *
 * Ranges:  0 - 2000;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * map a value from its original native format to the MIB format.
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_ERROR           : Any other error
 *
 * @note parameters follow the memset convention (dest, src).
 *
 * @note generation and use of this function can be turned off by re-running
 * mib2c after adding the following line to the file
 * default-node-routeErrCode.m2d :
 *   @eval $m2c_node_skip_mapping = 1@
 *
 * @remark
 *  If the values for your data type don't exactly match the
 *  possible values defined by the mib, you should map them here.
 *  Otherwise, just do a direct copy.
 */
int
routeErrCode_map(long *mib_routeErrCode_val_ptr, long raw_routeErrCode_val)
{
    netsnmp_assert(NULL != mib_routeErrCode_val_ptr);

    DEBUGMSGTL(("verbose:routeErrTable:routeErrCode_map","called\n"));

    /*
     * TODO:241:o: |-> Implement routeErrCode mapping.
     * If the values for your data type don't exactly match the
     * possible values defined by the mib, you should map them here.
     */
    (*mib_routeErrCode_val_ptr) = raw_routeErrCode_val;

    return MFD_SUCCESS;
} /* routeErrCode_map */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
routeErrTable_indexes_set_tbl_idx(routeErrTable_mib_index *tbl_idx, long routeErrIndex_val, long routeErrCode_val)
{
    DEBUGMSGTL(("verbose:routeErrTable:routeErrTable_indexes_set_tbl_idx","called\n"));

    /* routeErrIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h */
    tbl_idx->routeErrIndex = routeErrIndex_val;

    /* routeErrCode(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h */
    tbl_idx->routeErrCode = routeErrCode_val;


    return MFD_SUCCESS;
} /* routeErrTable_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
routeErrTable_indexes_set(routeErrTable_rowreq_ctx *rowreq_ctx, long routeErrIndex_val, long routeErrCode_val)
{
    DEBUGMSGTL(("verbose:routeErrTable:routeErrTable_indexes_set","called\n"));

    if(MFD_SUCCESS != routeErrTable_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , routeErrIndex_val
                                   , routeErrCode_val
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = (int)(sizeof(rowreq_ctx->oid_tmp) / sizeof(oid));
    if(0 != routeErrTable_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* routeErrTable_indexes_set */


/*---------------------------------------------------------------------
 * SIBINCO-SMSC-MIB::routeErrEntry.routeErrId
 * routeErrId is subid 3 of routeErrEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.13.1.3
 * Description:
SME system Id.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   1
 *   settable   0
 *   hint: 255a
 *
 * Ranges:  0 - 32;
 *
 * Its syntax is DisplayString (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.  (Max 32)
 */
/**
 * map a value from its original native format to the MIB format.
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_ERROR           : Any other error
 *
 * @note parameters follow the memset convention (dest, src).
 *
 * @note generation and use of this function can be turned off by re-running
 * mib2c after adding the following line to the file
 * default-node-routeErrId.m2d :
 *   @eval $m2c_node_skip_mapping = 1@
 *
 * @remark
 *  If the values for your data type don't exactly match the
 *  possible values defined by the mib, you should map them here.
 *  Otherwise, just do a direct copy.
 */
int
routeErrId_map(char **mib_routeErrId_val_ptr_ptr, size_t *mib_routeErrId_val_ptr_len_ptr, char *raw_routeErrId_val_ptr, size_t raw_routeErrId_val_ptr_len, int allow_realloc)
{
    size_t converted_len;

    netsnmp_assert(NULL != raw_routeErrId_val_ptr);
    netsnmp_assert((NULL != mib_routeErrId_val_ptr_ptr) && (NULL != mib_routeErrId_val_ptr_len_ptr));

    DEBUGMSGTL(("verbose:routeErrTable:routeErrId_map","called\n"));

    /*
     * TODO:241:r: |-> Implement routeErrId non-integer mapping
     * it is hard to autogenerate code for mapping types that are not simple
     * integers, so here is an idea of what you might need to do. It will
     * probably need some tweaking to get right.
     */
    /*
     * if the length of the raw data doesn't directly correspond with
     * the length of the mib data, set converted_len to the
     * space required.
     */
    converted_len = raw_routeErrId_val_ptr_len; /* assume equal */
    if((NULL == *mib_routeErrId_val_ptr_ptr) || (*mib_routeErrId_val_ptr_len_ptr < converted_len)) {
        if(! allow_realloc) {
            snmp_log(LOG_ERR,"not enough space for value mapping\n");
            return SNMP_ERR_GENERR;
        }
        *mib_routeErrId_val_ptr_ptr = (char*)realloc( *mib_routeErrId_val_ptr_ptr, converted_len * sizeof(**mib_routeErrId_val_ptr_ptr));
        if(NULL == *mib_routeErrId_val_ptr_ptr) {
            snmp_log(LOG_ERR,"could not allocate memory\n");
            return SNMP_ERR_GENERR;
        }
    }
    *mib_routeErrId_val_ptr_len_ptr = converted_len;
    memcpy( *mib_routeErrId_val_ptr_ptr, raw_routeErrId_val_ptr, converted_len );

    return MFD_SUCCESS;
} /* routeErrId_map */

/**
 * Extract the current value of the routeErrId data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param routeErrId_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param routeErrId_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by routeErrId.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*routeErrId_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update routeErrId_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
routeErrId_get( routeErrTable_rowreq_ctx *rowreq_ctx, char **routeErrId_val_ptr_ptr, size_t *routeErrId_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != routeErrId_val_ptr_ptr) && (NULL != *routeErrId_val_ptr_ptr));
   netsnmp_assert( NULL != routeErrId_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:routeErrTable:routeErrId_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the routeErrId data.
 * set (* routeErrId_val_ptr_ptr ) and (* routeErrId_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for routeErrId data
     */
    if ((NULL == (* routeErrId_val_ptr_ptr )) ||
        ((* routeErrId_val_ptr_len_ptr ) < (rowreq_ctx->data.routeErrId_len * sizeof((* routeErrId_val_ptr_ptr )[0])))) {
        /*
         * allocate space for routeErrId data
         */
        (* routeErrId_val_ptr_ptr ) = (char*)malloc(rowreq_ctx->data.routeErrId_len * sizeof((* routeErrId_val_ptr_ptr )[0]));
        if(NULL == (* routeErrId_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory\n");
            return MFD_ERROR;
        }
    }
    (* routeErrId_val_ptr_len_ptr ) = rowreq_ctx->data.routeErrId_len * sizeof((* routeErrId_val_ptr_ptr )[0]);
    memcpy( (* routeErrId_val_ptr_ptr ), rowreq_ctx->data.routeErrId, (* routeErrId_val_ptr_len_ptr ) );

    return MFD_SUCCESS;
} /* routeErrId_get */

/*---------------------------------------------------------------------
 * SIBINCO-SMSC-MIB::routeErrEntry.routeErrCount
 * routeErrCount is subid 4 of routeErrEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.13.1.4
 * Description:
SME Counter Accepted
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is COUNTER64 (based on perltype COUNTER64)
 * The net-snmp type is ASN_COUNTER64. The C type decl is U64 (U64)
 */
/**
 * map a value from its original native format to the MIB format.
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_ERROR           : Any other error
 *
 * @note parameters follow the memset convention (dest, src).
 *
 * @note generation and use of this function can be turned off by re-running
 * mib2c after adding the following line to the file
 * default-node-routeErrCount.m2d :
 *   @eval $m2c_node_skip_mapping = 1@
 *
 * @remark
 *  If the values for your data type don't exactly match the
 *  possible values defined by the mib, you should map them here.
 *  Otherwise, just do a direct copy.
 */
int
routeErrCount_map(U64 *mib_routeErrCount_val_ptr, U64 raw_routeErrCount_val)
{
    netsnmp_assert(NULL != mib_routeErrCount_val_ptr);

    DEBUGMSGTL(("verbose:routeErrTable:routeErrCount_map","called\n"));

    /*
     * TODO:241:o: |-> Implement routeErrCount mapping.
     * If the values for your data type don't exactly match the
     * possible values defined by the mib, you should map them here.
     */
    (*mib_routeErrCount_val_ptr) = raw_routeErrCount_val;

    return MFD_SUCCESS;
} /* routeErrCount_map */

/**
 * Extract the current value of the routeErrCount data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param routeErrCount_val_ptr
 *        Pointer to storage for a U64 variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
routeErrCount_get( routeErrTable_rowreq_ctx *rowreq_ctx, U64 * routeErrCount_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != routeErrCount_val_ptr );

/*
 * TODO:231:o: |-> copy routeErrCount data.
 * get (* routeErrCount_val_ptr ).low and (* routeErrCount_val_ptr ).high from rowreq_ctx->data
 */
    (* routeErrCount_val_ptr ).high = rowreq_ctx->data.routeErrCount.high;
    (* routeErrCount_val_ptr ).low = rowreq_ctx->data.routeErrCount.low;


    return MFD_SUCCESS;
} /* routeErrCount_get */

}}}

/** @} */
