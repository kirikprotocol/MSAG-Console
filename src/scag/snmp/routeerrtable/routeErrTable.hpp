/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.32.2.3 $ of : mfd-top.m2c,v $
 *
 * $Id$
 */
#ifndef ROUTEERRTABLE_H
#define ROUTEERRTABLE_H


/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* OID and column number definitions for  */
#include "routeErrTable_oids.hpp"
#include "logger/Logger.h"


namespace scag2 {
namespace snmp {
namespace routeerrtable {

extern smsc::logger::Logger* log;
extern const char* containerName;

/* *********************************************************************
 * function declarations
 */
void init_routeErrTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table routeErrTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * routeErrTable is subid 13 of msag.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.26757.2.13, length: 9
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review routeErrTable registration context.
     */
typedef netsnmp_data_list * routeErrTable_registration_ptr;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review routeErrTable data context structure.
 * This structure is used to represent the data for routeErrTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * routeErrTable.
 */
typedef struct routeErrTable_data_s {

        /*
         * routeErrId(3)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   routeErrId[32];
size_t      routeErrId_len; /* # of char elements, not bytes */

        /*
         * routeErrCount(4)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   routeErrCount;

} routeErrTable_data;


/*
 * TODO:120:r: |-> Review routeErrTable mib index.
 * This structure is used to represent the index for routeErrTable.
 */
typedef struct routeErrTable_mib_index_s {

        /*
         * routeErrIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   routeErrIndex;

        /*
         * routeErrCode(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   routeErrCode;


} routeErrTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review routeErrTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_routeErrTable_IDX_LEN     2


/* *********************************************************************
 * TODO:130:o: |-> Review routeErrTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * routeErrTable_rowreq_ctx pointer.
 */
typedef struct routeErrTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_routeErrTable_IDX_LEN];

    routeErrTable_mib_index        tbl_idx;

    routeErrTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * implementor's context pointer (provided during registration)
     */
    routeErrTable_registration_ptr routeErrTable_reg;

    /*
     * TODO:131:o: |   |-> Add useful data to routeErrTable rowreq context.
     */

    /*
     * storage for future expansion
     */
    netsnmp_data_list             *routeErrTable_data_list;

} routeErrTable_rowreq_ctx;

typedef struct routeErrTable_ref_rowreq_ctx_s {
    routeErrTable_rowreq_ctx *rowreq_ctx;
} routeErrTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int routeErrTable_pre_request(routeErrTable_registration_ptr user_context);
    int routeErrTable_post_request(routeErrTable_registration_ptr user_context);

    int routeErrTable_rowreq_ctx_init(routeErrTable_rowreq_ctx *rowreq_ctx);
    void routeErrTable_rowreq_ctx_cleanup(routeErrTable_rowreq_ctx *rowreq_ctx);


extern oid routeErrTable_oid[];
extern int routeErrTable_oid_size;

}//routeErrtable
}//snmp
}//smsc

#include "routeErrTable_interface.hpp"
#include "routeErrTable_data_access.hpp"
#include "routeErrTable_data_get.hpp"


#endif /* routeErrTABLE_H */

