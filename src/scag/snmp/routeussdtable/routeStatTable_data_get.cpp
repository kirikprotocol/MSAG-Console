/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 12088 $ of $ 
 *
 * $Id$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "routeStatTable.hpp"

namespace scag2 {
namespace snmp {
namespace routeussdtable {


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement routeStatTable get routines.
 * TODO:240:M: Implement routeStatTable mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table routeStatTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * EYELINE-MSAG-MIB::routeStatTable is subid 10 of msag.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.26757.2.12, length: 9
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement routeStatTable data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param routeStatIndex_val
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
routeStatTable_indexes_set_tbl_idx(routeStatTable_mib_index *tbl_idx, long routeStatIndex_val)
{
    DEBUGMSGTL(("verbose:routeStatTable:routeStatTable_indexes_set_tbl_idx","called\n"));

    /* routeStatIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h */
    tbl_idx->routeStatIndex = routeStatIndex_val;
    

    return MFD_SUCCESS;
} /* routeStatTable_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
routeStatTable_indexes_set(routeStatTable_rowreq_ctx *rowreq_ctx, long routeStatIndex_val)
{
    DEBUGMSGTL(("verbose:routeStatTable:routeStatTable_indexes_set","called\n"));

    if(MFD_SUCCESS != routeStatTable_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , routeStatIndex_val
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != routeStatTable_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* routeStatTable_indexes_set */


/*---------------------------------------------------------------------
 * EYELINE-MSAG-MIB::routeStatEntry.routeStatRouteId
 * routeStatRouteId is subid 2 of routeStatEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.12.1.2
 * Description:
SME system Id.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   1
 *   settable   0
 *   hint: 255a
 *
 * Ranges:  0 - 32;
 *
 * Its syntax is DisplayString (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.  (Max 32)
 */
/**
 * Extract the current value of the routeStatRouteId data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param routeStatRouteId_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param routeStatRouteId_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by routeStatRouteId.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*routeStatRouteId_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update routeStatRouteId_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
routeStatRouteId_get( routeStatTable_rowreq_ctx *rowreq_ctx, char **routeStatRouteId_val_ptr_ptr, size_t *routeStatRouteId_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != routeStatRouteId_val_ptr_ptr) && (NULL != *routeStatRouteId_val_ptr_ptr));
   netsnmp_assert( NULL != routeStatRouteId_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:routeStatTable:routeStatRouteId_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the routeStatRouteId data.
 * copy (* routeStatRouteId_val_ptr_ptr ) data and (* routeStatRouteId_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for routeStatRouteId data
     */
    if ((NULL == (* routeStatRouteId_val_ptr_ptr )) ||
        ((* routeStatRouteId_val_ptr_len_ptr ) < (rowreq_ctx->data.routeStatRouteId_len* sizeof(rowreq_ctx->data.routeStatRouteId[0]))))
    {
        /*
         * allocate space for routeStatRouteId data
         */
        (* routeStatRouteId_val_ptr_ptr ) = (char*)malloc(rowreq_ctx->data.routeStatRouteId_len * sizeof(rowreq_ctx->data.routeStatRouteId[0]));
        if(NULL == (* routeStatRouteId_val_ptr_ptr ))
        {
            snmp_log(LOG_ERR,"could not allocate memory\n");
            return MFD_ERROR;
        }
    }
    (* routeStatRouteId_val_ptr_len_ptr ) = rowreq_ctx->data.routeStatRouteId_len* sizeof(rowreq_ctx->data.routeStatRouteId[0]);
    memcpy( (* routeStatRouteId_val_ptr_ptr ), rowreq_ctx->data.routeStatRouteId, rowreq_ctx->data.routeStatRouteId_len* sizeof(rowreq_ctx->data.routeStatRouteId[0]) );

    return MFD_SUCCESS;
} /* routeStatRouteId_get */

/*---------------------------------------------------------------------
 * EYELINE-MSAG-MIB::routeStatEntry.routeStatAccepted
 * routeStatAccepted is subid 3 of routeStatEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.12.1.3
 * Description:
SME Counter Accepted
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is COUNTER64 (based on perltype COUNTER64)
 * The net-snmp type is ASN_COUNTER64. The C type decl is U64 (U64)
 */
/**
 * Extract the current value of the routeStatAccepted data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param routeStatAccepted_val_ptr
 *        Pointer to storage for a U64 variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
routeStatAccepted_get( routeStatTable_rowreq_ctx *rowreq_ctx, U64 * routeStatAccepted_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != routeStatAccepted_val_ptr );

/*
 * TODO:231:o: |-> copy routeStatAccepted data.
 * get (* routeStatAccepted_val_ptr ).low and (* routeStatAccepted_val_ptr ).high from rowreq_ctx->data
 */
    (* routeStatAccepted_val_ptr ).high = rowreq_ctx->data.routeStatAccepted.high;
    (* routeStatAccepted_val_ptr ).low = rowreq_ctx->data.routeStatAccepted.low;


    return MFD_SUCCESS;
} /* routeStatAccepted_get */

/*---------------------------------------------------------------------
 * EYELINE-MSAG-MIB::routeStatEntry.routeStatRejected
 * routeStatRejected is subid 4 of routeStatEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.12.1.4
 * Description:
SME Counter Rejected
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is COUNTER64 (based on perltype COUNTER64)
 * The net-snmp type is ASN_COUNTER64. The C type decl is U64 (U64)
 */
/**
 * Extract the current value of the routeStatRejected data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param routeStatRejected_val_ptr
 *        Pointer to storage for a U64 variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
routeStatRejected_get( routeStatTable_rowreq_ctx *rowreq_ctx, U64 * routeStatRejected_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != routeStatRejected_val_ptr );

/*
 * TODO:231:o: |-> copy routeStatRejected data.
 * get (* routeStatRejected_val_ptr ).low and (* routeStatRejected_val_ptr ).high from rowreq_ctx->data
 */
    (* routeStatRejected_val_ptr ).high = rowreq_ctx->data.routeStatRejected.high;
    (* routeStatRejected_val_ptr ).low = rowreq_ctx->data.routeStatRejected.low;


    return MFD_SUCCESS;
} /* routeStatRejected_get */

/*---------------------------------------------------------------------
 * EYELINE-MSAG-MIB::routeStatEntry.routeStatDelivered
 * routeStatDelivered is subid 5 of routeStatEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.12.1.5
 * Description:
SME Counter Delivered
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is COUNTER64 (based on perltype COUNTER64)
 * The net-snmp type is ASN_COUNTER64. The C type decl is U64 (U64)
 */
/**
 * Extract the current value of the routeStatDelivered data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param routeStatDelivered_val_ptr
 *        Pointer to storage for a U64 variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
routeStatDelivered_get( routeStatTable_rowreq_ctx *rowreq_ctx, U64 * routeStatDelivered_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != routeStatDelivered_val_ptr );

/*
 * TODO:231:o: |-> copy routeStatDelivered data.
 * get (* routeStatDelivered_val_ptr ).low and (* routeStatDelivered_val_ptr ).high from rowreq_ctx->data
 */
    (* routeStatDelivered_val_ptr ).high = rowreq_ctx->data.routeStatDelivered.high;
    (* routeStatDelivered_val_ptr ).low = rowreq_ctx->data.routeStatDelivered.low;


    return MFD_SUCCESS;
} /* routeStatDelivered_get */

/*---------------------------------------------------------------------
 * EYELINE-MSAG-MIB::routeStatEntry.routeStatGwRejected
 * routeStatGwRejected is subid 6 of routeStatEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.12.1.6
 * Description:
SME Counter GW Rejected
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is COUNTER64 (based on perltype COUNTER64)
 * The net-snmp type is ASN_COUNTER64. The C type decl is U64 (U64)
 */
/**
 * Extract the current value of the routeStatGwRejected data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param routeStatGwRejected_val_ptr
 *        Pointer to storage for a U64 variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
routeStatGwRejected_get( routeStatTable_rowreq_ctx *rowreq_ctx, U64 * routeStatGwRejected_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != routeStatGwRejected_val_ptr );

/*
 * TODO:231:o: |-> copy routeStatGwRejected data.
 * get (* routeStatGwRejected_val_ptr ).low and (* routeStatGwRejected_val_ptr ).high from rowreq_ctx->data
 */
    (* routeStatGwRejected_val_ptr ).high = rowreq_ctx->data.routeStatGwRejected.high;
    (* routeStatGwRejected_val_ptr ).low = rowreq_ctx->data.routeStatGwRejected.low;


    return MFD_SUCCESS;
} /* routeStatGwRejected_get */

/*---------------------------------------------------------------------
 * EYELINE-MSAG-MIB::routeStatEntry.routeStatFailed
 * routeStatFailed is subid 7 of routeStatEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.12.1.7
 * Description:
SME Counter Failed
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is COUNTER64 (based on perltype COUNTER64)
 * The net-snmp type is ASN_COUNTER64. The C type decl is U64 (U64)
 */
/**
 * Extract the current value of the routeStatFailed data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param routeStatFailed_val_ptr
 *        Pointer to storage for a U64 variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
routeStatFailed_get( routeStatTable_rowreq_ctx *rowreq_ctx, U64 * routeStatFailed_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != routeStatFailed_val_ptr );

/*
 * TODO:231:o: |-> copy routeStatFailed data.
 * get (* routeStatFailed_val_ptr ).low and (* routeStatFailed_val_ptr ).high from rowreq_ctx->data
 */
    (* routeStatFailed_val_ptr ).high = rowreq_ctx->data.routeStatFailed.high;
    (* routeStatFailed_val_ptr ).low = rowreq_ctx->data.routeStatFailed.low;


    return MFD_SUCCESS;
} /* routeStatFailed_get */

/*---------------------------------------------------------------------
 * EYELINE-MSAG-MIB::routeStatEntry.routeStatReceiptOk
 * routeStatReceiptOk is subid 8 of routeStatEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.12.1.8
 * Description:
SME Counter Temporal Errors
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is COUNTER64 (based on perltype COUNTER64)
 * The net-snmp type is ASN_COUNTER64. The C type decl is U64 (U64)
 */
/**
 * Extract the current value of the routeStatReceiptOk data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param routeStatReceiptOk_val_ptr
 *        Pointer to storage for a U64 variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
routeStatReceiptOk_get( routeStatTable_rowreq_ctx *rowreq_ctx, U64 * routeStatReceiptOk_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != routeStatReceiptOk_val_ptr );

/*
 * TODO:231:o: |-> copy routeStatReceiptOk data.
 * get (* routeStatReceiptOk_val_ptr ).low and (* routeStatReceiptOk_val_ptr ).high from rowreq_ctx->data
 */
    (* routeStatReceiptOk_val_ptr ).high = rowreq_ctx->data.routeStatReceiptOk.high;
    (* routeStatReceiptOk_val_ptr ).low = rowreq_ctx->data.routeStatReceiptOk.low;


    return MFD_SUCCESS;
} /* routeStatReceiptOk_get */

/*---------------------------------------------------------------------
 * EYELINE-MSAG-MIB::routeStatEntry.routeStatReceiptFailed
 * routeStatReceiptFailed is subid 9 of routeStatEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.12.1.9
 * Description:
SME Counter Temporal Errors
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is COUNTER64 (based on perltype COUNTER64)
 * The net-snmp type is ASN_COUNTER64. The C type decl is U64 (U64)
 */
/**
 * Extract the current value of the routeStatReceiptFailed data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param routeStatReceiptFailed_val_ptr
 *        Pointer to storage for a U64 variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
routeStatReceiptFailed_get( routeStatTable_rowreq_ctx *rowreq_ctx, U64 * routeStatReceiptFailed_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != routeStatReceiptFailed_val_ptr );

/*
 * TODO:231:o: |-> copy routeStatReceiptFailed data.
 * get (* routeStatReceiptFailed_val_ptr ).low and (* routeStatReceiptFailed_val_ptr ).high from rowreq_ctx->data
 */
    (* routeStatReceiptFailed_val_ptr ).high = rowreq_ctx->data.routeStatReceiptFailed.high;
    (* routeStatReceiptFailed_val_ptr ).low = rowreq_ctx->data.routeStatReceiptFailed.low;


    return MFD_SUCCESS;
} /* routeStatReceiptFailed_get */

/*---------------------------------------------------------------------
 * SIBINCO-SMSC-MIB::routeStatEntry.routeStatIndex
 * routeStatIndex is subid 1 of routeStatEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.26757.2.12.1.1
 * Description:
SME Index.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   0
 *
 * Ranges:  0 - 2000;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * map a value from its original native format to the MIB format.
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_ERROR           : Any other error
 *
 * @note parameters follow the memset convention (dest, src).
 *
 * @note generation and use of this function can be turned off by re-running
 * mib2c after adding the following line to the file
 * default-node-routeStatIndex.m2d :
 *   @eval $m2c_node_skip_mapping = 1@
 *
 * @remark
 *  If the values for your data type don't exactly match the
 *  possible values defined by the mib, you should map them here.
 *  Otherwise, just do a direct copy.
 */
int routeStatIndex_map(long *mib_routeStatIndex_val_ptr, long raw_routeStatIndex_val)
{
  netsnmp_assert(NULL != mib_routeStatIndex_val_ptr);
  DEBUGMSGTL(("verbose:routeStatTable:routeStatIndex_map","called\n"));

  /*
   * TODO:241:o: |-> Implement routeStatIndex mapping.
   * If the values for your data type don't exactly match the
   * possible values defined by the mib, you should map them here.
   */
  (*mib_routeStatIndex_val_ptr) = raw_routeStatIndex_val;

  return MFD_SUCCESS;
}
int routeStatRouteId_map(char **mib_routeStatRouteId_val_ptr_ptr, size_t *mib_routeStatRouteId_val_ptr_len_ptr,
    char *raw_routeStatRouteId_val_ptr, size_t raw_routeStatRouteId_val_ptr_len, int allow_realloc)
{
  size_t converted_len;

  netsnmp_assert(NULL != raw_routeStatRouteId_val_ptr);
  netsnmp_assert((NULL != mib_routeStatRouteId_val_ptr_ptr) && (NULL != mib_routeStatRouteId_val_ptr_len_ptr));

  DEBUGMSGTL(("verbose:routeStatTable:routeStatRouteId_map","called\n"));

  /*
   * TODO:241:r: |-> Implement routeStatRouteId non-integer mapping
   * it is hard to autogenerate code for mapping types that are not simple
   * integers, so here is an idea of what you might need to do. It will
   * probably need some tweaking to get right.
   */
  /*
   * if the length of the raw data doesn't directly correspond with
   * the length of the mib data, set converted_len to the
   * space required.
   */
  converted_len = raw_routeStatRouteId_val_ptr_len; /* assume equal */
  if((NULL == *mib_routeStatRouteId_val_ptr_ptr) || (*mib_routeStatRouteId_val_ptr_len_ptr < converted_len)) {
      if(! allow_realloc) {
          snmp_log(LOG_ERR,"not enough space for value mapping\n");
          return SNMP_ERR_GENERR;
      }
      *mib_routeStatRouteId_val_ptr_ptr = (char*)realloc( *mib_routeStatRouteId_val_ptr_ptr, converted_len * sizeof(**mib_routeStatRouteId_val_ptr_ptr));
      if(NULL == *mib_routeStatRouteId_val_ptr_ptr) {
          snmp_log(LOG_ERR,"could not allocate memory\n");
          return SNMP_ERR_GENERR;
      }
  }
  *mib_routeStatRouteId_val_ptr_len_ptr = converted_len;
  memcpy( *mib_routeStatRouteId_val_ptr_ptr, raw_routeStatRouteId_val_ptr, converted_len );

  return MFD_SUCCESS;
} /* routeStatRouteId_map */

int routeStatAccepted_map(U64 *mib_routeStatAccepted_val_ptr, U64 raw_routeStatAccepted_val)
{
  netsnmp_assert(NULL != mib_routeStatAccepted_val_ptr);
  DEBUGMSGTL(("verbose:routeStatTable:routeStatAccepted_map","called\n"));
  (*mib_routeStatAccepted_val_ptr) = raw_routeStatAccepted_val;
  return MFD_SUCCESS;
}

int routeStatRejected_map(U64 *mib_routeStatRejected_val_ptr, U64 raw_routeStatRejected_val)
{
  netsnmp_assert(NULL != mib_routeStatRejected_val_ptr);
  DEBUGMSGTL(("verbose:routeStatTable:routeStatRejected_map","called\n"));
  (*mib_routeStatRejected_val_ptr) = raw_routeStatRejected_val;
  return MFD_SUCCESS;
}

int routeStatDelivered_map(U64 *mib_routeStatDelivered_val_ptr, U64 raw_routeStatDelivered_val)
{
  netsnmp_assert(NULL != mib_routeStatDelivered_val_ptr);
  DEBUGMSGTL(("verbose:routeStatTable:routeStatDelivered_map","called\n"));
  (*mib_routeStatDelivered_val_ptr) = raw_routeStatDelivered_val;
  return MFD_SUCCESS;
}

int routeStatGwRejected_map(U64 *mib_routeStatGwRejected_val_ptr, U64 raw_routeStatGwRejected_val)
{
  netsnmp_assert(NULL != mib_routeStatGwRejected_val_ptr);
  DEBUGMSGTL(("verbose:routeStatTable:routeStatGwRejected_map","called\n"));
  (*mib_routeStatGwRejected_val_ptr) = raw_routeStatGwRejected_val;
  return MFD_SUCCESS;
}

int routeStatFailed_map(U64 *mib_routeStatFailed_val_ptr, U64 raw_routeStatFailed_val)
{
    netsnmp_assert(NULL != mib_routeStatFailed_val_ptr);
    DEBUGMSGTL(("verbose:routeStatTable:routeStatFailed_map","called\n"));
    (*mib_routeStatFailed_val_ptr) = raw_routeStatFailed_val;
    return MFD_SUCCESS;
}


}}}

/** @} */
