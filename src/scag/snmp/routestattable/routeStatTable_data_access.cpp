/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $ 
 *
 * $Id$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "routeStatTable.hpp"
#include "routeStatTable_data_access.hpp"
#include "routeStatTable_subagent.hpp"
#include "util/int.h"

#include "scag/stat/impl/StatisticsManager.h"
#include "scag/stat/impl/StatCountersEnum.hpp"
#include "logger/Logger.h"
#include "core/buffers/Hash.hpp"

#include "scag/stat/impl/Performance.h"

#include "scag/snmp/SnmpUtil.h"


/** @ingroup interface
 * @addtogroup data_access data_access: Routines to access data
 *
 * These routines are used to locate the data used to satisfy
 * requests.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table routeStatTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * EYELINE-MSAG-MIB::routeStatTable is subid 12 of msag.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.26757.2.12, length: 9
*/

namespace scag2 {
namespace snmp {
namespace routestattable {

struct dataAccessCtx;
typedef int (*fillCounterFunction) (dataAccessCtx& ctx);
typedef int (*loadHashToContainerFunction) (dataAccessCtx& ctx);

struct dataAccessCtx
{
  std::string moduleName;
  netsnmp_container* container;
  smsc::core::buffers::Hash<stat::CommonPerformanceCounter*>& hSms;
  smsc::core::buffers::Hash<stat::CommonPerformanceCounter*>& hUssd;
  int recCount;
  stat::CommonPerformanceCounter* counterSms;
  stat::CommonPerformanceCounter* counterUssd;
  stat::CommonPerformanceCounter counter;
  char* key;
  long index;
  fillCounterFunction fillCounter;
  loadHashToContainerFunction loadHashToContainer;

  dataAccessCtx() : container(0), recCount(0), key(0), index(0), counterSms(0), counterUssd(0)
  {
    counter.reserve(stat::Counters::cntSmppSize);
    counter.cntErrors.Insert(0,0);
  }
};


bool fillRecord(routeStatTable_rowreq_ctx* rec, dataAccessCtx& ctx,
    stat::CommonPerformanceCounter* counter, stat::CommonPerformanceCounter* counter1)
{
  if (!ctx.key)
    return false;
  if (!counter)
    return false;

  char routeStatId[34];
  size_t routeStatId_len = (strlen(ctx.key)<32) ? strlen(ctx.key) : 32;
  strncpy(&routeStatId[0], ctx.key, routeStatId_len);

  rec->data.routeStatRouteId_len = routeStatId_len * sizeof(routeStatId[0]);
  memcpy( rec->data.routeStatRouteId, routeStatId, routeStatId_len * sizeof(routeStatId[0]) );

  uint64_t* cntSms = &counter->cntEvent[0];
  uint64_t* cntUssd = counter1 ? &counter1->cntEvent[0] : &ctx.counter.cntEvent[0];
  uint64_to_U64((*cntSms++ + *cntUssd++), rec->data.routeStatAccepted);
  uint64_to_U64((*cntSms++ + *cntUssd++), rec->data.routeStatRejected);
  uint64_to_U64((*cntSms++ + *cntUssd++), rec->data.routeStatDelivered);
  uint64_to_U64((*cntSms++ + *cntUssd++), rec->data.routeStatGwRejected);
  uint64_to_U64((*cntSms++ + *cntUssd++), rec->data.routeStatFailed);
  uint64_to_U64((*cntSms++ + *cntUssd++), rec->data.routeStatReceiptOk);
  uint64_to_U64((*cntSms   + *cntUssd),   rec->data.routeStatReceiptFailed);

  return true;
}


int fillNextCounter(dataAccessCtx& ctx)
//netsnmp_container* container, const char* routeId, long routeStatIndex,
//    stat::CommonPerformanceCounter* counter, stat::CommonPerformanceCounter* counter1)
{
  const char* sid = ctx.key ? ctx.key : noStatData;

  routeStatTable_rowreq_ctx *rec = routeStatTable_allocate_rowreq_ctx();
  if (NULL == rec)
  {
    smsc_log_error(log, "%s_cache_load: memory allocation failed", ctx.moduleName);
    return -1;
  }

  if( MFD_SUCCESS != routeStatTable_indexes_set(rec, ctx.index) )
  {
    smsc_log_error(log, "%s_cache_load: error setting index while loading data", ctx.moduleName);
    routeStatTable_release_rowreq_ctx(rec);
    return -2;
  }

//  logIndexDebug(log, (const char*)ctx.moduleName, ctx.index, rec->tbl_idx.routeStatIndex, rec->oid_idx, rec->oid_tmp, MAX_routeStatTable_IDX_LEN);

  if ( !fillRecord(rec, ctx, ctx.counterSms, ctx.counterUssd) )
  {
    smsc_log_error(log, "%s_cache_load fillRecord error", ctx.moduleName);
    return -3;
  }

  int rc = CONTAINER_INSERT(ctx.container, rec);

  if ( 0 != rc )
    smsc_log_error(log, "%s_cache_load CONTAINER_INSERT returns(%d)", ctx.moduleName, rc);
  return rc;
}

int loadHashToContainer(dataAccessCtx& ctx)
{
  ctx.index = 0;

  ctx.hSms.First();
  while ( ctx.hSms.Next(ctx.key, ctx.counterSms) )
  {
    ctx.index++;
    try {
      ctx.counterUssd = ctx.hUssd.Get(ctx.key);
    }
    catch (...) {
      ctx.counterUssd = 0;
    }
    int result = ctx.fillCounter(ctx);
    if ( 0 == result )
    {
      ++ctx.recCount;
    }
    else if ( -1 == result )
    {
      return MFD_RESOURCE_UNAVAILABLE;
    }
    if (ctx.key) ctx.key = 0;
    if (ctx.counterSms) ctx.counterSms = 0;
  }
  return MFD_SUCCESS;
}


int routeStatTable_cache_load(netsnmp_container* container)
{
  if ( !container )
  {
    smsc_log_error(log, "routeStatTable_cache_load error: container is NULL");
    return MFD_RESOURCE_UNAVAILABLE;
  }

  int retCode = 0;
  dataAccessCtx ctx;
  ctx.moduleName = "routeStatTable";
  ctx.container = container;
  ctx.container->container_name = (char*)containerName;
  ctx.fillCounter = fillNextCounter;
  ctx.loadHashToContainer = loadHashToContainer;

  ctx.hSms = scag2::snmp::getStatMan()->getRouteCounters(0);
  ctx.hUssd = scag2::snmp::getStatMan()->getRouteCounters(1);

//  smsc_log_debug(log, "%s_cache_load: getCounters(0) ok, %d %d entries", ctx.moduleName, ctx.hSms.GetCount(), ctx.hUssd.GetCount());

  int retCode = ctx.loadHashToContainer(ctx);
  if ( 0 == ctx.recCount && fillEmptyData() )  // fill zero data if counters hash is empty
  {
    smsc_log_debug(log, "routeStatTable_cache_load: no records, make fake counters");
    ctx.counterSms = &ctx.counter;
    ctx.counterUssd = 0;
    ctx.fillCounter(ctx);
    ctx.recCount++;
    retCode = MFD_SUCCESS;
  }
//  smsc_log_debug(log, "%s_cache_load: inserted %d records, retCode=%d", ctx.moduleName, ctx.recCount, retCode);
  return retCode;
/*
  smsc::core::buffers::Hash<stat::CommonPerformanceCounter*>& h0 = scag2::snmp::getStatMan()->getRouteCounters(0);
  smsc::core::buffers::Hash<stat::CommonPerformanceCounter*>& h1 = scag2::snmp::getStatMan()->getRouteCounters(1);

  retCode = loadHashToContainer(container, h0, h1, recCount);
  if ( 0 == recCount && fillEmptyData() )  // fill zero data if counters hash is empty
  {
    smsc_log_debug(log, "routeStatTable_cache_load: no records, make fake counters");
    stat::CommonPerformanceCounter counter;
    stat::CommonPerformanceCounter counter1;
    counter.reserve(stat::Counters::cntSmppSize);
    counter1.reserve(stat::Counters::cntSmppSize);
    for ( int i=0; i<stat::Counters::cntSmppSize; ++i ) counter->cntEvent[i] = 0;
    counter->cntErrors.Insert(0,0);
    fillNextCounter(container, 0, 1, counter, counter1);
    ++recCount;
  }
  return retCode;
*/
}
//

//
/**
 * cache clean up
 *
 * @param container container with all current items
 *
 *  This optional callback is called prior to all
 *  item's being removed from the container. If you
 *  need to do any processing before that, do it here.
 *
 * @note
 *  The MFD helper will take care of releasing all the row contexts.
 *
 */
void routeStatTable_cache_free(netsnmp_container *container)
{
//  smsc_log_debug(log, "routeStatTable_cache_free called");

    /*
     * TODO:380:M: Free routeStatTable cache.
     */
} /* routeStatTable_cache_free */


/**
 * prepare row for processing.
 *
 *  When the agent has located the row for a request, this function is
 *  called to prepare the row for processing. If you fully populated
 *  the data context during the index setup phase, you may not need to
 *  do anything.
 *
 * @param rowreq_ctx pointer to a context.
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 */
int routeStatTable_row_prep( routeStatTable_rowreq_ctx *rowreq_ctx)
{
//    DEBUGMSGTL(("verbose:routeStatTable:routeStatTable_row_prep","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:390:o: Prepare row for request.
     * If populating row data was delayed, this is the place to
     * fill in the row for this request.
     */

    return MFD_SUCCESS;
} /* routeStatTable_row_prep */

/**
 * initialization for routeStatTable data access
 *
 * This function is called during startup to allow you to
 * allocate any resources you need for the data table.
 *
 * @param routeStatTable_reg
 *        Pointer to routeStatTable_registration
 *
 * @retval MFD_SUCCESS : success.
 * @retval MFD_ERROR   : unrecoverable error.
 */
int routeStatTable_init_data(routeStatTable_registration_ptr routeStatTable_reg)
{
    DEBUGMSGTL(("verbose:routeStatTable:routeStatTable_init_data","called\n"));

    /*
     * TODO:303:o: Initialize routeStatTable data.
     */
    /*
    ***************************************************
    ***             START EXAMPLE CODE              ***
    ***---------------------------------------------***/
    /*
     * if you are the sole writer for the file, you could
     * open it here. However, as stated earlier, we are assuming
     * the worst case, which in this case means that the file is
     * written to by someone else, and might not even exist when
     * we start up. So we can't do anything here.
     */
    /*
    ***---------------------------------------------***
    ***              END  EXAMPLE CODE              ***
    ***************************************************/

    return MFD_SUCCESS;
} /* routeStatTable_init_data */

/**
 * container overview
 *
 */

/**
 * container initialization
 *
 * @param container_ptr_ptr A pointer to a container pointer. If you
 *        create a custom container, use this parameter to return it
 *        to the MFD helper. If set to NULL, the MFD helper will
 *        allocate a container for you.
 * @param  cache A pointer to a cache structure. You can set the timeout
 *         and other cache flags using this pointer.
 *
 *  This function is called at startup to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases. If no custom
 *  container is allocated, the MFD code will create one for your.
 *
 *  This is also the place to set up cache behavior. The default, to
 *  simply set the cache timeout, will work well with the default
 *  container. If you are using a custom container, you may want to
 *  look at the cache helper documentation to see if there are any
 *  flags you want to set.
 *
 * @remark
 *  This would also be a good place to do any initialization needed
 *  for you data source. For example, opening a connection to another
 *  process that will supply the data, opening a database, etc.
 */
void routeStatTable_container_init(netsnmp_container **container_ptr_ptr, netsnmp_cache *cache)
{
    DEBUGMSGTL(("verbose:routeStatTable:routeStatTable_container_init","called\n"));

    if((NULL == cache) || (NULL == container_ptr_ptr)) {
//    if (NULL == container_ptr_ptr) {
      snmp_log(LOG_ERR, "bad container param to routeStatTable_container_init\n");
      return;
    }

    /*
     * For advanced users, you can use a custom container. If you
     * do not create one, one will be created for you.
     */
    *container_ptr_ptr = NULL;

    /*
     * TODO:345:A: Set up routeStatTable cache properties.
     *
     * Also for advanced users, you can set parameters for the
     * cache. Do not change the magic pointer, as it is used
     * by the MFD helper. To completely disable caching, set
     * cache->enabled to 0.
     */
//    cache->timeout = ROUTESTATTABLE_CACHE_TIMEOUT; /* seconds */
//    config::ConfigManager& cfg = config::ConfigManager::Instance();
    initConfigParams(cache->timeout, log);
} /* routeStatTable_container_init */

void routeStatTable_container_shutdown(netsnmp_container *container_ptr)
{
  DEBUGMSGTL(("verbose:routeStatTable:routeStatTable_container_shutdown","called\n"));
  if (NULL == container_ptr) {
    snmp_log(LOG_ERR,"bad params to routeStatTable_container_shutdown\n");
    return;
  }
} /* routeStatTable_container_shutdown */


}}}
/** @} */
