/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $ 
 *
 * $Id$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "smeStatTable.hpp"
#include "smeStatTable_data_access.hpp"
#include "util/int.h"

#include "scag/stat/impl/StatisticsManager.h"
#include "scag/stat/impl/StatCountersEnum.hpp"
//#include <logger/Logger.h>
#include "core/buffers/Hash.hpp"

#include "scag/stat/impl/Performance.h"

#include "scag/config/base/ConfigManager2.h"


/** @ingroup interface
 * @addtogroup data_access data_access: Routines to access data
 *
 * These routines are used to locate the data used to satisfy
 * requests.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table smeStatTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * EYELINE-MSAG-MIB::smeStatTable is subid 10 of msag.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.26757.2.10, length: 9
*/

namespace scag2 {
namespace snmp {
namespace smestattable {

//smsc::logger::Logger* log = smsc::logger::Logger::getInstance("snmpmsag");;


bool fillRecord(smeStatTable_rowreq_ctx* rec, char* sysId, stat::CommonPerformanceCounter* counter)
{
  if (!sysId)
    return false;
  if (!counter)
    return false;
  if (counter->count < stat::Counters::cntSmppSize)
    return false;

  char smeStatSystemId[34];
  size_t smeStatSystemId_len = (strlen(sysId)<32) ? strlen(sysId) : 32;
  strncpy(&smeStatSystemId[0], sysId, smeStatSystemId_len);

  if (
       (NULL == rec->data.smeStatSystemId)
       || (rec->data.smeStatSystemId_len < (smeStatSystemId_len * sizeof(smeStatSystemId[0])))
     )
  {
    snmp_log(LOG_ERR,"not enough space for value\n");
    return false;
  }
  rec->data.smeStatSystemId_len = smeStatSystemId_len * sizeof(smeStatSystemId[0]);
  memcpy( rec->data.smeStatSystemId, smeStatSystemId, smeStatSystemId_len * sizeof(smeStatSystemId[0]) );

  rec->data.smeStatAccepted.high = 0;                                                       //smeStatAccepted.high;
  rec->data.smeStatAccepted.low = counter->counters[stat::Counters::cntAccepted];    // smeStatAccepted.low;

  rec->data.smeStatRejected.high = 0;
  rec->data.smeStatRejected.low = counter->counters[stat::Counters::cntRejected];

  rec->data.smeStatDelivered.high = 0;
  rec->data.smeStatDelivered.low = counter->counters[stat::Counters::cntDelivered];

  rec->data.smeStatGwRejected.high = 0;
  rec->data.smeStatGwRejected.low = counter->counters[stat::Counters::cntGw_Rejected];

  rec->data.smeStatFailed.high = 0;
  rec->data.smeStatFailed.low = counter->counters[stat::Counters::cntFailed];

  rec->data.smeStatRecieptOk.high = 0;
  rec->data.smeStatRecieptOk.low = counter->counters[stat::Counters::cntRecieptOk];

  rec->data.smeStatRecieptFailed.high = 0;
  rec->data.smeStatRecieptFailed.low = counter->counters[stat::Counters::cntRecieptFailed];
/*
  for (uint32_t i = 0; i < counter->count; i++)
  {
    buf.WriteNetInt16((counter) ? counter->counters[i]:0);
    TimeSlotCounter<int>* cnt = (counter && counter->slots[i]) ? counter->slots[i] : 0;
    buf.WriteNetInt16((cnt) ? (uint16_t)cnt->Avg():0);
  }
*/
  return true;
}

/**
 * initialization for smeStatTable data access
 *
 * This function is called during startup to allow you to
 * allocate any resources you need for the data table.
 *
 * @param smeStatTable_reg
 *        Pointer to smeStatTable_registration
 *
 * @retval MFD_SUCCESS : success.
 * @retval MFD_ERROR   : unrecoverable error.
 */
int smeStatTable_init_data(smeStatTable_registration_ptr smeStatTable_reg)
{
    DEBUGMSGTL(("verbose:smeStatTable:smeStatTable_init_data","called\n"));

    /*
     * TODO:303:o: Initialize smeStatTable data.
     */
    /*
    ***************************************************
    ***             START EXAMPLE CODE              ***
    ***---------------------------------------------***/
    /*
     * if you are the sole writer for the file, you could
     * open it here. However, as stated earlier, we are assuming
     * the worst case, which in this case means that the file is
     * written to by someone else, and might not even exist when
     * we start up. So we can't do anything here.
     */
    /*
    ***---------------------------------------------***
    ***              END  EXAMPLE CODE              ***
    ***************************************************/

    return MFD_SUCCESS;
} /* smeStatTable_init_data */

/**
 * container overview
 *
 */

/**
 * container initialization
 *
 * @param container_ptr_ptr A pointer to a container pointer. If you
 *        create a custom container, use this parameter to return it
 *        to the MFD helper. If set to NULL, the MFD helper will
 *        allocate a container for you.
 * @param  cache A pointer to a cache structure. You can set the timeout
 *         and other cache flags using this pointer.
 *
 *  This function is called at startup to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases. If no custom
 *  container is allocated, the MFD code will create one for your.
 *
 *  This is also the place to set up cache behavior. The default, to
 *  simply set the cache timeout, will work well with the default
 *  container. If you are using a custom container, you may want to
 *  look at the cache helper documentation to see if there are any
 *  flags you want to set.
 *
 * @remark
 *  This would also be a good place to do any initialization needed
 *  for you data source. For example, opening a connection to another
 *  process that will supply the data, opening a database, etc.
 */
void smeStatTable_container_init(netsnmp_container **container_ptr_ptr,
                             netsnmp_cache *cache)
{
    DEBUGMSGTL(("verbose:smeStatTable:smeStatTable_container_init","called\n"));
    
    if((NULL == cache) || (NULL == container_ptr_ptr)) {
//    if (NULL == container_ptr_ptr) {
      snmp_log(LOG_ERR, "bad container param to smeStatTable_container_init\n");
      return;
    }

    /*
     * For advanced users, you can use a custom container. If you
     * do not create one, one will be created for you.
     */
    *container_ptr_ptr = NULL;

    /*
     * TODO:345:A: Set up smeStatTable cache properties.
     *
     * Also for advanced users, you can set parameters for the
     * cache. Do not change the magic pointer, as it is used
     * by the MFD helper. To completely disable caching, set
     * cache->enabled to 0.
     */
//    cache->timeout = SMESTATTABLE_CACHE_TIMEOUT; /* seconds */
//    config::ConfigManager& cfg = config::ConfigManager::Instance();
    int cacheTimeout = 60;
    try {
      cacheTimeout = config::ConfigManager::Instance().getConfig()->getInt("snmp.cacheTimeout");
    }
    catch (...) {
      __warning2__("Config parameter snmp.cacheTimeout not found, using default=%d", cacheTimeout);
      snmp_log(LOG_ERR, "Config parameter snmp.cacheTimeout not found, using default=%d\n", cacheTimeout);
    }

    cache->timeout = cacheTimeout; /* seconds */
} /* smeStatTable_container_init */

void smeStatTable_container_shutdown(netsnmp_container *container_ptr)
{
  DEBUGMSGTL(("verbose:smeStatTable:smeStatTable_container_shutdown","called\n"));
  if (NULL == container_ptr) {
    snmp_log(LOG_ERR,"bad params to smeStatTable_container_shutdown\n");
    return;
  }
} /* smeStatTable_container_shutdown */

void uint64_to_U64(uint64_t val1,U64& val2)
{
  val2.high = (val1>>32)&0xffffffffUL;
  val2.low = val1&0xffffffffUL;
}


int smeStatTable_cache_load(netsnmp_container *container)
{
  DEBUGMSGTL(("verbose:smeStatTable:smeStatTable_cache_load","called\n"));

  stat::StatisticsManager* sm = 0;
  try
  {
    sm = &stat::StatisticsManager::InstanceSM();
  }
  catch(...)
  {
    snmp_log(LOG_ERR, "MFD_RESOURCE_UNAVAILABLE (Statistics Manager)\n");
    return MFD_RESOURCE_UNAVAILABLE;
  }
  if (!sm) return MFD_RESOURCE_UNAVAILABLE;

  smsc::core::buffers::Hash<stat::CommonPerformanceCounter*>& h = sm->getCounters(1);

  long   smeStatIndex = 0;
  size_t recCount = 0;
  smeStatTable_rowreq_ctx *rec = 0;
  rec = smeStatTable_allocate_rowreq_ctx(NULL);
  if (NULL == rec)
  {
    snmp_log(LOG_ERR, "memory allocation failed\n");
    return MFD_RESOURCE_UNAVAILABLE;
  }

  char* sysId = 0;
  stat::CommonPerformanceCounter* counter = 0;

  h.First();
  while ( h.Next(sysId, counter) )
  {
    smeStatIndex = 0;  //ToDo
    if( MFD_SUCCESS != smeStatTable_indexes_set(rec, smeStatIndex) )
    {
      snmp_log(LOG_ERR, "error setting index while loading smeStatTable data.\n");
      smeStatTable_release_rowreq_ctx(rec);
      continue;
    }
    if ( !fillRecord(rec, sysId, counter) )
    {
      return MFD_ERROR;
    }
    CONTAINER_INSERT(container, rec);
    ++recCount;
    if (counter) counter->clear();
  }

/*
  U64 smeStatAccepted       ={0,0};
  U64 smeStatRejected       ={0,0};
  U64 smeStatDelivered      ={0,0};
  U64 smeStatGwRejected     ={0,0};
  U64 smeStatFailed         ={0,0};
  U64 smeStatRecieptOk      ={0,0};
  U64 smeStatRecieptFailed  ={0,0};

  uint64_t cnt[PERF_CNT_COUNT];
  scag2::stat::CommonStat cs;

  sm->getSmppPerfData(cnt);
//  while ( sm->Next(key, cs) )
//  {
//    smeStatIndex = cs.providerId;
    uint64_to_U64(cnt[stat::Counters::cntAccepted], smeStatAccepted);
    uint64_to_U64(cnt[stat::Counters::cntRejected], smeStatRejected);
    uint64_to_U64(cnt[stat::Counters::cntDelivered], smeStatDelivered);
    uint64_to_U64(cnt[stat::Counters::cntGw_Rejected], smeStatGwRejected);
    uint64_to_U64(cnt[stat::Counters::cntFailed], smeStatFailed);
    uint64_to_U64(cnt[stat::Counters::cntRecieptOk], smeStatRecieptOk);
    uint64_to_U64(cnt[stat::Counters::cntRecieptFailed], smeStatRecieptFailed);
*/

  DEBUGMSGT(("verbose:smeStatTable:smeStatTable_cache_load", "inserted %d records\n", (int)recCount));

  return MFD_SUCCESS;
} /* smeStatTable_container_load */



/**
 * container clean up
 *
 * @param container container with all current items
 *
 *  This optional callback is called prior to all
 *  item's being removed from the container. If you
 *  need to do any processing before that, do it here.
 *
 * @note
 *  The MFD helper will take care of releasing all the row contexts.
 *
 */
void smeStatTable_container_free(netsnmp_container *container)
{
    DEBUGMSGTL(("verbose:smeStatTable:smeStatTable_container_free","called\n"));

    /*
     * TODO:380:M: Free smeStatTable container data.
     */
} /* smeStatTable_container_free */

/**
 * prepare row for processing.
 *
 *  When the agent has located the row for a request, this function is
 *  called to prepare the row for processing. If you fully populated
 *  the data context during the index setup phase, you may not need to
 *  do anything.
 *
 * @param rowreq_ctx pointer to a context.
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 */
int smeStatTable_row_prep( smeStatTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:smeStatTable:smeStatTable_row_prep","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:390:o: Prepare row for request.
     * If populating row data was delayed, this is the place to
     * fill in the row for this request.
     */

    return MFD_SUCCESS;
} /* smeStatTable_row_prep */


}}}
/** @} */
