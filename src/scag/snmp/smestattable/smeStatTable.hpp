/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 17337 $ of $
 *
 * $Id$
 */
#ifndef SMESTATTABLE_H
#define SMESTATTABLE_H

#include <net-snmp/library/asn1.h>

/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
/*
config_add_mib(EYELINE-MSAG-MIB)
config_require(EYELINE-MSAG-MIB/smeStatTable/smeStatTable_interface)
config_require(EYELINE-MSAG-MIB/smeStatTable/smeStatTable_data_access)
config_require(EYELINE-MSAG-MIB/smeStatTable/smeStatTable_data_get)
config_require(EYELINE-MSAG-MIB/smeStatTable/smeStatTable_data_set)
*/
    /* *INDENT-ON*  */

/* OID and column number definitions for smeStatTable */
#include "smeStatTable_oids.hpp"

/* enum definions */
//#include "smeStatTable_enums.hpp"


namespace scag2 {
namespace snmp {
namespace smestattable {


/* *********************************************************************
 * function declarations
 */
void init_smeStatTable(void);
void shutdown_smeStatTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table smeStatTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * EYELINE-MSAG-MIB::smeStatTable is subid 10 of msag.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.26757.2.10, length: 9
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review smeStatTable registration context.
     */
typedef netsnmp_data_list* smeStatTable_registration_ptr;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review smeStatTable data context structure.
 * This structure is used to represent the data for smeStatTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * smeStatTable.
 */
typedef struct smeStatTable_data_s {
    
        /*
         * smeStatSystemId(2)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   smeStatSystemId[32];
size_t      smeStatSystemId_len; /* # of char elements, not bytes */
    
        /*
         * smeStatAccepted(3)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   smeStatAccepted;
    
        /*
         * smeStatRejected(4)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   smeStatRejected;
    
        /*
         * smeStatDelivered(5)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   smeStatDelivered;
    
        /*
         * smeStatGwRejected(6)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   smeStatGwRejected;
    
        /*
         * smeStatFailed(7)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   smeStatFailed;
    
        /*
         * smeStatRecieptOk(8)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   smeStatRecieptOk;
    
        /*
         * smeStatRecieptFailed(9)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   smeStatRecieptFailed;
    
} smeStatTable_data;


/*
 * TODO:120:r: |-> Review smeStatTable mib index.
 * This structure is used to represent the index for smeStatTable.
 */
typedef struct smeStatTable_mib_index_s {

        /*
         * smeStatIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   smeStatIndex;


} smeStatTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review smeStatTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_smeStatTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review smeStatTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * smeStatTable_rowreq_ctx pointer.
 */
typedef struct smeStatTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_smeStatTable_IDX_LEN];
    
    smeStatTable_mib_index        tbl_idx;
    
    smeStatTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to smeStatTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *smeStatTable_data_list;

} smeStatTable_rowreq_ctx;

typedef struct smeStatTable_ref_rowreq_ctx_s {
    smeStatTable_rowreq_ctx *rowreq_ctx;
} smeStatTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int smeStatTable_pre_request(smeStatTable_registration_ptr user_context);
    int smeStatTable_post_request(smeStatTable_registration_ptr user_context, int rc);

//    int smeStatTable_rowreq_ctx_init(smeStatTable_rowreq_ctx *rowreq_ctx, void *user_init_ctx);
//    void smeStatTable_rowreq_ctx_cleanup(smeStatTable_rowreq_ctx *rowreq_ctx);


    smeStatTable_rowreq_ctx* smeStatTable_row_find_by_mib_index(smeStatTable_mib_index *mib_idx);

extern /*const*/ oid smeStatTable_oid[];
extern /*const*/ int smeStatTable_oid_size;

}}}

#include "smeStatTable_interface.hpp"
#include "smeStatTable_data_access.hpp"
#include "smeStatTable_data_get.hpp"

#endif /* SMESSTATTABLE_H */
/** @} */
