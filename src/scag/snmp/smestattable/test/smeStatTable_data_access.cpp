/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.12 $ of : mfd-data-access.m2c,v $
 *
 * $Id$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "smeStatTable.hpp"
#include "util/int.h"
#include "smeStatTable_data_access.hpp"
#include "smsc/smeman50/smeman.h"
#include "smsc/smeman50/SmeRecord.h"
#include "smsc/stat/SmeStats.hpp"
#include "util/config/Manager.h"

/** @defgroup data_access data_access: Routines to access data
 *
 * These routines are used to locate the data used to satisfy
 * requests.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table smeStatTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * smeStatTable is subid 10 of smsc.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.26757.1.10, length: 9
*/

namespace smsc{
namespace snmp{
namespace smestattable{


/**
 * initialization for smeStatTable data access
 *
 * This function is called during startup to allow you to
 * allocate any resources you need for the data table.
 *
 * @param smeStatTable_reg
 *        Pointer to smeStatTable_registration
 *
 * @retval MFD_SUCCESS : success.
 * @retval MFD_ERROR   : unrecoverable error.
 */
int
smeStatTable_init_data(smeStatTable_registration_ptr smeStatTable_reg)
{
    DEBUGMSGTL(("verbose:smeStatTable:smeStatTable_init_data","called\n"));

    /*
     * TODO:303:o: Initialize smeStatTable data.
     */
    /*
    ***************************************************
    ***             START EXAMPLE CODE              ***
    ***---------------------------------------------***/
    /*
     * if you are the sole writer for the file, you could
     * open it here. However, as stated earlier, we are assuming
     * the worst case, which in this case means that the file is
     * written to by someone else, and might not even exist when
     * we start up. So we can't do anything here.
     */
    /*
    ***---------------------------------------------***
    ***              END  EXAMPLE CODE              ***
    ***************************************************/

    return MFD_SUCCESS;
} /* smeStatTable_init_data */

/**
 * container-cached overview
 *
 */

/***********************************************************************
 *
 * cache
 *
 ***********************************************************************/
/**
 * container initialization
 *
 * @param container_ptr_ptr A pointer to a container pointer. If you
 *        create a custom container, use this parameter to return it
 *        to the MFD helper. If set to NULL, the MFD helper will
 *        allocate a container for you.
 * @param  cache A pointer to a cache structure. You can set the timeout
 *         and other cache flags using this pointer.
 *
 *  This function is called at startup to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases. If no custom
 *  container is allocated, the MFD code will create one for your.
 *
 *  This is also the place to set up cache behavior. The default, to
 *  simply set the cache timeout, will work well with the default
 *  container. If you are using a custom container, you may want to
 *  look at the cache helper documentation to see if there are any
 *  flags you want to set.
 *
 * @remark
 *  This would also be a good place to do any initialization needed
 *  for you data source. For example, opening a connection to another
 *  process that will supply the data, opening a database, etc.
 */
void
smeStatTable_container_init(netsnmp_container **container_ptr_ptr,
                        netsnmp_cache *cache)
{
    DEBUGMSGTL(("verbose:smeStatTable:smeStatTable_container_init","called\n"));

    if((NULL == cache) || (NULL == container_ptr_ptr)) {
        snmp_log(LOG_ERR,"bad params to smeStatTable_container_init\n");
        return;
    }

    /*
     * For advanced users, you can use a custom container. If you
     * do not create one, one will be created for you.
     */
    *container_ptr_ptr = NULL;

    /*
     * TODO:345:A: Set up smeStatTable cache properties.
     *
     * Also for advanced users, you can set parameters for the
     * cache. Do not change the magic pointer, as it is used
     * by the MFD helper. To completely disable caching, set
     * cache->enabled to 0.
     */
    int to=60;
    try{
      to=smsc::util::config::Manager::getInstance().getInt("snmp.cacheTimeout");
    }
    catch(...)
    {
      __warning2__("Config parameter snmp.cacheTimeout not found, using default=%d",to);
    }
    cache->timeout = to; /* seconds */
} /* smeStatTable_container_init */


void uint64_to_U64(uint64_t val1,U64& val2)
{
  val2.high=(val1>>32)&0xffffffffUL;
  val2.low=val1&0xffffffffUL;
}

int
smeStatTable_cache_load(netsnmp_container *container)
{
  smeStatTable_rowreq_ctx *rowreq_ctx;
  size_t                 count = 0;

  long   smeStatIndex=0;
  //char smeStatSystemId[32];
  //size_t smeStatSystemId_len;
  U64 smeStatAccepted={0,0};
  U64 smeStatRejected={0,0};
  U64 smeStatRetried={0,0};
  U64 smeStatDelivered={0,0};
  U64 smeStatFailed={0,0};
  U64 smeStatTemporal={0,0};

  DEBUGMSGTL(("verbose:smeStatTable:smeStatTable_cache_load","called\n"));

  smsc::smeman50::SmeManager* smeman = getSmeMan();
  smsc::stat::SmeStats* smestat = getSmeStats();

//  size_t smeCnt = smeman->Count();
//  smsc::smeman50::SmeInfo info;
  char* key = 0;
  smsc::smeman50::SmeRecord* record = 0;
  smeman->First();
  while ( smeman->Next(key, record) )
//  for(smeStatIndex=0; smeStatIndex<smeCnt; smeStatIndex++)
  {
/*
    try
    {
      info=smeman->getSmeInfo((uint32_t)smeStatIndex);
    }
    catch(...)
    {
      continue;
    }
*/
    smsc::smeman50::SmeInfo& info = record->info;
    if ( !info.enabled )
      continue;
    smsc::stat::SmeStats::Counters cnt = smestat->getCnt(info.systemId.c_str());

    uint64_to_U64(cnt.cnt[smsc::stat::SmeStats::cntAccepted], smeStatAccepted);
    uint64_to_U64(cnt.cnt[smsc::stat::SmeStats::cntRejected], smeStatRejected);
    uint64_to_U64(cnt.cnt[smsc::stat::SmeStats::cntRetried], smeStatRetried);
    uint64_to_U64(cnt.cnt[smsc::stat::SmeStats::cntDelivered], smeStatDelivered);
    uint64_to_U64(cnt.cnt[smsc::stat::SmeStats::cntFailed], smeStatFailed);
    uint64_to_U64(cnt.cnt[smsc::stat::SmeStats::cntTempError], smeStatTemporal);

    rowreq_ctx = smeStatTable_allocate_rowreq_ctx();
    if (NULL == rowreq_ctx) {
        snmp_log(LOG_ERR, "memory allocation failed\n");
        return MFD_RESOURCE_UNAVAILABLE;
    }
    if(MFD_SUCCESS != smeStatTable_indexes_set(rowreq_ctx, smeStatIndex))
    {
        snmp_log(LOG_ERR,"error setting index while loading "
                 "smeStatTable cache.\n");
        smeStatTable_release_rowreq_ctx(rowreq_ctx);
        continue;
    }

    if ((NULL == rowreq_ctx->data.smeStatSystemId) || info.systemId.length()>sizeof(rowreq_ctx->data.smeStatSystemId))
    {
        snmp_log(LOG_ERR,"not enough space for value\n");
        return MFD_ERROR;
    }
    rowreq_ctx->data.smeStatSystemId_len = info.systemId.length();
    memcpy( rowreq_ctx->data.smeStatSystemId, info.systemId.c_str(), rowreq_ctx->data.smeStatSystemId_len+1);

    rowreq_ctx->data.smeStatAccepted.high = smeStatAccepted.high;
    rowreq_ctx->data.smeStatAccepted.low = smeStatAccepted.low;

    rowreq_ctx->data.smeStatRejected.high = smeStatRejected.high;
    rowreq_ctx->data.smeStatRejected.low = smeStatRejected.low;

    rowreq_ctx->data.smeStatRetried.high = smeStatRetried.high;
    rowreq_ctx->data.smeStatRetried.low = smeStatRetried.low;

    rowreq_ctx->data.smeStatDelivered.high = smeStatDelivered.high;
    rowreq_ctx->data.smeStatDelivered.low = smeStatDelivered.low;

    rowreq_ctx->data.smeStatFailed.high = smeStatFailed.high;
    rowreq_ctx->data.smeStatFailed.low = smeStatFailed.low;

    rowreq_ctx->data.smeStatTemporal.high = smeStatTemporal.high;
    rowreq_ctx->data.smeStatTemporal.low = smeStatTemporal.low;


    /*
     * insert into table container
     */
    CONTAINER_INSERT(container, rowreq_ctx);
    ++count;
  }

  DEBUGMSGT(("verbose:smeStatTable:smeStatTable_cache_load",
             "inserted %d records\n", (int)count));

  return MFD_SUCCESS;
} /* smeStatTable_cache_load */

/**
 * cache clean up
 *
 * @param container container with all current items
 *
 *  This optional callback is called prior to all
 *  item's being removed from the container. If you
 *  need to do any processing before that, do it here.
 *
 * @note
 *  The MFD helper will take care of releasing all the row contexts.
 *
 */
void
smeStatTable_cache_free(netsnmp_container *container)
{
    DEBUGMSGTL(("verbose:smeStatTable:smeStatTable_cache_free","called\n"));

    /*
     * TODO:380:M: Free smeStatTable cache.
     */
} /* smeStatTable_cache_free */

/**
 * prepare row for processing.
 *
 *  When the agent has located the row for a request, this function is
 *  called to prepare the row for processing. If you fully populated
 *  the data context during the index setup phase, you may not need to
 *  do anything.
 *
 * @param rowreq_ctx pointer to a context.
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 */
int
smeStatTable_row_prep( smeStatTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:smeStatTable:smeStatTable_row_prep","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:390:o: Prepare row for request.
     * If populating row data was delayed, this is the place to
     * fill in the row for this request.
     */

    return MFD_SUCCESS;
} /* smeStatTable_row_prep */

}//namespace smestattable{
}//namespace snmp{
}//namespace smsc{


/** @} */
