// NOTE: Do NOT edit this file (it is auto-generated).
// Instead, edit proto-cpp.tmpl and regenerate.

#ifndef SCAG_BILL_EWALLET_STREAM_PROTOCOL_HPP
#define SCAG_BILL_EWALLET_STREAM_PROTOCOL_HPP

#include <memory>
#include "scag/bill/ewallet/stream/BufferReader.h"
#include "scag/bill/ewallet/stream/BufferWriter.h"
#include "Open.hpp"
#include "OpenResp.hpp"
#include "Commit.hpp"
#include "CommitResp.hpp"
#include "Rollback.hpp"
#include "RollbackResp.hpp"
#include "Info.hpp"
#include "InfoResp.hpp"
#include "Transfer.hpp"
#include "TransferResp.hpp"
#include "Check.hpp"
#include "CheckResp.hpp"
#include "TransferCheck.hpp"
#include "TransferCheckResp.hpp"

namespace scag2 {
namespace bill {
namespace ewallet {
namespace stream {

class Protocol
{
public:
    enum {
        tag_Open=3,
        tag_OpenResp=32771,
        tag_Commit=4,
        tag_CommitResp=32772,
        tag_Rollback=5,
        tag_RollbackResp=32773,
        tag_Info=6,
        tag_InfoResp=32774,
        tag_Transfer=7,
        tag_TransferResp=32775,
        tag_Check=8,
        tag_CheckResp=32776,
        tag_TransferCheck=9,
        tag_TransferCheckResp=32777,
        tag_NO_TAG = 0xffff
    };

    class Handler
    {
    public:
        virtual void handle( Open& obj ) = 0;
        virtual void handle( OpenResp& obj ) = 0;
        virtual void handle( Commit& obj ) = 0;
        virtual void handle( CommitResp& obj ) = 0;
        virtual void handle( Rollback& obj ) = 0;
        virtual void handle( RollbackResp& obj ) = 0;
        virtual void handle( Info& obj ) = 0;
        virtual void handle( InfoResp& obj ) = 0;
        virtual void handle( Transfer& obj ) = 0;
        virtual void handle( TransferResp& obj ) = 0;
        virtual void handle( Check& obj ) = 0;
        virtual void handle( CheckResp& obj ) = 0;
        virtual void handle( TransferCheck& obj ) = 0;
        virtual void handle( TransferCheckResp& obj ) = 0;
    };

    Protocol() : handler(0) {}

    Protocol( Handler* newHandler ) : handler(newHandler) {}

    // inline unsigned getOptions() const { return options_; }
    // inline void setOptions( unsigned opt ) { options_ = opt; }

    void decodeMessage( BufferReader& ss ) /* throw (PvapException) */
    {
        uint32_t seqNum = -1;
        seqNum = ss.readInt();
        // if ( ! handler->hasSeqNum(seqNum) ) throw UnexpectedSeqNumException(seqNum);
        int tag = ss.readTag();
        switch(tag) {
        case tag_Open: {
            // printf( "tag %d (%s)\n", tag, "Open" );
            Open msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_OpenResp: {
            // printf( "tag %d (%s)\n", tag, "OpenResp" );
            OpenResp msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_Commit: {
            // printf( "tag %d (%s)\n", tag, "Commit" );
            Commit msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_CommitResp: {
            // printf( "tag %d (%s)\n", tag, "CommitResp" );
            CommitResp msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_Rollback: {
            // printf( "tag %d (%s)\n", tag, "Rollback" );
            Rollback msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_RollbackResp: {
            // printf( "tag %d (%s)\n", tag, "RollbackResp" );
            RollbackResp msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_Info: {
            // printf( "tag %d (%s)\n", tag, "Info" );
            Info msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_InfoResp: {
            // printf( "tag %d (%s)\n", tag, "InfoResp" );
            InfoResp msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_Transfer: {
            // printf( "tag %d (%s)\n", tag, "Transfer" );
            Transfer msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_TransferResp: {
            // printf( "tag %d (%s)\n", tag, "TransferResp" );
            TransferResp msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_Check: {
            // printf( "tag %d (%s)\n", tag, "Check" );
            Check msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_CheckResp: {
            // printf( "tag %d (%s)\n", tag, "CheckResp" );
            CheckResp msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_TransferCheck: {
            // printf( "tag %d (%s)\n", tag, "TransferCheck" );
            TransferCheck msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        case tag_TransferCheckResp: {
            // printf( "tag %d (%s)\n", tag, "TransferCheckResp" );
            TransferCheckResp msg;
            msg.setSeqNum(seqNum);
            msg.deserialize(*this,ss);
            handler->handle(msg);
            break;
        }
        default:
            throw Exception(Status::IO_ERROR,"unknown message type: seq=%u tag=%u",seqNum,tag);
        }
    }

    void encodeMessage( const Open& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_Open);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const OpenResp& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_OpenResp);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const Commit& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_Commit);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const CommitResp& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_CommitResp);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const Rollback& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_Rollback);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const RollbackResp& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_RollbackResp);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const Info& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_Info);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const InfoResp& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_InfoResp);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const Transfer& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_Transfer);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const TransferResp& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_TransferResp);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const Check& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_Check);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const CheckResp& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_CheckResp);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const TransferCheck& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_TransferCheck);
        msg.serialize(*this,ss);
    }

    void encodeMessage( const TransferCheckResp& msg, BufferWriter& ss ) const /* throw (PvapException) */
    {
        ss.writeInt(msg.getSeqNum());
        ss.writeTag(tag_TransferCheckResp);
        msg.serialize(*this,ss);
    }

protected:
    Handler* handler; // unowned
    // unsigned options_;
};

}
}
}
}

#endif
