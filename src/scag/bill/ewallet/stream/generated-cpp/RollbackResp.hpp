// NOTE: Do NOT edit this file (it is auto-generated).
// Instead, edit message-cpp.tmpl and regenerate.

#ifndef SCAG_BILL_EWALLET_STREAM_ROLLBACKRESP_HPP
#define SCAG_BILL_EWALLET_STREAM_ROLLBACKRESP_HPP

#include "util/int.h"
#include <string>
#include "scag/bill/ewallet/Status.h"
#include "scag/exc/IOException.h"
#include "scag/bill/ewallet/Exception.h"


namespace scag2 {
namespace bill {
namespace ewallet {
namespace stream {

class Protocol;

class RollbackResp
{
protected:
    static const int statusValueTag = 1;

public:
    RollbackResp()
    {
        statusValueFlag = false;
    }

    ~RollbackResp() {
    }

    void clear()
    {
        statusValueFlag=false;
    }

    std::string toString() const
    {
        std::string res;
        res.reserve(200);
        res.append("RollbackResp");
        {
            char buf[40];
            sprintf(buf," seq=%u",unsigned(getSeqNum()));
            res.append(buf);
        }
        if ( statusValueFlag ) {
            res.append(" statusValue=");
            char buf[10]; sprintf(buf,"%u",unsigned(statusValue)); res.append(buf);
        }
        return res;
    }

    bool hasStatusValue() const {
        return statusValueFlag;
    }
    uint8_t getStatusValue() const {
        if (!statusValueFlag) {
            throw Exception( excType(), "RollbackResp has no field statusValue");
        }
        return statusValue;
    }
    void setStatusValue( uint8_t v ) {
        this->statusValueFlag = true;
        this->statusValue = v;
    }

    template < class DataStream >
        void serialize( const Protocol& proto, DataStream& writer ) const
    {
        // printf( "serializing %s\n", toString().c_str() );
        checkFields();
        // mandatory fields
        try {
            // printf( "write pos=%d field=%d\n", ds.getPos(), statusValueTag );
            writer.writeTag(statusValueTag);
            writer.writeByteLV(statusValue);
        } catch ( exceptions::IOException e ) {
            throw Exception( excType(),
                             "writing field statusValue in RollbackResp: %s",
                             e.what() );
        }
        // optional fields
    }


    template <class DataStream>
    void deserialize( Protocol& proto, DataStream& reader )
    {
        clear();
        int tag = -1;
        try {
            do {
                // int pos = int(reader.getPos());
                tag = reader.readTag();
                // printf( "read pos=%d field=%d\n", pos, tag );
                if ( tag == -1 ) break;
                switch(tag) {
                case statusValueTag: {
                    if (statusValueFlag) {
                        throw Exception( excType(),
                                         "duplicate field statusValue of RollbackResp" );
                    }
                    statusValue = reader.readByteLV();
                    statusValueFlag = true;
                    break;
                }
                default:
                    throw Exception( excType(),
                                     "RollbackResp has invalid field:%u", tag );
                }
            } while ( true );
        } catch ( exceptions::IOException e ) {
            throw Exception( excType(),
                             "reading field tag=%u of RollbackResp: %s",
                             tag, e.what() );
        }
        // printf( "deserialized %s\n", toString().c_str() );
        checkFields();
    }

    int32_t getSeqNum() const { return seqNum_; }
    void setSeqNum( int32_t seqnum ) { seqNum_ = seqnum; }

protected:
    void checkFields() const
    {
        if ( !statusValueFlag ) {
            throw Exception( excType(),
                             "message RollbackResp does not have required field statusValue" );
        }
 
    }

private:
    RollbackResp( const RollbackResp& );
    RollbackResp& operator = ( const RollbackResp& );

    inline bool isRequest() const {
        return false;
    }

    inline uint8_t excType() const {
        return isRequest() ? Status::BAD_REQUEST : Status::BAD_RESPONSE;
    }

protected:
    int32_t seqNum_;

    uint8_t statusValue;

    bool statusValueFlag;
};

} // namespace scag2
} // namespace bill
} // namespace ewallet
} // namespace stream
#endif
