// NOTE: Do NOT edit this file (it is auto-generated).
// Instead, edit message-cpp.tmpl and regenerate.

#ifndef SCAG_BILL_EWALLET_STREAM_OPENRESP_HPP
#define SCAG_BILL_EWALLET_STREAM_OPENRESP_HPP

#include "util/int.h"
#include <string>
#include "scag/bill/ewallet/Status.h"
#include "scag/exc/IOException.h"
#include "scag/bill/ewallet/Exception.h"


namespace scag2 {
namespace bill {
namespace ewallet {
namespace stream {

class Protocol;

class OpenResp
{
protected:
    static const int statusValueTag = 1;
    static const int transIdTag = 12;
    static const int amountTag = 10;
    static const int chargeThresholdTag = 19;

public:
    OpenResp()
    {
        statusValueFlag = false;
        transIdFlag = false;
        amountFlag = false;
        chargeThresholdFlag = false;
    }

    ~OpenResp() {
    }

    void clear()
    {
        statusValueFlag=false;
        transIdFlag=false;
        amountFlag=false;
        chargeThresholdFlag=false;
    }

    std::string toString() const
    {
        std::string res;
        res.reserve(200);
        res.append("OpenResp");
        {
            char buf[40];
            sprintf(buf," seq=%u",unsigned(getSeqNum()));
            res.append(buf);
        }
        if ( statusValueFlag ) {
            res.append(" statusValue=");
            char buf[10]; sprintf(buf,"%u",unsigned(statusValue)); res.append(buf);
        }
        if ( transIdFlag ) {
            res.append(" transId=");
            char buf[20]; sprintf(buf,"%d",unsigned(transId)); res.append(buf);
        }
        if ( amountFlag ) {
            res.append(" amount=");
            char buf[20]; sprintf(buf,"%d",unsigned(amount)); res.append(buf);
        }
        if ( chargeThresholdFlag ) {
            res.append(" chargeThreshold=");
            char buf[20]; sprintf(buf,"%d",unsigned(chargeThreshold)); res.append(buf);
        }
        return res;
    }

    bool hasStatusValue() const {
        return statusValueFlag;
    }
    uint8_t getStatusValue() const {
        if (!statusValueFlag) {
            throw Exception( excType(), "OpenResp has no field statusValue");
        }
        return statusValue;
    }
    void setStatusValue( uint8_t v ) {
        this->statusValueFlag = true;
        this->statusValue = v;
    }
    bool hasTransId() const {
        return transIdFlag;
    }
    int32_t getTransId() const {
        if (!transIdFlag) {
            throw Exception( excType(), "OpenResp has no field transId");
        }
        return transId;
    }
    void setTransId( int32_t v ) {
        this->transIdFlag = true;
        this->transId = v;
    }
    bool hasAmount() const {
        return amountFlag;
    }
    int32_t getAmount() const {
        if (!amountFlag) {
            throw Exception( excType(), "OpenResp has no field amount");
        }
        return amount;
    }
    void setAmount( int32_t v ) {
        this->amountFlag = true;
        this->amount = v;
    }
    bool hasChargeThreshold() const {
        return chargeThresholdFlag;
    }
    int32_t getChargeThreshold() const {
        if (!chargeThresholdFlag) {
            throw Exception( excType(), "OpenResp has no field chargeThreshold");
        }
        return chargeThreshold;
    }
    void setChargeThreshold( int32_t v ) {
        this->chargeThresholdFlag = true;
        this->chargeThreshold = v;
    }

    template < class DataStream >
        void serialize( const Protocol& proto, DataStream& writer ) const
    {
        printf( "serializing %s\n", toString().c_str() );
        checkFields();
        // mandatory fields
        try {
            // printf( "write pos=%d field=%d\n", ds.getPos(), statusValueTag );
            writer.writeTag(statusValueTag);
            writer.writeByteLV(statusValue);
        } catch ( exceptions::IOException e ) {
            throw Exception( excType(),
                             "writing field statusValue in OpenResp: %s",
                             e.what() );
        }
        // optional fields
        if ( transIdFlag ) {
            // printf( "write pos=%d field=%d\n", writer.getPos(), transIdTag );
            try {
                writer.writeTag(transIdTag);
                writer.writeIntLV(transId);
            } catch ( exceptions::IOException e ) {
                throw Exception( excType(),
                                 "writing field transId in OpenResp: %s",
                                 e.what() );
            }
        }
        if ( amountFlag ) {
            // printf( "write pos=%d field=%d\n", writer.getPos(), amountTag );
            try {
                writer.writeTag(amountTag);
                writer.writeIntLV(amount);
            } catch ( exceptions::IOException e ) {
                throw Exception( excType(),
                                 "writing field amount in OpenResp: %s",
                                 e.what() );
            }
        }
        if ( chargeThresholdFlag ) {
            // printf( "write pos=%d field=%d\n", writer.getPos(), chargeThresholdTag );
            try {
                writer.writeTag(chargeThresholdTag);
                writer.writeIntLV(chargeThreshold);
            } catch ( exceptions::IOException e ) {
                throw Exception( excType(),
                                 "writing field chargeThreshold in OpenResp: %s",
                                 e.what() );
            }
        }
    }


    template <class DataStream>
    void deserialize( Protocol& proto, DataStream& reader )
    {
        clear();
        int tag = -1;
        try {
            do {
                // int pos = int(reader.getPos());
                tag = reader.readTag();
                // printf( "read pos=%d field=%d\n", pos, tag );
                if ( tag == -1 ) break;
                switch(tag) {
                case statusValueTag: {
                    if (statusValueFlag) {
                        throw Exception( excType(),
                                         "duplicate field statusValue of OpenResp" );
                    }
                    statusValue = reader.readByteLV();
                    statusValueFlag = true;
                    break;
                }
                case transIdTag: {
                    if (transIdFlag) {
                        throw Exception( excType(),
                                         "duplicate field transId of OpenResp" );
                    }
                    transId = reader.readIntLV();
                    transIdFlag = true;
                    break;
                }
                case amountTag: {
                    if (amountFlag) {
                        throw Exception( excType(),
                                         "duplicate field amount of OpenResp" );
                    }
                    amount = reader.readIntLV();
                    amountFlag = true;
                    break;
                }
                case chargeThresholdTag: {
                    if (chargeThresholdFlag) {
                        throw Exception( excType(),
                                         "duplicate field chargeThreshold of OpenResp" );
                    }
                    chargeThreshold = reader.readIntLV();
                    chargeThresholdFlag = true;
                    break;
                }
                default:
                    throw Exception( excType(),
                                     "OpenResp has invalid field:%u", tag );
                }
            } while ( true );
        } catch ( exceptions::IOException e ) {
            throw Exception( excType(),
                             "reading field tag=%u of OpenResp: %s",
                             tag, e.what() );
        }
        printf( "deserialized %s\n", toString().c_str() );
        checkFields();
    }

    int32_t getSeqNum() const { return seqNum_; }
    void setSeqNum( int32_t seqnum ) { seqNum_ = seqnum; }

protected:
    void checkFields() const
    {
        if ( !statusValueFlag ) {
            throw Exception( excType(),
                             "message OpenResp does not have required field statusValue" );
        }
 
    }

private:
    OpenResp( const OpenResp& );
    OpenResp& operator = ( const OpenResp& );

    inline bool isRequest() const {
        return false;
    }

    inline uint8_t excType() const {
        return isRequest() ? Status::BAD_REQUEST : Status::BAD_RESPONSE;
    }

protected:
    int32_t seqNum_;

    uint8_t statusValue;
    int32_t transId;
    int32_t amount;
    int32_t chargeThreshold;

    bool statusValueFlag;
    bool transIdFlag;
    bool amountFlag;
    bool chargeThresholdFlag;
};

} // namespace scag2
} // namespace bill
} // namespace ewallet
} // namespace stream
#endif
