// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myfirst.proto

#ifndef PROTOBUF_myfirst_2eproto__INCLUDED
#define PROTOBUF_myfirst_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_myfirst_2eproto();
void protobuf_AssignDesc_myfirst_2eproto();
void protobuf_ShutdownFile_myfirst_2eproto();

class AbonentAddress;
class Bind;

// ===================================================================

class AbonentAddress : public ::google::protobuf::Message {
 public:
  AbonentAddress();
  virtual ~AbonentAddress();
  
  AbonentAddress(const AbonentAddress& from);
  
  inline AbonentAddress& operator=(const AbonentAddress& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AbonentAddress& default_instance();
  
  void Swap(AbonentAddress* other);
  
  // implements Message ----------------------------------------------
  
  AbonentAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AbonentAddress& from);
  void MergeFrom(const AbonentAddress& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  
  // @@protoc_insertion_point(class_scope:AbonentAddress)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* address_;
  static const ::std::string _default_address_;
  friend void  protobuf_AddDesc_myfirst_2eproto();
  friend void protobuf_AssignDesc_myfirst_2eproto();
  friend void protobuf_ShutdownFile_myfirst_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AbonentAddress* default_instance_;
};
// -------------------------------------------------------------------

class Bind : public ::google::protobuf::Message {
 public:
  Bind();
  virtual ~Bind();
  
  Bind(const Bind& from);
  
  inline Bind& operator=(const Bind& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bind& default_instance();
  
  void Swap(Bind* other);
  
  // implements Message ----------------------------------------------
  
  Bind* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bind& from);
  void MergeFrom(const Bind& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string login = 2;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 2;
  inline const ::std::string& login() const;
  inline void set_login(const ::std::string& value);
  inline void set_login(const char* value);
  inline void set_login(const char* value, size_t size);
  inline ::std::string* mutable_login();
  
  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  
  // optional int64 value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // repeated .AbonentAddress destination = 5;
  inline int destination_size() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 5;
  inline const ::AbonentAddress& destination(int index) const;
  inline ::AbonentAddress* mutable_destination(int index);
  inline ::AbonentAddress* add_destination();
  inline const ::google::protobuf::RepeatedPtrField< ::AbonentAddress >&
      destination() const;
  inline ::google::protobuf::RepeatedPtrField< ::AbonentAddress >*
      mutable_destination();
  
  // @@protoc_insertion_point(class_scope:Bind)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* login_;
  static const ::std::string _default_login_;
  ::std::string* password_;
  static const ::std::string _default_password_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::RepeatedPtrField< ::AbonentAddress > destination_;
  friend void  protobuf_AddDesc_myfirst_2eproto();
  friend void protobuf_AssignDesc_myfirst_2eproto();
  friend void protobuf_ShutdownFile_myfirst_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Bind* default_instance_;
};
// ===================================================================


// ===================================================================

// AbonentAddress

// required string address = 1;
inline bool AbonentAddress::has_address() const {
  return _has_bit(0);
}
inline void AbonentAddress::clear_address() {
  if (address_ != &_default_address_) {
    address_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& AbonentAddress::address() const {
  return *address_;
}
inline void AbonentAddress::set_address(const ::std::string& value) {
  _set_bit(0);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void AbonentAddress::set_address(const char* value) {
  _set_bit(0);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void AbonentAddress::set_address(const char* value, size_t size) {
  _set_bit(0);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbonentAddress::mutable_address() {
  _set_bit(0);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  return address_;
}

// -------------------------------------------------------------------

// Bind

// optional int32 id = 1;
inline bool Bind::has_id() const {
  return _has_bit(0);
}
inline void Bind::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Bind::id() const {
  return id_;
}
inline void Bind::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// optional string login = 2;
inline bool Bind::has_login() const {
  return _has_bit(1);
}
inline void Bind::clear_login() {
  if (login_ != &_default_login_) {
    login_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Bind::login() const {
  return *login_;
}
inline void Bind::set_login(const ::std::string& value) {
  _set_bit(1);
  if (login_ == &_default_login_) {
    login_ = new ::std::string;
  }
  login_->assign(value);
}
inline void Bind::set_login(const char* value) {
  _set_bit(1);
  if (login_ == &_default_login_) {
    login_ = new ::std::string;
  }
  login_->assign(value);
}
inline void Bind::set_login(const char* value, size_t size) {
  _set_bit(1);
  if (login_ == &_default_login_) {
    login_ = new ::std::string;
  }
  login_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bind::mutable_login() {
  _set_bit(1);
  if (login_ == &_default_login_) {
    login_ = new ::std::string;
  }
  return login_;
}

// optional string password = 3;
inline bool Bind::has_password() const {
  return _has_bit(2);
}
inline void Bind::clear_password() {
  if (password_ != &_default_password_) {
    password_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Bind::password() const {
  return *password_;
}
inline void Bind::set_password(const ::std::string& value) {
  _set_bit(2);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Bind::set_password(const char* value) {
  _set_bit(2);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Bind::set_password(const char* value, size_t size) {
  _set_bit(2);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bind::mutable_password() {
  _set_bit(2);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  return password_;
}

// optional int64 value = 4;
inline bool Bind::has_value() const {
  return _has_bit(3);
}
inline void Bind::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 Bind::value() const {
  return value_;
}
inline void Bind::set_value(::google::protobuf::int64 value) {
  _set_bit(3);
  value_ = value;
}

// repeated .AbonentAddress destination = 5;
inline int Bind::destination_size() const {
  return destination_.size();
}
inline void Bind::clear_destination() {
  destination_.Clear();
}
inline const ::AbonentAddress& Bind::destination(int index) const {
  return destination_.Get(index);
}
inline ::AbonentAddress* Bind::mutable_destination(int index) {
  return destination_.Mutable(index);
}
inline ::AbonentAddress* Bind::add_destination() {
  return destination_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AbonentAddress >&
Bind::destination() const {
  return destination_;
}
inline ::google::protobuf::RepeatedPtrField< ::AbonentAddress >*
Bind::mutable_destination() {
  return &destination_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_myfirst_2eproto__INCLUDED
