/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.32.2.3 $ of : mfd-top.m2c,v $
 *
 * $Id$
 */
/** \mainpage MFD helper for smeErrTable
 *
 * \section intro Introduction
 * Introductory text.
 *
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "smeErrTable.hpp"

#include <net-snmp/agent/mib_modules.h>

#include "smeErrTable_interface.hpp"

namespace smsc{
namespace snmp{
namespace smeerrtable{

oid smeErrTable_oid[] = { SMEERRTABLE_OID };
int smeErrTable_oid_size = OID_LENGTH(smeErrTable_oid);

void initialize_table_smeErrTable(void);


/**
 * Initializes the smeErrTable module
 */
void
init_smeErrTable(void)
{
    DEBUGMSGTL(("verbose:smeErrTable:init_smeErrTable","called\n"));

    /*
     * TODO:300:o: Perform smeErrTable one-time module initialization.
     */

    /*
     * here we initialize all the tables we're planning on supporting
     */
    if (should_init("smeErrTable"))
        initialize_table_smeErrTable();

} /* init_smeErrTable */

/**
 * Initialize the table smeErrTable
 *    (Define its contents and how it's structured)
 */
void
initialize_table_smeErrTable(void)
{
    smeErrTable_registration_ptr user_context;
    u_long flags;

    DEBUGMSGTL(("verbose:smeErrTable:initialize_table_smeErrTable","called\n"));

    /*
     * TODO:301:o: Perform smeErrTable one-time table initialization.
     */

    /*
     * TODO:302:o: |->Initialize smeErrTable user context
     * if you'd like to pass in a pointer to some data for this
     * table, allocate or set it up here.
     */
    /*
     * a netsnmp_data_list is a simple way to store void pointers. A simple
     * string token is used to add, find or remove pointers.
     */
    user_context = netsnmp_create_data_list("smeErrTable", NULL, NULL);

    /*
     * No support for any flags yet, but in the future you would
     * set any flags here.
     */
    flags = 0;

    /*
     * call interface initialization code
     */
    _smeErrTable_initialize_interface(user_context, flags);
} /* initialize_table_smeErrTable */

/**
 * extra context initialization
 *
 * @param rowreq_ctx    : row request context
 * @param user_init_ctx : void pointer for user (parameter to rowreq_ctx_allocate)
 *
 * @retval MFD_SUCCESS  : no errors
 * @retval MFD_ERROR    : error (context allocate will fail)
 */
int
smeErrTable_rowreq_ctx_init(smeErrTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:smeErrTable:smeErrTable_rowreq_ctx_init","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:210:o: |-> Perform extra smeErrTable rowreq initialization.
     */

    return MFD_SUCCESS;
} /* smeErrTable_rowreq_ctx_init */

/**
 * extra context cleanup
 *
 */
void smeErrTable_rowreq_ctx_cleanup(smeErrTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:smeErrTable:smeErrTable_rowreq_ctx_cleanup","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:211:o: |-> Perform extra smeErrTable rowreq cleanup.
     */
} /* smeErrTable_rowreq_ctx_cleanup */

/**
 * pre-request callback
 *
 *
 * @retval MFD_SUCCESS              : success.
 * @retval MFD_ERROR                : other error
 */
int
smeErrTable_pre_request(smeErrTable_registration_ptr user_context)
{
    DEBUGMSGTL(("verbose:smeErrTable:smeErrTable_pre_request","called\n"));

    /*
     * TODO:510:o: Perform smeErrTable pre-request actions.
     */

    return MFD_SUCCESS;
} /* smeErrTable_pre_request */

/**
 * post-request callback
 *
 *
 * @retval MFD_SUCCESS : success.
 * @retval MFD_ERROR   : other error (ignored)
 */
int
smeErrTable_post_request(smeErrTable_registration_ptr user_context)
{
    DEBUGMSGTL(("verbose:smeErrTable:smeErrTable_post_request","called\n"));

    /*
     * TODO:511:o: Perform smeErrTable pos-request actions.
     */

    return MFD_SUCCESS;
} /* smeErrTable_post_request */


}//smeerrtable
}//snmp
}//smsc

/** @{ */
