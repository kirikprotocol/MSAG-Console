#
# $Id$
#
#
#

RANLIB=ranlib

ifndef PACKAGEDIR
PACKAGEDIR = $(subst .,/,$(PACKAGE))
#$(warning $(PACKAGEDIR))
endif

ifdef DEBUG
export DEBUG
endif

SOURCES := $(subst $(SMSC_SRCDIR)/$(PACKAGEDIR)/,,$(wildcard $(SMSC_SRCDIR)/$(PACKAGEDIR)/*.cpp))
MAIN_SOURCES := $(shell cat binaries-list 2>>/dev/null | awk '/^[^\#-]/{ print $$2".cpp" }' )
EXCLUDE_SOURCES := $(MAIN_SOURCES) $(shell cat binaries-list 2>>/dev/null | awk '/^-/{ print $$2".cpp" }' )
EXCLUDE_SOURCES := $(EXCLUDE_SOURCES) $(shell cat exclude-list 2>>/dev/null | awk '/^[^\#]/{print $$1}' )
BINARIES := $(shell cat binaries-list 2>>/dev/null | awk '/^[^\#-]./{ print "$(SMSC_BUILDDIR)/bin/"$$1 }' )
#$(warning $(BINARIES))
#$(warning $(MAIN_SOURCES))
SOURCES := $(filter-out $(EXCLUDE_SOURCES), $(SOURCES))
#$(warning $(SOURCES))
OBJECTS := $(SOURCES:.cpp=.o)
LIBRARY := lib$(subst .,-,$(PACKAGE))

#$(warning $(OBJECTS))

target:
	@cd $(SMSC_SRCDIR); make -s $(PACKAGE).rbuild

include $(SMSC_SRCDIR)/conf/modules_switcher

__build_message__:
	@echo build in module $(PACKAGE)

build only: __build_message__ $(SMSC_BUILDDIR)/lib/$(LIBRARY).a $(BINARIES)

$(SMSC_BUILDDIR)/lib/$(LIBRARY).a : $(SMSC_BUILDDIR)/obj/$(LIBRARY) $(foreach x,$(OBJECTS),$(SMSC_BUILDDIR)/obj/$(LIBRARY)/$(x))
	@echo "assemble module $(LIBRARY).a"
	@$(AR) -r $@ $(foreach x,$(OBJECTS),$(SMSC_BUILDDIR)/obj/$(LIBRARY)/$(x))
	@$(RANLIB) $@

rbuild: only
	@if [ -n "$(MODULES)" ] ; then \
		XXXX="$(MODULES)";\
		set -e; for i in $$XXXX; do make $$i.rbuild ; done ;\
	fi

rclean: clean
	@if [ -n "$(MODULES)" ] ; then \
		XXXX="$(MODULES)";\
		set -e; for i in $$XXXX; do make -s $$i.rclean ; done ;\
	fi

clean:
	@echo "clean in $(PACKAGE)"
	rm -f $(SMSC_BUILDDIR)/obj/$(LIBRARY)/*.o
	rm -f $(SMSC_BUILDDIR)/lib/$(LIBRARY).a
	rm -f $(BINARIES)

$(SMSC_BUILDDIR)/obj/$(LIBRARY):
	mkdir -p $@

deps:
	@echo "make dependencies in $(PACKAGEDIR)"
	@mkdir -p $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)
	@rm -f $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.deps
	@if [ -n "$(SOURCES:.cpp=)" ] ; then \
	    XXXX="$(SOURCES:.cpp=)"; \
	    for i in $$XXXX ; do \
		gcc -MM $(CXXFLAGS) $(SMSC_SRCDIR)/$(PACKAGEDIR)/$$i.cpp -o$(SMSC_BUILDDIR)/obj/$(LIBRARY)/$$i.o >>\
		      $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.deps; \
	    done; \
	fi
	@rm -f $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.binaries-rules
	@perl $(SMSC_SRCDIR)/conf/gendeps.pl $(SMSC_SRCDIR)/$(PACKAGEDIR)
#	@cat binaries-list 2>>/dev/null | awk '/^[^\#-][a-zA-Z0-9]/{print "$(SMSC_BUILDDIR)/bin/"$$1" : $(SMSC_BUILDDIR)/obj/$(LIBRARY)/"$$2".o\n"\
#	    "\tmkdir -p `dirname $$@`\n"\
#	    "\techo linking $$@\n"\
#	    "\t$$(CXX) $$(CXXFLAGS) -o $$@ $$< $$(LDFLAGS) "$$3" "$$4" "$$5" "$$6" "$$7" "$$8" "$$9" "$$10" "$$11" "$$12" "$$13" "$$14" "$$15" "$$16" \n"}' \
#	    > $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.binaries-rules
	@if [ -n "$(MODULES)" ] ; then \
	    XXXX="$(MODULES)" ;\
			XWD=`pwd`; \
	    set -e; for i in $$XXXX ; do  cd $$XWD/$$i ; make -s deps; done ; \
	fi

-include $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.deps
-include $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.binaries-rules

$(SMSC_BUILDDIR)/obj/$(LIBRARY)/%.o:$(SMSC_SRCDIR)/$(PACKAGEDIR)/%.cpp
	@echo "compiling $<"
	@$(CXX) $(CXXFLAGS) -c -o $@ $<
