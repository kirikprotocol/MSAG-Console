#
# $Id$
#
#
#

RANLIB=ranlib

ifndef PACKAGEDIR
PACKAGEDIR = $(subst .,/,$(PACKAGE))
#$(warning $(PACKAGEDIR))
endif

ifeq ($(DEBUG),YES)
export DEBUG
endif

SOURCES := $(subst $(SMSC_SRCDIR)/$(PACKAGEDIR)/,,$(wildcard $(SMSC_SRCDIR)/$(PACKAGEDIR)/*.cpp))
SOURCES := $(SOURCES) $(subst $(SMSC_SRCDIR)/$(PACKAGEDIR)/,,$(wildcard $(SMSC_SRCDIR)/$(PACKAGEDIR)/*.c))
MAIN_SOURCES := $(shell cat binaries-list 2>>/dev/null | awk '/^[^\#-]/{ print $$2".cpp" }' )
EXCLUDE_SOURCES := $(MAIN_SOURCES) $(shell cat binaries-list 2>>/dev/null | awk '/^-/{ print $$2".cpp" }' )
EXCLUDE_SOURCES := $(EXCLUDE_SOURCES) $(shell cat exclude-list 2>>/dev/null | awk '/^[^\#]/{print $$1}' )
BINARIES := $(shell cat binaries-list 2>>/dev/null | awk '/^[^\#-]./{ print "$(SMSC_BUILDDIR)/bin/"$$1 }' )
#$(warning $(BINARIES))
#$(warning $(MAIN_SOURCES))
SOURCES := $(filter-out $(EXCLUDE_SOURCES), $(SOURCES))
#$(warning $(SOURCES))
OBJECTS := $(SOURCES:.cpp=.o)
OBJECTS := $(OBJECTS:.c=.o)
LIBRARY := lib$(subst .,-,$(PACKAGE))

#$(warning $(OBJECTS))

target:
	@cd $(SMSC_SRCDIR); $(MAKE) -s $(PACKAGE).rbuild

include $(SMSC_SRCDIR)/conf/modules_switcher
#ifeq (,$(wildcard modules-list))

#MODULES :=

#else

#MODULES := $(shell cat modules-list | awk '{print $$1}' | grep -v "\#")
#__.empty.__:
#	@echo >> /dev/null

#$(MODULES) $(foreach x,$(MODULES),$(x).%): __.empty.__
#override _modules = $(subst ., ,$@)
#override _module = $(firstword $(_modules))
#override _subtarget = $(if $(word 2, $(_modules)), $(patsubst $(_module).%,%,$@), build )
#	@if [ -d $(_module) ]; then \
#	    cd $(_module); make $(_subtarget); \
#	else \
#	    echo "'$(_module)' is not module"; exit 1;\
#	fi

#endif



__build_message__:
	@echo build in module $(PACKAGE)

build only: __build_message__ $(SMSC_BUILDDIR)/lib/$(LIBRARY).a $(BINARIES)

$(SMSC_BUILDDIR)/lib/$(LIBRARY).a : $(SMSC_BUILDDIR)/obj/$(LIBRARY) $(foreach x,$(OBJECTS),$(SMSC_BUILDDIR)/obj/$(LIBRARY)/$(x))
	@if [ -n "$(OBJECTS)" ]; then \
	echo "assemble module $(LIBRARY).a"; \
	rm -f $@; \
	$(AR) -r $@ $(foreach x,$(OBJECTS),$(SMSC_BUILDDIR)/obj/$(LIBRARY)/$(x));\
	fi

rclean: clean
	@if [ -n "$(MODULES)" ] ; then \
		XXXX="$(MODULES)";\
		set -e; for i in $$XXXX; do $(MAKE) -s $$i.rclean ; done ;\
	fi

rbuild: only
	@if [ -n "$(MODULES)" ] ; then \
		XXXX="$(MODULES)";\
		set -e; for i in $$XXXX; do $(MAKE) $$i.rbuild ; done ;\
	fi

newbuild:
	@perl $(SMSC_SRCDIR)/conf/newbuild.pl $(PACKAGE)

clean:
	@echo "clean in $(PACKAGE)"
	rm -f $(SMSC_BUILDDIR)/obj/$(LIBRARY)/*.o
	rm -f $(SMSC_BUILDDIR)/lib/$(LIBRARY).a
	rm -f $(BINARIES)

$(SMSC_BUILDDIR)/obj/$(LIBRARY):
	mkdir -p $@

deps:
	@echo "make dependencies in $(PACKAGEDIR)"
	@mkdir -p $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)
	@mkdir -p $(SMSC_BUILDDIR)/obj/$(LIBRARY)
	@rm -f $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.deps
	@if [ -n "$(SOURCES)" ] ; then \
	    XXXX="$(SOURCES)"; \
	    for i in $$XXXX ; do \
	    printf "%s" "$(SMSC_BUILDDIR)/obj/$(LIBRARY)/" >> \
	    $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.deps; \
	    OPT=`perl -e '$$_="$(CXXFLAGS)";s/(?<=\s)\+w2?\s//g;s/-library=stlport4//;s/-x(?:arch|target|code|memalign)=\w+//g;s/-g\b//g;print $$_;'`; \
	    gcc -MM $$OPT $(SMSC_SRCDIR)/$(PACKAGEDIR)/$$i >>\
		      $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.deps; \
	    done; \
	fi
	@rm -f $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.binaries-rules
	@GCCFLAGS='$(CXXFLAGS)';export GCCFLAGS;perl $(SMSC_SRCDIR)/conf/gendeps.pl $(SMSC_SRCDIR)/$(PACKAGEDIR)
#	@cat binaries-list 2>>/dev/null | awk '/^[^\#-][a-zA-Z0-9]/{print "$(SMSC_BUILDDIR)/bin/"$$1" : $(SMSC_BUILDDIR)/obj/$(LIBRARY)/"$$2".o\n"\
#	    "\tmkdir -p `dirname $$@`\n"\
#	    "\techo linking $$@\n"\
#	    "\t$$(CXX) $$(CXXFLAGS) -o $$@ $$< $$(LDFLAGS) "$$3" "$$4" "$$5" "$$6" "$$7" "$$8" "$$9" "$$10" "$$11" "$$12" "$$13" "$$14" "$$15" "$$16" \n"}' \
#	    > $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.binaries-rules
	@if [ -n "$(MODULES)" ] ; then \
	    XXXX="$(MODULES)" ;\
			XWD=`pwd`; \
	    set -e; for i in $$XXXX ; do  cd $$XWD/$$i ; $(MAKE) -s deps; done ; \
	fi

__emptylib__:

-include $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.deps
-include $(SMSC_BUILDDIR)/deps/$(PACKAGEDIR)/.binaries-rules

$(SMSC_BUILDDIR)/obj/$(LIBRARY)/%.o:$(SMSC_SRCDIR)/$(PACKAGEDIR)/%.cpp
	@echo "compiling $<"
ifdef VERBOSE
	@echo @$(CXX) $(CXXFLAGS) $(COMPFLAGS) -c -o $@ $< 1>&2
endif
	@$(CXX) $(CXXFLAGS) $(COMPFLAGS) -c -o $@ $<

$(SMSC_BUILDDIR)/obj/$(LIBRARY)/%.o:$(SMSC_SRCDIR)/$(PACKAGEDIR)/%.c
	@echo "compiling $<"
#	@echo @$(CXX) $(CXXFLAGS) -c -o $@ $< 1>&2
	@$(CC) $(CFLAGS) $(C_COMPFLAGS) -c -o $@ $<

#$(SMSC_BUILDDIR)/obj/*/%.o: $(SMSC_SRCDIR)/*/%.cpp
#	@echo resolving dependencies $@
#	@cd $(SMSC_SRCDIR)/`perl -e '($$_)=$$ARGV[0]=~m!/lib(.*)/[^/]*$$!;tr!-!/!;print $$_' $@`;make -s $@
