/* ************************************************************************** *
 * TComponent sublayer: component indications composers.
 * ************************************************************************** */
#ifndef __EYELINE_TCAP_PROVD_TCOMPINDCOMPOSERS_HPP__
#ident "@(#)$Id$"
#define __EYELINE_TCAP_PROVD_TCOMPINDCOMPOSERS_HPP__

#include "eyeline/tcap/TComponentIndicationPrimitives.hpp"

namespace eyeline {
namespace tcap {
namespace provd {

using eyeline::ros::InvokeId;
using eyeline::ros::RejectProblem;

template <class T_COMP_IND_Arg /* pubic: TComponentIndicationPrimitive */>
class TCompIndicationComposerT : public T_COMP_IND_Arg {
public:
  TCompIndicationComposerT() : T_COMP_IND_Arg()
  { }
  virtual ~TCompIndicationComposerT()
  { }
  //
  T_COMP_IND_Arg & TInd(void) { return *this; }
  //
  const T_COMP_IND_Arg & TInd(void) const { return *this; }
  //
  void setDialogueId(TDialogueId dlgId) { this->_dlgId = dlgId; }
  //
  void setInvokeId(InvokeId invokeId)
  {
    this->_invokeId = invokeId; this->_hasInvId = true;
  }
};

// ---------------------------------------------------
// -- Indications generated by local TCProvider:
// ---------------------------------------------------

class TC_LCancelIndComposer : public TCompIndicationComposerT<TC_L_Cancel_Ind> {
public:
  TC_LCancelIndComposer() : TCompIndicationComposerT<TC_L_Cancel_Ind>()
  { }
  ~TC_LCancelIndComposer()
  { }
};

class TC_LRejectIndComposer : public TCompIndicationComposerT<TC_L_Reject_Ind> {
public:
  TC_LRejectIndComposer() : TCompIndicationComposerT<TC_L_Reject_Ind>()
  { }
  ~TC_LRejectIndComposer()
  { }

  void setProblem(RejectProblem::ProblemKind_e use_kind, RejectProblem::value_type use_val)
  {
    _rejProblem.setProblem(use_kind, use_val);
  }
};

}}}

#endif /* __EYELINE_TCAP_PROVD_TCOMPINDCOMPOSERS_HPP__ */

