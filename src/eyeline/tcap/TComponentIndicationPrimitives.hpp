/* ************************************************************************** *
 * TComponent sublayer: component handling indications.
 * ************************************************************************** */
#ifndef __EYELINE_TCAP_TCOMPONENTINDICATIONPRIMITIVES_HPP__
#ifndef __GNUC__
#ident "@(#)$Id$"
#endif /* __GNUC__ */
#define __EYELINE_TCAP_TCOMPONENTINDICATIONPRIMITIVES_HPP__

#include "eyeline/tcap/TDialogueDefs.hpp"
#include "eyeline/tcap/TComponentDefs.hpp"

namespace eyeline {
namespace tcap {

using eyeline::ros::RejectProblem;

class TComponentIndicationPrimitive {
public:
  enum IKind_e {
    indNone = 0, indLCancel, indLReject
  };

  virtual ~TComponentIndicationPrimitive()
  { }

  static const char * getIdent(IKind_e use_kind);

  const char * getIdent(void) const { return getIdent(_iKind); }

  //
  TDialogueId getDialogueId(void) const { return _dlgId; }
  //
  bool hasInvokeId(void) const { return _hasInvId; }
  //
  InvokeId getInvokeId(void) const { return _invokeId; }

protected:
  const IKind_e _iKind;
  TDialogueId   _dlgId;
  InvokeId      _invokeId;
  bool          _hasInvId;

  TComponentIndicationPrimitive(IKind_e use_kind)
    : _iKind(use_kind), _dlgId(0), _invokeId(0), _hasInvId(false)
  { }
};

// --------------------------------------------------------------------
// -- Indications generated by Component Sublayer of local TCProvider:
// --------------------------------------------------------------------

//Localy invocation is timed out (no result/error received).
//NOTE: InvokeId is mandatory!
class TC_L_Cancel_Ind : public TComponentIndicationPrimitive { 
protected:
  TC_L_Cancel_Ind() : TComponentIndicationPrimitive(indLCancel)
  { }

public:
  ~TC_L_Cancel_Ind()
  { }
};


//TCProvider reports receiption of unacceptable/corrupted component.
//NOTE: InvokeId is optional, 
//      It's set only if RejectProblem isn't a GeneralProblem_e
class TC_L_Reject_Ind : public TComponentIndicationPrimitive {
protected:
  RejectProblem   _rejProblem;

  TC_L_Reject_Ind() : TComponentIndicationPrimitive(indLReject)
  { }

public:
  ~TC_L_Reject_Ind()
  { }

  const RejectProblem & getProblem(void) const { return _rejProblem; }
};

}}

#endif /* __EYELINE_TCAP_TCOMPONENTINDICATIONPRIMITIVES_HPP__ */

