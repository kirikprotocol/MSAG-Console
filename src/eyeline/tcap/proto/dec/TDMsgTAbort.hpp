/* ************************************************************************* *
 * TCAP Abort Message Decoder.
 * ************************************************************************* */
#ifndef __EYELINE_TCAP_PROTO_DEC_TABORT_HPP
#ident "@(#)$Id$"
#define __EYELINE_TCAP_PROTO_DEC_TABORT_HPP

#include "eyeline/tcap/proto/TMsgAbort.hpp"

#include "eyeline/tcap/proto/dec/TDPAbortCause.hpp"
#include "eyeline/tcap/proto/dec/TDTransactionId.hpp"
#include "eyeline/tcap/proto/dec/TDDialoguePortion.hpp"

namespace eyeline {
namespace tcap {
namespace proto {
namespace dec {

/* AbortReason type is defined in IMPLICIT tagging environment as follow:
AbortReason ::= CHOICE {
    p-abortCause  P-AbortCause,
    u-abortCause  DialoguePortion
}
-- NOTE - When the Abort Message is generated by the Transaction sublayer,
-- a p-Abort Cause may be present. The u-abortCause may be generated by the
-- component sublayer in which case it is an ABRT APDU, or by the TC-User in
-- which case it could be either an ABRT APDU or data in some user-defined
-- abstract syntax or AARE APDU as a response to received TBegin.
*/
class TDAbortReason : public asn1::ber::DecoderOfChoice_T<2> {
protected:
  using asn1::ber::DecoderOfChoice_T<2>::setAlternative;

  class AltDecoder : public 
    asn1::ber::ChoiceOfDecoders2_T<TDPAbortCause, TDDialoguePortion> {
  public:
    AltDecoder()
      : asn1::ber::ChoiceOfDecoders2_T<TDPAbortCause, TDDialoguePortion>()
    { }
    ~AltDecoder()
    { }
    Alternative_T<TDPAbortCause>      pCause() { return alternative0(); }
    Alternative_T<TDDialoguePortion>  uCause() { return alternative1(); }

    ConstAlternative_T<TDPAbortCause>     pCause() const { return alternative0(); }
    ConstAlternative_T<TDDialoguePortion> uCause() const { return alternative1(); }
  };


/* ----------------------------------------------- */
  proto::TAbortReason * _dVal;
  AltDecoder            _altDec;
/* ----------------------------------------------- */
  //Initializes ElementDecoder of this type;
  void construct(void);

  // ----------------------------------------
  // -- DecoderOfChoiceAC interface methods
  // ----------------------------------------
  //If necessary, allocates alternative and initializes associated TypeDecoderAC
  virtual TypeDecoderAC * prepareAlternative(uint16_t unique_idx) /*throw(std::exception)*/;

public:
  class TaggingOptions : public asn1::ber::TaggingOptions {
  public:
    TaggingOptions() : asn1::ber::TaggingOptions()
    {
      addTagging(TDPAbortCause::_typeTag, asn1::ASTagging::tagsIMPLICIT);
      addTagging(TDDialoguePortion::_typeTag, asn1::ASTagging::tagsIMPLICIT);
    }
  };

  static const TaggingOptions _tagOptions;

  explicit TDAbortReason(asn1::TransferSyntax::Rule_e use_rule = asn1::TransferSyntax::ruleBER)
    : asn1::ber::DecoderOfChoice_T<2>(use_rule), _dVal(0)
  {
    construct();
  }
  explicit TDAbortReason(proto::TAbortReason & use_val,
                         asn1::TransferSyntax::Rule_e use_rule = asn1::TransferSyntax::ruleBER)
    : asn1::ber::DecoderOfChoice_T<2>(use_rule), _dVal(&use_val)
  {
    construct();
  }
  //
  ~TDAbortReason()
  { }

  void setValue(proto::TAbortReason & use_val)
  {
    _dVal = &use_val;
    _chcDec.reset();
  }
};

/* Abort message is defined in IMPLICIT tagging environment as follow:
Abort ::= [APPLICATION 7] SEQUENCE {
  dtid    DestTransactionID,
  reason  AbortReason OPTIONAL
} */
class TDMsgTAbort : public asn1::ber::DecoderOfSequence_T<2> {
protected:
  proto::TMsgAbort *  _dVal;
  /* -- */
  TDDestTransactionId _dstTrId;
   //Optionals:
  asn1::ber::DecoderProducer_T<TDAbortReason> _reason;

  //Initializes ElementDecoder of this type;
  void construct(void);

  // ----------------------------------------
  // -- DecoderOfStructAC interface methods
  // ----------------------------------------
  //If necessary, allocates optional element and initializes associated TypeDecoderAC
  virtual TypeDecoderAC * prepareAlternative(uint16_t unique_idx) /*throw(std::exception) */;

public:
  static const asn1::ASTag _typeTag; //[APPLICATION 7] IMPLICIT

  explicit TDMsgTAbort(asn1::TransferSyntax::Rule_e use_rule = asn1::TransferSyntax::ruleBER)
    : asn1::ber::DecoderOfSequence_T<2>(_typeTag, asn1::ASTagging::tagsIMPLICIT, use_rule)
    , _dVal(0), _dstTrId(use_rule)
  {
    construct();
  }
  explicit TDMsgTAbort(proto::TMsgAbort & use_val,
                       asn1::TransferSyntax::Rule_e use_rule = asn1::TransferSyntax::ruleBER)
    : asn1::ber::DecoderOfSequence_T<2>(_typeTag, asn1::ASTagging::tagsIMPLICIT, use_rule)
    , _dVal(&use_val), _dstTrId(use_rule)
  {
    construct();
  }
  //
  ~TDMsgTAbort()
  { }

  void setValue(proto::TMsgAbort & use_val)
  {
    _dVal = &use_val;
    _seqDec.reset();
  }
};

}}}}

#endif/* __EYELINE_TCAP_PROTO_DEC_TABORT_HPP */

