/* ************************************************************************* *
 * TCAP Abort Message Decoder.
 * ************************************************************************* */
#ifndef __EYELINE_TCAP_PROTO_DEC_TABORT_HPP
#ident "@(#)$Id$"
#define __EYELINE_TCAP_PROTO_DEC_TABORT_HPP

#include "eyeline/tcap/proto/TMsgAbort.hpp"

#include "eyeline/tcap/proto/dec/TDPAbortCause.hpp"
#include "eyeline/tcap/proto/dec/TDTransactionId.hpp"
#include "eyeline/tcap/proto/dec/TDDialoguePortion.hpp"

namespace eyeline {
namespace tcap {
namespace proto {
namespace dec {

/* AbortReason type is defined in IMPLICIT tagging environment as follow:
AbortReason ::= CHOICE {
    p-abortCause  P-AbortCause,
    u-abortCause  DialoguePortion
}
-- NOTE - When the Abort Message is generated by the Transaction sublayer,
-- a p-Abort Cause may be present. The u-abortCause may be generated by the
-- component sublayer in which case it is an ABRT APDU, or by the TC-User in
-- which case it could be either an ABRT APDU or data in some user-defined
-- abstract syntax or AARE APDU as a response to received TBegin.
*/
class TDAbortReason : public asn1::ber::DecoderOfChoice_T<2> {
private:
  using asn1::ber::DecoderOfChoice_T<2>::setAlternative;

  union {
    void * _aligner;
    uint8_t _buf[eyeline::util::MaxSizeOf2_T<TDPAbortCause, TDDialoguePortion>::VALUE];
  } _memAlt;

protected:
  proto::TAbortReason * _dVal;
  /* -- */
  proto::TAbortReason::Kind_e _altKind;
  union {
    asn1::ber::TypeDecoderAC * _ptr;
    TDPAbortCause *           _pCause;
    TDDialoguePortion *       _uCause;
  } _altDec;

  //
  void cleanUp(void);
  //Initializes ElementDecoder of this type;
  void construct(void);

  // ----------------------------------------
  // -- DecoderOfChoiceAC interface methods
  // ----------------------------------------
  //If necessary, allocates alternative and initializes associated TypeDecoderAC
  virtual TypeDecoderAC * prepareAlternative(uint16_t unique_idx) /*throw(std::exception)*/;

public:
  class TaggingOptions : public asn1::ber::TaggingOptions {
  public:
    TaggingOptions() : asn1::ber::TaggingOptions()
    {
      addTagging(TDPAbortCause::_typeTag, asn1::ASTagging::tagsIMPLICIT);
      addTagging(TDDialoguePortion::_typeTag, asn1::ASTagging::tagsIMPLICIT);
    }
  };

  static const TaggingOptions _tagOptions;

  explicit TDAbortReason(TSGroupBER::Rule_e use_rule = TSGroupBER::ruleBER)
    : asn1::ber::DecoderOfChoice_T<2>(TSGroupBER::getTSRule(use_rule))
    , _dVal(0), _altKind(proto::TAbortReason::causeNone)
  {
    _memAlt._aligner = _altDec._ptr = 0;
    construct();
  }
  TDAbortReason(proto::TAbortReason & use_val,
                TSGroupBER::Rule_e use_rule = TSGroupBER::ruleBER)
    : asn1::ber::DecoderOfChoice_T<2>(TSGroupBER::getTSRule(use_rule))
    , _dVal(&use_val), _altKind(proto::TAbortReason::causeNone)
  {
    _memAlt._aligner = _altDec._ptr = 0;
    construct();
  }
  //
  ~TDAbortReason()
  {
    cleanUp();
  }

  void setValue(proto::TAbortReason & use_val)
  {
    _dVal = &use_val;
    _chcDec.reset();
  }
};

/* Abort message is defined in IMPLICIT tagging environment as follow:
Abort ::= [APPLICATION 7] SEQUENCE {
  dtid    DestTransactionID,
  reason  AbortReason OPTIONAL
} */
class TDMsgTAbort : public asn1::ber::DecoderOfSequence_T<2> {
private:
  using asn1::ber::DecoderOfSequence_T<2>::setField;

  union {
    void *  _aligner;
    uint8_t _buf[sizeof(TDAbortReason)];
  } _memReason;

protected:
  proto::TMsgAbort *  _dVal;
  /* -- */
  TDDestTransactionId _dstTrId;
  TDAbortReason *     _reason; //optional

  void cleanUp(void)
  {
    if (_reason) {
      _reason->~TDAbortReason();
      _reason = NULL;
    }
  }

  //Initializes ElementDecoder of this type;
  void construct(void);

  // ----------------------------------------
  // -- DecoderOfStructAC interface methods
  // ----------------------------------------
  //If necessary, allocates optional element and initializes associated TypeDecoderAC
  virtual TypeDecoderAC * prepareAlternative(uint16_t unique_idx) /*throw(std::exception) */;
  //Performs actions upon successfull optional element decoding
  virtual void markDecodedOptional(uint16_t unique_idx) /*throw() */ { return; }

public:
  static const asn1::ASTag _typeTag; //[APPLICATION 7] IMPLICIT

  explicit TDMsgTAbort(TSGroupBER::Rule_e use_rule = TSGroupBER::ruleBER)
    : asn1::ber::DecoderOfSequence_T<2>(_typeTag, asn1::ASTagging::tagsIMPLICIT,
                                        TSGroupBER::getTSRule(use_rule))
    , _dVal(0), _dstTrId(use_rule), _reason(0)
  {
    _memReason._aligner = 0;
    construct();
  }
  TDMsgTAbort(proto::TMsgAbort & use_val,
          TSGroupBER::Rule_e use_rule = TSGroupBER::ruleBER)
    : asn1::ber::DecoderOfSequence_T<2>(_typeTag, asn1::ASTagging::tagsIMPLICIT,
                                        TSGroupBER::getTSRule(use_rule))
    , _dVal(&use_val), _dstTrId(use_rule), _reason(0)
  {
    _memReason._aligner = 0;
    construct();
  }
  //
  ~TDMsgTAbort()
  {
    cleanUp();
  }

  void setValue(proto::TMsgAbort & use_val)
  {
    _dVal = &use_val;
    _seqDec.reset();
  }
};

}}}}

#endif/* __EYELINE_TCAP_PROTO_DEC_TABORT_HPP */

