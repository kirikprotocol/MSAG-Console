package $var msg.package$;

import mobi.eyeline.protocol.framework.*;
import mobi.eyeline.cimdapi.utils.*;
import mobi.eyeline.cimdapi.*;
import java.io.IOException;
import mobi.eyeline.utils.ByteBuffer;

$macro basetype$$pack$
$select %1$
$case string$String
$case int$int
$case bool$boolean
$case hex$byte[]
$case enum$$var field.typename$
$-select$
$-pack$$-macro$

$macro type$$pack$
$expand basetype %1$$if field.array$[]$-if$
$-pack$$-macro$

$if message.haveparent$
$setbool message.innerMessage true$
$-if$
/**
 * This class was generated by protogen, do not edit it
 */
public class $var message.name$$if message.haveparent$ extends $var message.parent$$else$ $if !message.innerMessage$extends CIMDPDU$-if$$-if$ {
$if !message.innerMessage$
$if message.response$
  public boolean isRequest() {
    return false;
  }
  public boolean isResponse() {
    return true;
  }
$else$
  public boolean isRequest() {
    return true;
  }
  public boolean isResponse() {
    return false;
  }
$-if$
$-if$
$foreach field$
  $expand type field.type$ $var field.name$;
  boolean $var field.name$Flag=false;
$-foreach$

$setbool haveArgs false$

  public $var message.name$($pack$
$if message.haveparent$
$if message.response$
Integer seqNum
$setbool haveArgs true$
$foreach parent.field$, $expand type field.type$ $var field.name$$setbool haveArgs true$$-foreach$
$foreach field$, $expand type field.type$ $var field.name$$setbool haveArgs true$$-foreach$
$else$
$foreach parent.field$$if haveArgs$,$-if$ $expand type field.type$ $var field.name$$setbool haveArgs true$$-foreach$
$foreach field$$if haveArgs$,$-if$ $expand type field.type$ $var field.name$$setbool haveArgs true$$-foreach$
$-if$
$else$
$if !message.innerMessage$$if message.response$Integer seqNum$setbool haveArgs true$$-if$$-if$
$foreach field$
$if haveArgs$, $-if$
$setbool haveArgs true$
$expand type field.type$$var field.name$
$-foreach$
$-if$
$-pack$) {

$if message.haveparent$
$if message.response$
    super( seqNum$foreach parent.field$, $var field.name$$-foreach$);
$else$
    super( $foreach parent.field$$if !parent.field.first$,$-if$ $var field.name$$-foreach$);
$-if$
$-if$
$if !message.innerMessage$
$if message.response$
    setSequenceNumber(seqNum);
$-if$
$-if$
$foreach field$
    set$var field.name:ucf$($var field.name$);
$-foreach$
  }

$if haveArgs$
  public $var message.name$() {
$if message.haveparent$
    super();
$-if$
  }
$-if$

$if message.havetag$
  public int getTag() {
    return $var message.tag$;
  }
$-if$

  public void clear() {
$if message.haveparent$
    super.clear();
$-if$
$foreach field$
    $var field.name$Flag=false;
$-foreach$
  }
  
  public void debug(StringBuilder sb) {
$if message.haveparent$
    super.debug(sb);
    sb.append(';');
$-if$
$if !message.innerMessage$
    sb.append("seqNum=").append(getSequenceNumber()).append(';');
$-if$
$foreach field$
$if field.array$
    if($var field.name$Flag) {
      sb.append("$var field.name$").append('[');
      for($expand basetype field.type$ value : $var field.name$) {
$select field.type$
$case nested$
        sb.append(value.toString()).append(',');
$case enum$
        sb.append(value.toString()).append(',');
$default$
        sb.append(value).append(',');
$-select$
      }
      sb.setLength(sb.length()-1);
      sb.append(']')$if !field.last$.append(';')$-if$;
    }
$else$
    if($var field.name$Flag) { $pack$sb.append("$var field.name$=")
$select field.type$
      $case int$.append($var field.name$)$if !field.last$.append(';')$-if$;
      $case string$.append($var field.name$)$if !field.last$.append(';')$-if$;
      $case bool$.append($var field.name$)$if !field.last$.append(';')$-if$;
      $case hex$.append(mobi.eyeline.utils.Hex.string($var field.name$))$if !field.last$.append(';')$-if$;
      $case enum$.append($var field.name$)$if !field.last$.append(';')$-if$;
      $case nested$.append('('); $var field.name$.debug(sb); sb.append(')')$if !field.last$.append(';')$-if$;
$-select$
$-pack$ }
$-if$
$-foreach$
  }
  
  public String toString() {
    StringBuilder sb=new StringBuilder(128);
    sb.append("$var message.name$:");
    debug(sb);
    return sb.toString();
  }

  public String toInfoString() {
    // todo think about info out
    StringBuilder sb=new StringBuilder(128);
    sb.append("$var message.name$:");
    debug(sb);
    return sb.toString();
  }

$foreach field$
  public $expand type field.type$ get$var field.name:ucf$() throws AccessToUndefinedFieldException {
    if(!$var field.name$Flag) throw new AccessToUndefinedFieldException("$var field.name$");
    return $var field.name$;
  }

  public void set$var field.name:ucf$($expand type field.type$ $var field.name$) {
$select field.type$
$case int$
    this.$var field.name$ = $var field.name$;
    this.$var field.name$Flag = true;
$case bool$
    this.$var field.name$ = $var field.name$;
    this.$var field.name$Flag = true;
$case string$
    if( $var field.name$ == null ) {
      this.$var field.name$Flag = false;
    } else {
      this.$var field.name$ = $var field.name$;
      this.$var field.name$Flag = true;
    }
$case hex$
    if( $var field.name$ == null ) {
      this.$var field.name$ = null;
      this.$var field.name$Flag = false;
    } else {
      this.$var field.name$ = $var field.name$;
      this.$var field.name$Flag = true;
    }
$case enum$
    if( $var field.name$ == null ) {
      this.$var field.name$ = null;
      this.$var field.name$Flag = false;
    } else {
      this.$var field.name$ = $var field.name$;
      this.$var field.name$Flag = true;
    }
$case nested$
    if( $var field.name$ == null ) {
      this.$var field.name$ = null;
      this.$var field.name$Flag = false;
    } else {
      this.$var field.name$ = $var field.name$;
      this.$var field.name$Flag = true;
    }
$-select$
  }
  
  public boolean has$var field.name:ucf$() {
    return $var field.name$Flag;
  }
$-foreach$

  public void encode(ByteBuffer writer) throws IOException {
$if message.haveparent$
    super.encode(writer);
$-if$
$foreach field$
    if($var field.name$Flag) {
      Proto.appendParam(writer, $var field.tag$, 3); // tag id
      writer.append(Proto.DELIMITER);
$select field.type$
$case int$
      writer.appendString(String.valueOf($var field.name$), Proto.ascii);
$case string$
      writer.appendString($var field.name$, Proto.ascii);
$case bool$
      writer.appendString($var field.name$?"1":"0", Proto.ascii);
$case hex$
      writer.appendString(mobi.eyeline.utils.Hex.stringCompact($var field.name$), Proto.ascii);
$case enum$
$select field.valuetype$
$case int$
      writer.appendString(String.valueOf($var field.name$), Proto.ascii);
$case string$
      writer.appendString($var field.name$.getValue(), Proto.ascii);
$-select$
$-select$
      writer.append(Proto.TAB);
    } $if field.mandatory$ else throw new MissingMandatoryFieldException("$var field.name$");$-if$
$-foreach$
  }

  public void decode(ByteBuffer reader) throws IOException {
$if message.haveparent$
    super.decode(reader);
$-if$
    int tag = 0;
    while( true ) {
      try {
        tag = Proto.removeIntParam(reader);
      } catch(EndOfPacketException e) {
        break;
      }
      switch( tag ) {
$foreach field$
        case $var field.tag$: {
$select field.type$
$case string$
          $var field.name$ = Proto.removeStringParam(reader);
$case int$
          $var field.name$ = Proto.removeIntParam(reader);
$case bool$
          $var field.name$ = Proto.removeStringParam(reader).equals("1");
$case hex$
          $var field.name$ = mobi.eyeline.utils.Hex.decodeDump(Proto.removeStringParam(reader)).removeBytes();
$case enum$
$select field.valuetype$
$case string$
          $var field.name$ = $var field.typename$.valueOf(Proto.removeStringParam(reader));
$case int$
          $var field.name$ = $var field.typename$.valueOf(Proto.removeIntParam(reader));
$-select$
$-select$
          $var field.name$Flag=true;
        } break;
$-foreach$
        default:
          $pack$throw new IOException(
	    "unknown tagId: "+tag
	    $if !message.innerMessage$
	      +" seqnum: "+getSequenceNumber()
	    $-if$
	    +" msg: "+$var message.name$.class.getName());
	    $-pack$
      }
    }
  }
}
