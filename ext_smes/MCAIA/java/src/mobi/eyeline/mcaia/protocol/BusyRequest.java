package mobi.eyeline.mcaia.protocol;

import mobi.eyeline.protogen.framework.*;
import java.io.IOException;



/**
 * This class was generated by protogen, do not edit it
 */
public class BusyRequest implements PDU {
  int seqNum;
  Connection connection;
 
  String caller;
  boolean callerFlag=false;
  String called;
  boolean calledFlag=false;
  long date;
  boolean dateFlag=false;
  byte cause;
  boolean causeFlag=false;
  byte flags;
  boolean flagsFlag=false;

  public BusyRequest() {
  }
 

  public BusyRequest(int seqNum, String caller , String called , long date , byte cause , byte flags) {
 
    this.seqNum = seqNum;
    this.caller = caller;
    this.callerFlag = true;
    this.called = called;
    this.calledFlag = true;
    this.date = date;
    this.dateFlag = true;
    this.cause = cause;
    this.causeFlag = true;
    this.flags = flags;
    this.flagsFlag = true;
  }
 
  public int getTag() {
    return 1;
  }

  public void clear() {
    callerFlag=false;
    calledFlag=false;
    dateFlag=false;
    causeFlag=false;
    flagsFlag=false;
  }
 
  public void debug(StringBuilder sb) {
    sb.append("seqNum=").append(seqNum).append(';');

    if(callerFlag) { sb.append("caller=") .append(caller).append(';'); }

    if(calledFlag) { sb.append("called=") .append(called).append(';'); }

    if(dateFlag) { sb.append("date=") .append(date).append(';'); }

    if(causeFlag) { sb.append("cause=") .append(((int)cause)&0xff).append(';'); }

    if(flagsFlag) { sb.append("flags=") .append(((int)flags)&0xff); }
  }
 
  public String toString() {
    StringBuilder sb=new StringBuilder(128);
    sb.append("BusyRequest:");
    debug(sb);
    return sb.toString();
  }

  public int getSeqNum() {
    return seqNum;
  }

  public void setSeqNum(int seqNum) {
    this.seqNum = seqNum;
  }
 
  public int assignSeqNum() {
    seqNum = PDU.seqGenerator.incrementAndGet();
    return seqNum;
  }
 
  public Connection getConnection() {
    return connection;
  }
 
  public void setConnection( Connection con ) {
    connection = con;
  }

  public String getCaller() throws AccessToUndefinedFieldException {
    if(!callerFlag) throw new AccessToUndefinedFieldException("caller");
    return caller;
  }

  public void setCaller(String caller) {
    this.caller = caller;
    this.callerFlag = true;
  }
 
  public boolean hasCaller() {
    return callerFlag;
  }
  public String getCalled() throws AccessToUndefinedFieldException {
    if(!calledFlag) throw new AccessToUndefinedFieldException("called");
    return called;
  }

  public void setCalled(String called) {
    this.called = called;
    this.calledFlag = true;
  }
 
  public boolean hasCalled() {
    return calledFlag;
  }
  public long getDate() throws AccessToUndefinedFieldException {
    if(!dateFlag) throw new AccessToUndefinedFieldException("date");
    return date;
  }

  public void setDate(long date) {
    this.date = date;
    this.dateFlag = true;
  }
 
  public boolean hasDate() {
    return dateFlag;
  }
  public byte getCause() throws AccessToUndefinedFieldException {
    if(!causeFlag) throw new AccessToUndefinedFieldException("cause");
    return cause;
  }

  public void setCause(byte cause) {
    this.cause = cause;
    this.causeFlag = true;
  }
 
  public boolean hasCause() {
    return causeFlag;
  }
  public byte getFlags() throws AccessToUndefinedFieldException {
    if(!flagsFlag) throw new AccessToUndefinedFieldException("flags");
    return flags;
  }

  public void setFlags(byte flags) {
    this.flags = flags;
    this.flagsFlag = true;
  }
 
  public boolean hasFlags() {
    return flagsFlag;
  }

  public void encode(BufferWriter writer) throws IOException {
    if(callerFlag) {
      writer.writeTag(1); // tag id
      writer.writeStringLV(caller);
    }  else throw new MissingMandatoryFieldException("caller");
    if(calledFlag) {
      writer.writeTag(2); // tag id
      writer.writeStringLV(called);
    }  else throw new MissingMandatoryFieldException("called");
    if(dateFlag) {
      writer.writeTag(3); // tag id
      writer.writeLongLV(date);
    }  else throw new MissingMandatoryFieldException("date");
    if(causeFlag) {
      writer.writeTag(4); // tag id
      writer.writeByteLV(cause);
    }  else throw new MissingMandatoryFieldException("cause");
    if(flagsFlag) {
      writer.writeTag(5); // tag id
      writer.writeByteLV(flags);
    }  else throw new MissingMandatoryFieldException("flags");
    writer.writeTag(0xFF); // end message tag
  }

  public void decode(BufferReader reader) throws IOException {
    while( true ) {
      int tag = reader.readTag();
      if( tag == 0xFF ) break;
      switch( tag ) {
        case 1: {
          caller = reader.readStringLV();
          callerFlag=true;
        } break;
        case 2: {
          called = reader.readStringLV();
          calledFlag=true;
        } break;
        case 3: {
          date = reader.readLongLV();
          dateFlag=true;
        } break;
        case 4: {
          cause = reader.readByteLV();
          causeFlag=true;
        } break;
        case 5: {
          flags = reader.readByteLV();
          flagsFlag=true;
        } break;
        default:
          throw new IOException( "unknown tagId: "+tag +" seqnum: "+seqNum +" msg: "+BusyRequest.class.getName());      }
    }
  }
}
