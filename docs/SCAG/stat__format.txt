
Формат файла статистики SMPP:

<header> = <head: 9 bytes> <version: uint16>
<stat> = <hour: uint8><min: uint8>  <routeCount:      uint32><routeRecord:     1...routeCount>
                    <servicesCount:   uint32><serviceRecord:   1...serviceCount>
                    <smeCount:   uint32><smeRecord:   1...smeCount>

<routeRecord> = <routeIdLength: uint16><routeId: routeIdLength bytes>
            <accepted:           uint32>
            <rejected:   uint32>
            <gw_rejected:      uint32>
            <delivered:         uint32>
            <failed:        uint32>
            <recieptOk:        uint32>
            <recieptFailed:        uint32>
        <errCount: uint32><errRecord: 1...errCount>
<errRecord> = <errCode: uint32><errCounter: uint32>

<serviceRecord> = <serviceIdLength: uint16><serviceId: serviceIdLength bytes>
            <accepted:           uint32>
            <rejected:   uint32>
            <gw_rejected:      uint32>
            <delivered:         uint32>
            <failed:        uint32>
        <errCount: uint32><errRecord: 1...errCount>
<errRecord> = <errCode: uint32><errCounter: uint32>

<smeRecord> = <smeIdLength: uint16><smeId: smeIdLength bytes>
            <accepted:           uint32>
            <rejected:   uint32>
            <gw_rejected:      uint32>
            <delivered:         uint32>
            <failed:        uint32>
        <errCount: uint32><errRecord: 1...errCount>
<errRecord> = <errCode: uint32><errCounter: uint32>

Формат файла статистики HTTP:

<header> = <head: 9 bytes> <version: uint16>
<stat> = <hour: uint8> <min: uint8> <routeCount:      uint32><routeRecord:     1...routeCount>
         <urlCount:   uint32><urlRecord:   1...urlCount>

<routeRecord> = <routeIdLength: uint16><routeId: routeIdLength bytes>
            <request:           uint32>
            <requestRejected:   uint32>
            <response:      uint32>
            <responseRejected:  uint32>
            <delivered:         uint32>
            <failed:        uint32>
        <errCount: uint32><errRecord: 1...errCount>
<errRecord> = <errCode: uint32><errCounter: uint32>

<urlRecord> = <urlIdLength: uint16><urlId: urlIdLength bytes>
            <request:           uint32>
            <requestRejected:   uint32>
            <response:      uint32>
            <responseRejected:  uint32>
            <delivered:         uint32>
            <failed:        uint32>
        <errCount: uint32><errRecord: 1...errCount>
<errRecord> = <errCode: uint32><errCounter: uint32>

Важные моменты:

1) Файлы генерируются SCAG автоматически в поддиректориях от указанной диры
2) Поддиректории соответствуют месяцам, имя в формате YYYY-MM (т.н. 2005-04)
3) В каждой поддиректории создаются файлы за дни в формате DD.rts
4) Минимальная гранулярность записей в файле 1 минута 
   (т.е. количество записей в одном файле 24*60 = 1440).
   ! Но, записей может быть больше или меньше:
    а) если будет использоваться запрос на сброс статистики с морды,
    б) или если произойдёт переход времени на зимнее/летнее
     Периоды могут повторяться. Каунтеры за один период должны суммироваться.
5) Последняя запись может быть не закончена (т.н. если ещё не успела сбросится).
   Если обнаружен конец файла в процессе формирования записи, то
   пишем ворнинг, а эту запись скипаем.
6) Дата и время в GMT. Не локальное !
   (и для задания периода, и для имени файла, и для поддиректорий).
7) Записи h=00 m=00 -> с 00:00 по 0001, ... ,
          h=23 m=59 -> с 23:59 по 00:00 след. дня
9) Строковые значения предваряются их длинной в 16битном поле.
