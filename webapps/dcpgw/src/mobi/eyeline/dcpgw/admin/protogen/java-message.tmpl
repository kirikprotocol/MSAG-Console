package $var msg.package$;

import mobi.eyeline.protogen.framework.*;
import java.io.IOException;

$macro basetype$$pack$
$select %1$
$case string$String
$case bool$boolean
$case byte$byte
$case int16$short
$case int32$int
$case int64$long
$case nested$$var field.typename$
$case enum$$var field.typename$
$-select$
$-pack$$-macro$

$macro type$$pack$
$expand basetype %1$$if field.array$[]$-if$
$-pack$$-macro$

$if message.haveparent$
$setbool message.innerMessage true$
$-if$
/**
 * This class was generated by protogen, do not edit it
 */
public class $var message.name$$if message.haveparent$ extends $var message.parent$$else$ $if !message.innerMessage$implements PDU$-if$$-if$ {
$if !message.innerMessage$
  int seqNum;
  Connection connection;
$-if$  
$foreach field$
  $expand type field.type$ $var field.name$;
  boolean $var field.name$Flag=false;
$-foreach$

  public $var message.name$() {
$if message.haveparent$
    super();
$-if$
  }
  

  public $var message.name$($pack$
$if message.haveparent$
int seqNum
$foreach parent.field$, $expand type field.type$ $var field.name$$-foreach$
$foreach field$, $expand type field.type$ $var field.name$$-foreach$
$else$
$if !message.innerMessage$int seqNum$-if$
$foreach field$
$if message.innerMessage$$if !field.first$, $-if$
$else$, $-if$
$expand type field.type$$var field.name$
$-foreach$
$-if$
$-pack$) {
$if message.haveparent$
    super( seqNum$foreach parent.field$, $var field.name$$-foreach$);
$-if$
$if !message.innerMessage$  
    this.seqNum = seqNum;
$-if$
$foreach field$
    this.$var field.name$ = $var field.name$;
    this.$var field.name$Flag = true;
$-foreach$
  }
  
$if message.havetag$
  public int getTag() {
    return $var message.tag$;
  }
$-if$

  public void clear() {
$if message.haveparent$
    super.clear();
$-if$
$foreach field$
    $var field.name$Flag=false;
$-foreach$
  }
  
  public void debug(StringBuilder sb) {
$if message.haveparent$
    super.debug(sb);
    sb.append(';');
$-if$
$if !message.innerMessage$
    sb.append("seqNum=").append(seqNum).append(';');
$-if$
$foreach field$
$if field.array$
    if($var field.name$Flag) {
      sb.append("$var field.name$").append('[');
      for($expand basetype field.type$ value : $var field.name$) {
$select field.type$
$case nested$
        sb.append(value.toString()).append(',');
$case enum$
        sb.append(value.toString()).append(',');
$default$
        sb.append(value).append(',');
$-select$
      }
      sb.setLength(sb.length()-1);
      sb.append(']')$if !field.last$.append(';')$-if$;
    }
$else$

    if($var field.name$Flag) { $pack$sb.append("$var field.name$=")
$select field.type$
      $case byte$.append(((int)$var field.name$)&0xff)$if !field.last$.append(';')$-if$;
      $case int16$.append($var field.name$)$if !field.last$.append(';')$-if$;
      $case int32$.append($var field.name$)$if !field.last$.append(';')$-if$;
      $case int64$.append($var field.name$)$if !field.last$.append(';')$-if$;
      $case bool$.append($var field.name$)$if !field.last$.append(';')$-if$;
      $case string$.append($var field.name$)$if !field.last$.append(';')$-if$;
      $case enum$.append($var field.name$)$if !field.last$.append(';')$-if$;
      $case nested$.append('('); $var field.name$.debug(sb); sb.append(')')$if !field.last$.append(';')$-if$;
$-select$
$-pack$ }
$-if$
$-foreach$
  }
  
  public String toString() {
    StringBuilder sb=new StringBuilder(128);
    sb.append("$var message.name$:");
    debug(sb);
    return sb.toString();
  }

$if !message.innerMessage$
  public int getSeqNum() {
    return seqNum;
  }

  public void setSeqNum(int seqNum) {
    this.seqNum = seqNum;
  }
  
  public int assignSeqNum() {
    seqNum = PDU.seqGenerator.incrementAndGet();
    return seqNum;
  }
  
  public Connection getConnection() {
    return connection;
  }
  
  public void setConnection( Connection con ) {
    connection = con;
  }
$-if$

$foreach field$
  public $expand type field.type$ get$var field.name:ucf$() throws AccessToUndefinedFieldException {
    if(!$var field.name$Flag) throw new AccessToUndefinedFieldException("$var field.name$");
    return $var field.name$;
  }

  public void set$var field.name:ucf$($expand type field.type$ $var field.name$) {
    this.$var field.name$ = $var field.name$;
    this.$var field.name$Flag = true;
  }
  
  public boolean has$var field.name:ucf$() {
    return $var field.name$Flag;
  }
$-foreach$

  public void encode(BufferWriter writer) throws IOException {
$if message.haveparent$
    super.encode(writer);
$-if$
$foreach field$
    if($var field.name$Flag) {
      writer.writeTag($var field.tag$); // tag id
$if field.array$
      int pos=writer.size();
      writer.writeLength(0);
      int off=writer.size();
      for($expand basetype field.type$ v:$var field.name$)
      {
$select field.type$
$case bool$
        writer.append(v?1:0);
$case byte$
        writer.appendByte(v);
$case int16$
        writer.appendShort(v);
$case int32$
        writer.appendInt(v);
$case int64$
        writer.appendLong(v);
$case string$
        writer.writeStringLV(v);
$case nested$
        v.encode(writer);
$case enum$
$select field.valuetype$
$case byte$
        writer.appendByte(v.getValue());
$case int16$
        writer.appendShort(v.getValue());
$case int32$
        writer.appendInt(v.getValue());
$case int64$
        writer.appendLong(v.getValue());
$case string$
        writer.writeStringLV(v.getValue());
$-select$
$-select$
      }
      writer.replaceLength((writer.size()-off), pos);
$else$
$select field.type$
$case bool$
      writer.writeBoolLV($var field.name$);
$case byte$
      writer.writeByteLV($var field.name$);
$case int16$
      writer.writeShortLV($var field.name$);
$case int32$
      writer.writeIntLV($var field.name$);
$case int64$
      writer.writeLongLV($var field.name$);
$case string$
      writer.writeStringLV($var field.name$);
$case nested$
      {
        int pos = writer.size();
        writer.writeLength(0);
        int off = writer.size();
        $var field.name$.encode(writer);
        writer.replaceLength((writer.size()-off), pos);
      }
$case enum$
$select field.valuetype$
$case byte$
      writer.writeByteLV($var field.name$.getValue());
$case int16$
      writer.writeShortLV($var field.name$.getValue());
$case int32$
      writer.writeIntLV($var field.name$.getValue());
$case int64$
      writer.writeLongLV($var field.name$.getValue());
$case string$
      writer.writeStringLV($var field.name$.getValue());
$-select$
$-select$
$-if$
    } $if field.mandatory$ else throw new MissingMandatoryFieldException("$var field.name$");$-if$
$-foreach$
    writer.writeTag(0xFF); // end message tag
  }

  public void decode(BufferReader reader) throws IOException {
$if message.haveparent$
    super.decode(reader);
$-if$
    while( true ) {
      int tag = reader.readTag();
      if( tag == 0xFF ) break;
      switch( tag ) {
$foreach field$
        case $var field.tag$: {
$if field.array$
$select field.type$
$case byte$
          int sz=reader.readLength();
          $var field.name$ = new byte[sz];
          for(int i=0;i<sz;i++)$var field.name$[i]=(byte)reader.remove();
$case int16$
          int sz=reader.readLength()/2;
          $var field.name$ = new short[sz];
          for(int i=0;i<sz;i++)$var field.name$[i]=reader.removeShort();
$case int32$
          int sz=reader.readLength()/4;
          $var field.name$ = new int[sz];
          for(int i=0;i<sz;i++)$var field.name$[i]=reader.removeInt();
$case int64$
          int sz=reader.readLength()/8;
          $var field.name$ = new long[sz];
          for(int i=0;i<sz;i++)$var field.name$[i]=reader.removeLong();
$case bool$
          int sz=reader.readLength();
          $var field.name$ = new boolean[sz];
          for(int i=0;i<sz;i++)$var field.name$[i]=reader.remove()==1;
$case string$
          int sz=reader.readLength();
          java.util.ArrayList<String> arr=new java.util.ArrayList<String>();
          int startOff=reader.offset();
          while(reader.offset()<startOff+sz) {
            arr.add(reader.readStringLV()); 
          }
          $var field.name$=new String[arr.size()];
          arr.toArray($var field.name$);
$case nested$
          int sz=reader.readLength();
          java.util.ArrayList<$var field.typename$> arr=new java.util.ArrayList<$var field.typename$>();
          int startOff=reader.offset();
          while(reader.offset()<startOff+sz) {
            $var field.typename$ item=new $var field.typename$();
            item.decode(reader);
            arr.add(item); 
          }
          $var field.name$=new $var field.typename$[arr.size()];
          arr.toArray($var field.name$);
$case enum$
$select field.valuetype$
$case byte$
          int sz=reader.readLength();
          $var field.name$ = new $var field.typename$[sz];
          for(int i=0;i<sz;i++)$var field.name$[i]=$var field.typename$.valueOf((byte)reader.remove());
$case int16$
          int sz=reader.readLength()/2;
          $var field.name$ = new $var field.typename$[sz];
          for(int i=0;i<sz;i++)$var field.name$[i]=$var field.typename$.valueOf(reader.removeShort());
$case int32$
          int sz=reader.readLength()/4;
          $var field.name$ = new $var field.typename$[sz];
          for(int i=0;i<sz;i++)$var field.name$[i]=$var field.typename$.valueOf(reader.removeInt());
$case int64$
          int sz=reader.readLength()/8;
          $var field.name$ = new $var field.typename$[sz];
          for(int i=0;i<sz;i++)$var field.name$[i]=$var field.typename$.valueOf(reader.removeLong());
$case string$
          int sz=reader.readLength();
          java.util.ArrayList<String> arr=new java.util.ArrayList<String>();
          int startOff=reader.offset();
          while(reader.offset()<startOff+sz) {
            arr.add(reader.readStringLV()); 
          }
          $var field.name$=new $var field.typename$[arr.size()];
          int idx=0;
          for(String v:arr) {
            $var field.name$[idx++]=$var field.typename$.valueOf(v);
          }
$-select$
$-select$
$else$
$select field.type$
$case string$
          $var field.name$ = reader.readStringLV();
$case byte$
          $var field.name$ = reader.readByteLV();
$case int16$
          $var field.name$ = reader.readShortLV();
$case int32$
          $var field.name$ = reader.readIntLV();
$case int64$
          $var field.name$ = reader.readLongLV();
$case bool$
          $var field.name$ = reader.readBoolLV();
$case nested$
          $var field.name$ = new $var field.typename$();
          int sz=reader.readLength();
          $var field.name$.decode(reader);
$case enum$
$select field.valuetype$
$case string$
          $var field.name$ = $var field.typename$.valueOf(reader.readStringLV());
$case byte$
          $var field.name$ = $var field.typename$.valueOf(reader.readByteLV());
$case int16$
          $var field.name$ = $var field.typename$.valueOf(reader.readShortLV());
$case int32$
          $var field.name$ = $var field.typename$.valueOf(reader.readIntLV());
$case int64$
          $var field.name$ = $var field.typename$.valueOf(reader.readLongLV());
$-select$
$-select$
$-if$
          $var field.name$Flag=true;
        } break;
$-foreach$
        default:
          $pack$throw new IOException(
	    "unknown tagId: "+tag
	    $if !message.innerMessage$
	      +" seqnum: "+seqNum
	    $-if$
	    +" msg: "+$var message.name$.class.getName());
	    $-pack$
      }
    }
  }
}
