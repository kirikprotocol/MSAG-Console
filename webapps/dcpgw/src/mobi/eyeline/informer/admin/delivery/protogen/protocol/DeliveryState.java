package mobi.eyeline.informer.admin.delivery.protogen.protocol;

import mobi.eyeline.protogen.framework.*;
import java.io.IOException;



/**
 * This class was generated by protogen, do not edit it
 */
public class DeliveryState  {
 
  DeliveryStatus status;
  boolean statusFlag=false;
  String date;
  boolean dateFlag=false;

  public DeliveryState() {
  }
 

  public DeliveryState(DeliveryStatus status , String date) {
    this.status = status;
    this.statusFlag = true;
    this.date = date;
    this.dateFlag = true;
  }
 

  public void clear() {
    statusFlag=false;
    dateFlag=false;
  }
 
  public void debug(StringBuilder sb) {

    if(statusFlag) { sb.append("status=") .append(status).append(';'); }

    if(dateFlag) { sb.append("date=") .append(date); }
  }
 
  public String toString() {
    StringBuilder sb=new StringBuilder(128);
    sb.append("DeliveryState:");
    debug(sb);
    return sb.toString();
  }


  public DeliveryStatus getStatus() throws AccessToUndefinedFieldException {
    if(!statusFlag) throw new AccessToUndefinedFieldException("status");
    return status;
  }

  public void setStatus(DeliveryStatus status) {
    this.status = status;
    this.statusFlag = true;
  }
 
  public boolean hasStatus() {
    return statusFlag;
  }
  public String getDate() throws AccessToUndefinedFieldException {
    if(!dateFlag) throw new AccessToUndefinedFieldException("date");
    return date;
  }

  public void setDate(String date) {
    this.date = date;
    this.dateFlag = true;
  }
 
  public boolean hasDate() {
    return dateFlag;
  }

  public void encode(BufferWriter writer) throws IOException {
    if(statusFlag) {
      writer.writeTag(1); // tag id
      writer.writeByteLV(status.getValue());
    }  else throw new MissingMandatoryFieldException("status");
    if(dateFlag) {
      writer.writeTag(2); // tag id
      writer.writeStringLV(date);
    } 
    writer.writeTag(0xFF); // end message tag
  }

  public void decode(BufferReader reader) throws IOException {
    while( true ) {
      int tag = reader.readTag();
      if( tag == 0xFF ) break;
      switch( tag ) {
        case 1: {
          status = DeliveryStatus.valueOf(reader.readByteLV());
          statusFlag=true;
        } break;
        case 2: {
          date = reader.readStringLV();
          dateFlag=true;
        } break;
        default:
          throw new IOException( "unknown tagId: "+tag +" msg: "+DeliveryState.class.getName());      }
    }
  }
}
