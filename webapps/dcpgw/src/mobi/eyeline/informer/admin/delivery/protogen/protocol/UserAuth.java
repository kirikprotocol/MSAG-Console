package mobi.eyeline.informer.admin.delivery.protogen.protocol;

import mobi.eyeline.protogen.framework.*;
import java.io.IOException;



/**
 * This class was generated by protogen, do not edit it
 */
public class UserAuth implements PDU {
  int seqNum;
  Connection connection;
 
  String userId;
  boolean userIdFlag=false;
  String password;
  boolean passwordFlag=false;

  public UserAuth() {
  }
 

  public UserAuth(int seqNum, String userId , String password) {
 
    this.seqNum = seqNum;
    this.userId = userId;
    this.userIdFlag = true;
    this.password = password;
    this.passwordFlag = true;
  }
 
  public int getTag() {
    return 11;
  }

  public void clear() {
    userIdFlag=false;
    passwordFlag=false;
  }
 
  public void debug(StringBuilder sb) {
    sb.append("seqNum=").append(seqNum).append(';');

    if(userIdFlag) { sb.append("userId=") .append(userId).append(';'); }

    if(passwordFlag) { sb.append("password=") .append(password); }
  }
 
  public String toString() {
    StringBuilder sb=new StringBuilder(128);
    sb.append("UserAuth:");
    debug(sb);
    return sb.toString();
  }

  public int getSeqNum() {
    return seqNum;
  }

  public void setSeqNum(int seqNum) {
    this.seqNum = seqNum;
  }
 
  public int assignSeqNum() {
    seqNum = PDU.seqGenerator.incrementAndGet();
    return seqNum;
  }
 
  public Connection getConnection() {
    return connection;
  }
 
  public void setConnection( Connection con ) {
    connection = con;
  }

  public String getUserId() throws AccessToUndefinedFieldException {
    if(!userIdFlag) throw new AccessToUndefinedFieldException("userId");
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
    this.userIdFlag = true;
  }
 
  public boolean hasUserId() {
    return userIdFlag;
  }
  public String getPassword() throws AccessToUndefinedFieldException {
    if(!passwordFlag) throw new AccessToUndefinedFieldException("password");
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
    this.passwordFlag = true;
  }
 
  public boolean hasPassword() {
    return passwordFlag;
  }

  public void encode(BufferWriter writer) throws IOException {
    if(userIdFlag) {
      writer.writeTag(1); // tag id
      writer.writeStringLV(userId);
    }  else throw new MissingMandatoryFieldException("userId");
    if(passwordFlag) {
      writer.writeTag(2); // tag id
      writer.writeStringLV(password);
    }  else throw new MissingMandatoryFieldException("password");
    writer.writeTag(0xFF); // end message tag
  }

  public void decode(BufferReader reader) throws IOException {
    while( true ) {
      int tag = reader.readTag();
      if( tag == 0xFF ) break;
      switch( tag ) {
        case 1: {
          userId = reader.readStringLV();
          userIdFlag=true;
        } break;
        case 2: {
          password = reader.readStringLV();
          passwordFlag=true;
        } break;
        default:
          throw new IOException( "unknown tagId: "+tag +" seqnum: "+seqNum +" msg: "+UserAuth.class.getName());      }
    }
  }
}
