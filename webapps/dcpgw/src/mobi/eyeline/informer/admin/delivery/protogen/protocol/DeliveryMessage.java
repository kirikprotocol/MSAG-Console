package mobi.eyeline.informer.admin.delivery.protogen.protocol;

import mobi.eyeline.protogen.framework.*;
import java.io.IOException;



/**
 * This class was generated by protogen, do not edit it
 */
public class DeliveryMessage  {
 
  String abonent;
  boolean abonentFlag=false;
  MessageType msgType;
  boolean msgTypeFlag=false;
  String text;
  boolean textFlag=false;
  int index;
  boolean indexFlag=false;
  String userData;
  boolean userDataFlag=false;
  MessageFlags flags;
  boolean flagsFlag=false;

  public DeliveryMessage() {
  }
 

  public DeliveryMessage(String abonent , MessageType msgType , String text , int index , String userData , MessageFlags flags) {
    this.abonent = abonent;
    this.abonentFlag = true;
    this.msgType = msgType;
    this.msgTypeFlag = true;
    this.text = text;
    this.textFlag = true;
    this.index = index;
    this.indexFlag = true;
    this.userData = userData;
    this.userDataFlag = true;
    this.flags = flags;
    this.flagsFlag = true;
  }
 

  public void clear() {
    abonentFlag=false;
    msgTypeFlag=false;
    textFlag=false;
    indexFlag=false;
    userDataFlag=false;
    flagsFlag=false;
  }
 
  public void debug(StringBuilder sb) {

    if(abonentFlag) { sb.append("abonent=") .append(abonent).append(';'); }

    if(msgTypeFlag) { sb.append("msgType=") .append(msgType).append(';'); }

    if(textFlag) { sb.append("text=") .append(text).append(';'); }

    if(indexFlag) { sb.append("index=") .append(index).append(';'); }

    if(userDataFlag) { sb.append("userData=") .append(userData).append(';'); }

    if(flagsFlag) { sb.append("flags=") .append('('); flags.debug(sb); sb.append(')'); }
  }
 
  public String toString() {
    StringBuilder sb=new StringBuilder(128);
    sb.append("DeliveryMessage:");
    debug(sb);
    return sb.toString();
  }


  public String getAbonent() throws AccessToUndefinedFieldException {
    if(!abonentFlag) throw new AccessToUndefinedFieldException("abonent");
    return abonent;
  }

  public void setAbonent(String abonent) {
    this.abonent = abonent;
    this.abonentFlag = true;
  }
 
  public boolean hasAbonent() {
    return abonentFlag;
  }
  public MessageType getMsgType() throws AccessToUndefinedFieldException {
    if(!msgTypeFlag) throw new AccessToUndefinedFieldException("msgType");
    return msgType;
  }

  public void setMsgType(MessageType msgType) {
    this.msgType = msgType;
    this.msgTypeFlag = true;
  }
 
  public boolean hasMsgType() {
    return msgTypeFlag;
  }
  public String getText() throws AccessToUndefinedFieldException {
    if(!textFlag) throw new AccessToUndefinedFieldException("text");
    return text;
  }

  public void setText(String text) {
    this.text = text;
    this.textFlag = true;
  }
 
  public boolean hasText() {
    return textFlag;
  }
  public int getIndex() throws AccessToUndefinedFieldException {
    if(!indexFlag) throw new AccessToUndefinedFieldException("index");
    return index;
  }

  public void setIndex(int index) {
    this.index = index;
    this.indexFlag = true;
  }
 
  public boolean hasIndex() {
    return indexFlag;
  }
  public String getUserData() throws AccessToUndefinedFieldException {
    if(!userDataFlag) throw new AccessToUndefinedFieldException("userData");
    return userData;
  }

  public void setUserData(String userData) {
    this.userData = userData;
    this.userDataFlag = true;
  }
 
  public boolean hasUserData() {
    return userDataFlag;
  }
  public MessageFlags getFlags() throws AccessToUndefinedFieldException {
    if(!flagsFlag) throw new AccessToUndefinedFieldException("flags");
    return flags;
  }

  public void setFlags(MessageFlags flags) {
    this.flags = flags;
    this.flagsFlag = true;
  }
 
  public boolean hasFlags() {
    return flagsFlag;
  }

  public void encode(BufferWriter writer) throws IOException {
    if(abonentFlag) {
      writer.writeTag(1); // tag id
      writer.writeStringLV(abonent);
    }  else throw new MissingMandatoryFieldException("abonent");
    if(msgTypeFlag) {
      writer.writeTag(2); // tag id
      writer.writeByteLV(msgType.getValue());
    }  else throw new MissingMandatoryFieldException("msgType");
    if(textFlag) {
      writer.writeTag(3); // tag id
      writer.writeStringLV(text);
    } 
    if(indexFlag) {
      writer.writeTag(4); // tag id
      writer.writeIntLV(index);
    } 
    if(userDataFlag) {
      writer.writeTag(5); // tag id
      writer.writeStringLV(userData);
    } 
    if(flagsFlag) {
      writer.writeTag(6); // tag id
      {
        int pos = writer.size();
        writer.writeLength(0);
        int off = writer.size();
        flags.encode(writer);
        writer.replaceLength((writer.size()-off), pos);
      }
    } 
    writer.writeTag(0xFF); // end message tag
  }

  public void decode(BufferReader reader) throws IOException {
    while( true ) {
      int tag = reader.readTag();
      if( tag == 0xFF ) break;
      switch( tag ) {
        case 1: {
          abonent = reader.readStringLV();
          abonentFlag=true;
        } break;
        case 2: {
          msgType = MessageType.valueOf(reader.readByteLV());
          msgTypeFlag=true;
        } break;
        case 3: {
          text = reader.readStringLV();
          textFlag=true;
        } break;
        case 4: {
          index = reader.readIntLV();
          indexFlag=true;
        } break;
        case 5: {
          userData = reader.readStringLV();
          userDataFlag=true;
        } break;
        case 6: {
          flags = new MessageFlags();
          int sz=reader.readLength();
          flags.decode(reader);
          flagsFlag=true;
        } break;
        default:
          throw new IOException( "unknown tagId: "+tag +" msg: "+DeliveryMessage.class.getName());      }
    }
  }
}
