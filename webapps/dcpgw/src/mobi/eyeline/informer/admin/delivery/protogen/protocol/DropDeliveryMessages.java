package mobi.eyeline.informer.admin.delivery.protogen.protocol;

import mobi.eyeline.protogen.framework.*;
import java.io.IOException;



/**
 * This class was generated by protogen, do not edit it
 */
public class DropDeliveryMessages implements PDU {
  int seqNum;
  Connection connection;
 
  int deliveryId;
  boolean deliveryIdFlag=false;
  long [] messageIds;
  boolean messageIdsFlag=false;

  public DropDeliveryMessages() {
  }
 

  public DropDeliveryMessages(int seqNum, int deliveryId , long []messageIds) {
 
    this.seqNum = seqNum;
    this.deliveryId = deliveryId;
    this.deliveryIdFlag = true;
    this.messageIds = messageIds;
    this.messageIdsFlag = true;
  }
 
  public int getTag() {
    return 37;
  }

  public void clear() {
    deliveryIdFlag=false;
    messageIdsFlag=false;
  }
 
  public void debug(StringBuilder sb) {
    sb.append("seqNum=").append(seqNum).append(';');

    if(deliveryIdFlag) { sb.append("deliveryId=") .append(deliveryId).append(';'); }
    if(messageIdsFlag) {
      sb.append("messageIds").append('[');
      for(long value : messageIds) {
        sb.append(value).append(',');
      }
      sb.setLength(sb.length()-1);
      sb.append(']');
    }
  }
 
  public String toString() {
    StringBuilder sb=new StringBuilder(128);
    sb.append("DropDeliveryMessages:");
    debug(sb);
    return sb.toString();
  }

  public int getSeqNum() {
    return seqNum;
  }

  public void setSeqNum(int seqNum) {
    this.seqNum = seqNum;
  }
 
  public int assignSeqNum() {
    seqNum = PDU.seqGenerator.incrementAndGet();
    return seqNum;
  }
 
  public Connection getConnection() {
    return connection;
  }
 
  public void setConnection( Connection con ) {
    connection = con;
  }

  public int getDeliveryId() throws AccessToUndefinedFieldException {
    if(!deliveryIdFlag) throw new AccessToUndefinedFieldException("deliveryId");
    return deliveryId;
  }

  public void setDeliveryId(int deliveryId) {
    this.deliveryId = deliveryId;
    this.deliveryIdFlag = true;
  }
 
  public boolean hasDeliveryId() {
    return deliveryIdFlag;
  }
  public long [] getMessageIds() throws AccessToUndefinedFieldException {
    if(!messageIdsFlag) throw new AccessToUndefinedFieldException("messageIds");
    return messageIds;
  }

  public void setMessageIds(long [] messageIds) {
    this.messageIds = messageIds;
    this.messageIdsFlag = true;
  }
 
  public boolean hasMessageIds() {
    return messageIdsFlag;
  }

  public void encode(BufferWriter writer) throws IOException {
    if(deliveryIdFlag) {
      writer.writeTag(1); // tag id
      writer.writeIntLV(deliveryId);
    }  else throw new MissingMandatoryFieldException("deliveryId");
    if(messageIdsFlag) {
      writer.writeTag(2); // tag id
      int pos=writer.size();
      writer.writeLength(0);
      int off=writer.size();
      for(long v:messageIds)
      {
        writer.appendLong(v);
      }
      writer.replaceLength((writer.size()-off), pos);
    }  else throw new MissingMandatoryFieldException("messageIds");
    writer.writeTag(0xFF); // end message tag
  }

  public void decode(BufferReader reader) throws IOException {
    while( true ) {
      int tag = reader.readTag();
      if( tag == 0xFF ) break;
      switch( tag ) {
        case 1: {
          deliveryId = reader.readIntLV();
          deliveryIdFlag=true;
        } break;
        case 2: {
          int sz=reader.readLength()/8;
          messageIds = new long[sz];
          for(int i=0;i<sz;i++)messageIds[i]=reader.removeLong();
          messageIdsFlag=true;
        } break;
        default:
          throw new IOException( "unknown tagId: "+tag +" seqnum: "+seqNum +" msg: "+DropDeliveryMessages.class.getName());      }
    }
  }
}
