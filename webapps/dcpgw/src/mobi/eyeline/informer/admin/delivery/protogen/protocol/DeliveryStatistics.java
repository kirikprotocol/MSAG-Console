package mobi.eyeline.informer.admin.delivery.protogen.protocol;

import mobi.eyeline.protogen.framework.*;
import java.io.IOException;



/**
 * This class was generated by protogen, do not edit it
 */
public class DeliveryStatistics  {
 
  long newMessages;
  boolean newMessagesFlag=false;
  long processMessage;
  boolean processMessageFlag=false;
  long deliveredMessages;
  boolean deliveredMessagesFlag=false;
  long failedMessage;
  boolean failedMessageFlag=false;
  long expiredMessages;
  boolean expiredMessagesFlag=false;
  long retriedMessages;
  boolean retriedMessagesFlag=false;
  long sentMessages;
  boolean sentMessagesFlag=false;

  public DeliveryStatistics() {
  }
 

  public DeliveryStatistics(long newMessages , long processMessage , long deliveredMessages , long failedMessage , long expiredMessages , long retriedMessages , long sentMessages) {
    this.newMessages = newMessages;
    this.newMessagesFlag = true;
    this.processMessage = processMessage;
    this.processMessageFlag = true;
    this.deliveredMessages = deliveredMessages;
    this.deliveredMessagesFlag = true;
    this.failedMessage = failedMessage;
    this.failedMessageFlag = true;
    this.expiredMessages = expiredMessages;
    this.expiredMessagesFlag = true;
    this.retriedMessages = retriedMessages;
    this.retriedMessagesFlag = true;
    this.sentMessages = sentMessages;
    this.sentMessagesFlag = true;
  }
 

  public void clear() {
    newMessagesFlag=false;
    processMessageFlag=false;
    deliveredMessagesFlag=false;
    failedMessageFlag=false;
    expiredMessagesFlag=false;
    retriedMessagesFlag=false;
    sentMessagesFlag=false;
  }
 
  public void debug(StringBuilder sb) {

    if(newMessagesFlag) { sb.append("newMessages=") .append(newMessages).append(';'); }

    if(processMessageFlag) { sb.append("processMessage=") .append(processMessage).append(';'); }

    if(deliveredMessagesFlag) { sb.append("deliveredMessages=") .append(deliveredMessages).append(';'); }

    if(failedMessageFlag) { sb.append("failedMessage=") .append(failedMessage).append(';'); }

    if(expiredMessagesFlag) { sb.append("expiredMessages=") .append(expiredMessages).append(';'); }

    if(retriedMessagesFlag) { sb.append("retriedMessages=") .append(retriedMessages).append(';'); }

    if(sentMessagesFlag) { sb.append("sentMessages=") .append(sentMessages); }
  }
 
  public String toString() {
    StringBuilder sb=new StringBuilder(128);
    sb.append("DeliveryStatistics:");
    debug(sb);
    return sb.toString();
  }


  public long getNewMessages() throws AccessToUndefinedFieldException {
    if(!newMessagesFlag) throw new AccessToUndefinedFieldException("newMessages");
    return newMessages;
  }

  public void setNewMessages(long newMessages) {
    this.newMessages = newMessages;
    this.newMessagesFlag = true;
  }
 
  public boolean hasNewMessages() {
    return newMessagesFlag;
  }
  public long getProcessMessage() throws AccessToUndefinedFieldException {
    if(!processMessageFlag) throw new AccessToUndefinedFieldException("processMessage");
    return processMessage;
  }

  public void setProcessMessage(long processMessage) {
    this.processMessage = processMessage;
    this.processMessageFlag = true;
  }
 
  public boolean hasProcessMessage() {
    return processMessageFlag;
  }
  public long getDeliveredMessages() throws AccessToUndefinedFieldException {
    if(!deliveredMessagesFlag) throw new AccessToUndefinedFieldException("deliveredMessages");
    return deliveredMessages;
  }

  public void setDeliveredMessages(long deliveredMessages) {
    this.deliveredMessages = deliveredMessages;
    this.deliveredMessagesFlag = true;
  }
 
  public boolean hasDeliveredMessages() {
    return deliveredMessagesFlag;
  }
  public long getFailedMessage() throws AccessToUndefinedFieldException {
    if(!failedMessageFlag) throw new AccessToUndefinedFieldException("failedMessage");
    return failedMessage;
  }

  public void setFailedMessage(long failedMessage) {
    this.failedMessage = failedMessage;
    this.failedMessageFlag = true;
  }
 
  public boolean hasFailedMessage() {
    return failedMessageFlag;
  }
  public long getExpiredMessages() throws AccessToUndefinedFieldException {
    if(!expiredMessagesFlag) throw new AccessToUndefinedFieldException("expiredMessages");
    return expiredMessages;
  }

  public void setExpiredMessages(long expiredMessages) {
    this.expiredMessages = expiredMessages;
    this.expiredMessagesFlag = true;
  }
 
  public boolean hasExpiredMessages() {
    return expiredMessagesFlag;
  }
  public long getRetriedMessages() throws AccessToUndefinedFieldException {
    if(!retriedMessagesFlag) throw new AccessToUndefinedFieldException("retriedMessages");
    return retriedMessages;
  }

  public void setRetriedMessages(long retriedMessages) {
    this.retriedMessages = retriedMessages;
    this.retriedMessagesFlag = true;
  }
 
  public boolean hasRetriedMessages() {
    return retriedMessagesFlag;
  }
  public long getSentMessages() throws AccessToUndefinedFieldException {
    if(!sentMessagesFlag) throw new AccessToUndefinedFieldException("sentMessages");
    return sentMessages;
  }

  public void setSentMessages(long sentMessages) {
    this.sentMessages = sentMessages;
    this.sentMessagesFlag = true;
  }
 
  public boolean hasSentMessages() {
    return sentMessagesFlag;
  }

  public void encode(BufferWriter writer) throws IOException {
    if(newMessagesFlag) {
      writer.writeTag(1); // tag id
      writer.writeLongLV(newMessages);
    }  else throw new MissingMandatoryFieldException("newMessages");
    if(processMessageFlag) {
      writer.writeTag(4); // tag id
      writer.writeLongLV(processMessage);
    }  else throw new MissingMandatoryFieldException("processMessage");
    if(deliveredMessagesFlag) {
      writer.writeTag(2); // tag id
      writer.writeLongLV(deliveredMessages);
    }  else throw new MissingMandatoryFieldException("deliveredMessages");
    if(failedMessageFlag) {
      writer.writeTag(3); // tag id
      writer.writeLongLV(failedMessage);
    }  else throw new MissingMandatoryFieldException("failedMessage");
    if(expiredMessagesFlag) {
      writer.writeTag(5); // tag id
      writer.writeLongLV(expiredMessages);
    }  else throw new MissingMandatoryFieldException("expiredMessages");
    if(retriedMessagesFlag) {
      writer.writeTag(6); // tag id
      writer.writeLongLV(retriedMessages);
    }  else throw new MissingMandatoryFieldException("retriedMessages");
    if(sentMessagesFlag) {
      writer.writeTag(7); // tag id
      writer.writeLongLV(sentMessages);
    }  else throw new MissingMandatoryFieldException("sentMessages");
    writer.writeTag(0xFF); // end message tag
  }

  public void decode(BufferReader reader) throws IOException {
    while( true ) {
      int tag = reader.readTag();
      if( tag == 0xFF ) break;
      switch( tag ) {
        case 1: {
          newMessages = reader.readLongLV();
          newMessagesFlag=true;
        } break;
        case 4: {
          processMessage = reader.readLongLV();
          processMessageFlag=true;
        } break;
        case 2: {
          deliveredMessages = reader.readLongLV();
          deliveredMessagesFlag=true;
        } break;
        case 3: {
          failedMessage = reader.readLongLV();
          failedMessageFlag=true;
        } break;
        case 5: {
          expiredMessages = reader.readLongLV();
          expiredMessagesFlag=true;
        } break;
        case 6: {
          retriedMessages = reader.readLongLV();
          retriedMessagesFlag=true;
        } break;
        case 7: {
          sentMessages = reader.readLongLV();
          sentMessagesFlag=true;
        } break;
        default:
          throw new IOException( "unknown tagId: "+tag +" msg: "+DeliveryStatistics.class.getName());      }
    }
  }
}
