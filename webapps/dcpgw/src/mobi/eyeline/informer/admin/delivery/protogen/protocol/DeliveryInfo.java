package mobi.eyeline.informer.admin.delivery.protogen.protocol;

import mobi.eyeline.protogen.framework.*;
import java.io.IOException;



/**
 * This class was generated by protogen, do not edit it
 */
public class DeliveryInfo  {
 
  String name;
  boolean nameFlag=false;
  String userId;
  boolean userIdFlag=false;
  int priority;
  boolean priorityFlag=false;
  boolean transactionMode;
  boolean transactionModeFlag=false;
  String startDate;
  boolean startDateFlag=false;
  String endDate;
  boolean endDateFlag=false;
  String activePeriodEnd;
  boolean activePeriodEndFlag=false;
  String activePeriodStart;
  boolean activePeriodStartFlag=false;
  String [] activeWeekDays;
  boolean activeWeekDaysFlag=false;
  String validityPeriod;
  boolean validityPeriodFlag=false;
  boolean flash;
  boolean flashFlag=false;
  boolean useDataSm;
  boolean useDataSmFlag=false;
  DeliveryMode deliveryMode;
  boolean deliveryModeFlag=false;
  String owner;
  boolean ownerFlag=false;
  boolean retryOnFail;
  boolean retryOnFailFlag=false;
  String retryPolicy;
  boolean retryPolicyFlag=false;
  boolean replaceMessage;
  boolean replaceMessageFlag=false;
  String svcType;
  boolean svcTypeFlag=false;
  String userData;
  boolean userDataFlag=false;
  String sourceAddress;
  boolean sourceAddressFlag=false;
  boolean finalDlvRecords;
  boolean finalDlvRecordsFlag=false;
  boolean finalMsgRecords;
  boolean finalMsgRecordsFlag=false;
  String archivationPeriod;
  boolean archivationPeriodFlag=false;
  String messageTimeToLive;
  boolean messageTimeToLiveFlag=false;
  String creationDate;
  boolean creationDateFlag=false;

  public DeliveryInfo() {
  }
 

  public DeliveryInfo(String name , String userId , int priority , boolean transactionMode , String startDate , String endDate , String activePeriodEnd , String activePeriodStart , String []activeWeekDays , String validityPeriod , boolean flash , boolean useDataSm , DeliveryMode deliveryMode , String owner , boolean retryOnFail , String retryPolicy , boolean replaceMessage , String svcType , String userData , String sourceAddress , boolean finalDlvRecords , boolean finalMsgRecords , String archivationPeriod , String messageTimeToLive , String creationDate) {
    this.name = name;
    this.nameFlag = true;
    this.userId = userId;
    this.userIdFlag = true;
    this.priority = priority;
    this.priorityFlag = true;
    this.transactionMode = transactionMode;
    this.transactionModeFlag = true;
    this.startDate = startDate;
    this.startDateFlag = true;
    this.endDate = endDate;
    this.endDateFlag = true;
    this.activePeriodEnd = activePeriodEnd;
    this.activePeriodEndFlag = true;
    this.activePeriodStart = activePeriodStart;
    this.activePeriodStartFlag = true;
    this.activeWeekDays = activeWeekDays;
    this.activeWeekDaysFlag = true;
    this.validityPeriod = validityPeriod;
    this.validityPeriodFlag = true;
    this.flash = flash;
    this.flashFlag = true;
    this.useDataSm = useDataSm;
    this.useDataSmFlag = true;
    this.deliveryMode = deliveryMode;
    this.deliveryModeFlag = true;
    this.owner = owner;
    this.ownerFlag = true;
    this.retryOnFail = retryOnFail;
    this.retryOnFailFlag = true;
    this.retryPolicy = retryPolicy;
    this.retryPolicyFlag = true;
    this.replaceMessage = replaceMessage;
    this.replaceMessageFlag = true;
    this.svcType = svcType;
    this.svcTypeFlag = true;
    this.userData = userData;
    this.userDataFlag = true;
    this.sourceAddress = sourceAddress;
    this.sourceAddressFlag = true;
    this.finalDlvRecords = finalDlvRecords;
    this.finalDlvRecordsFlag = true;
    this.finalMsgRecords = finalMsgRecords;
    this.finalMsgRecordsFlag = true;
    this.archivationPeriod = archivationPeriod;
    this.archivationPeriodFlag = true;
    this.messageTimeToLive = messageTimeToLive;
    this.messageTimeToLiveFlag = true;
    this.creationDate = creationDate;
    this.creationDateFlag = true;
  }
 

  public void clear() {
    nameFlag=false;
    userIdFlag=false;
    priorityFlag=false;
    transactionModeFlag=false;
    startDateFlag=false;
    endDateFlag=false;
    activePeriodEndFlag=false;
    activePeriodStartFlag=false;
    activeWeekDaysFlag=false;
    validityPeriodFlag=false;
    flashFlag=false;
    useDataSmFlag=false;
    deliveryModeFlag=false;
    ownerFlag=false;
    retryOnFailFlag=false;
    retryPolicyFlag=false;
    replaceMessageFlag=false;
    svcTypeFlag=false;
    userDataFlag=false;
    sourceAddressFlag=false;
    finalDlvRecordsFlag=false;
    finalMsgRecordsFlag=false;
    archivationPeriodFlag=false;
    messageTimeToLiveFlag=false;
    creationDateFlag=false;
  }
 
  public void debug(StringBuilder sb) {

    if(nameFlag) { sb.append("name=") .append(name).append(';'); }

    if(userIdFlag) { sb.append("userId=") .append(userId).append(';'); }

    if(priorityFlag) { sb.append("priority=") .append(priority).append(';'); }

    if(transactionModeFlag) { sb.append("transactionMode=") .append(transactionMode).append(';'); }

    if(startDateFlag) { sb.append("startDate=") .append(startDate).append(';'); }

    if(endDateFlag) { sb.append("endDate=") .append(endDate).append(';'); }

    if(activePeriodEndFlag) { sb.append("activePeriodEnd=") .append(activePeriodEnd).append(';'); }

    if(activePeriodStartFlag) { sb.append("activePeriodStart=") .append(activePeriodStart).append(';'); }
    if(activeWeekDaysFlag) {
      sb.append("activeWeekDays").append('[');
      for(String value : activeWeekDays) {
        sb.append(value).append(',');
      }
      sb.setLength(sb.length()-1);
      sb.append(']').append(';');
    }

    if(validityPeriodFlag) { sb.append("validityPeriod=") .append(validityPeriod).append(';'); }

    if(flashFlag) { sb.append("flash=") .append(flash).append(';'); }

    if(useDataSmFlag) { sb.append("useDataSm=") .append(useDataSm).append(';'); }

    if(deliveryModeFlag) { sb.append("deliveryMode=") .append(deliveryMode).append(';'); }

    if(ownerFlag) { sb.append("owner=") .append(owner).append(';'); }

    if(retryOnFailFlag) { sb.append("retryOnFail=") .append(retryOnFail).append(';'); }

    if(retryPolicyFlag) { sb.append("retryPolicy=") .append(retryPolicy).append(';'); }

    if(replaceMessageFlag) { sb.append("replaceMessage=") .append(replaceMessage).append(';'); }

    if(svcTypeFlag) { sb.append("svcType=") .append(svcType).append(';'); }

    if(userDataFlag) { sb.append("userData=") .append(userData).append(';'); }

    if(sourceAddressFlag) { sb.append("sourceAddress=") .append(sourceAddress).append(';'); }

    if(finalDlvRecordsFlag) { sb.append("finalDlvRecords=") .append(finalDlvRecords).append(';'); }

    if(finalMsgRecordsFlag) { sb.append("finalMsgRecords=") .append(finalMsgRecords).append(';'); }

    if(archivationPeriodFlag) { sb.append("archivationPeriod=") .append(archivationPeriod).append(';'); }

    if(messageTimeToLiveFlag) { sb.append("messageTimeToLive=") .append(messageTimeToLive).append(';'); }

    if(creationDateFlag) { sb.append("creationDate=") .append(creationDate); }
  }
 
  public String toString() {
    StringBuilder sb=new StringBuilder(128);
    sb.append("DeliveryInfo:");
    debug(sb);
    return sb.toString();
  }


  public String getName() throws AccessToUndefinedFieldException {
    if(!nameFlag) throw new AccessToUndefinedFieldException("name");
    return name;
  }

  public void setName(String name) {
    this.name = name;
    this.nameFlag = true;
  }
 
  public boolean hasName() {
    return nameFlag;
  }
  public String getUserId() throws AccessToUndefinedFieldException {
    if(!userIdFlag) throw new AccessToUndefinedFieldException("userId");
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
    this.userIdFlag = true;
  }
 
  public boolean hasUserId() {
    return userIdFlag;
  }
  public int getPriority() throws AccessToUndefinedFieldException {
    if(!priorityFlag) throw new AccessToUndefinedFieldException("priority");
    return priority;
  }

  public void setPriority(int priority) {
    this.priority = priority;
    this.priorityFlag = true;
  }
 
  public boolean hasPriority() {
    return priorityFlag;
  }
  public boolean getTransactionMode() throws AccessToUndefinedFieldException {
    if(!transactionModeFlag) throw new AccessToUndefinedFieldException("transactionMode");
    return transactionMode;
  }

  public void setTransactionMode(boolean transactionMode) {
    this.transactionMode = transactionMode;
    this.transactionModeFlag = true;
  }
 
  public boolean hasTransactionMode() {
    return transactionModeFlag;
  }
  public String getStartDate() throws AccessToUndefinedFieldException {
    if(!startDateFlag) throw new AccessToUndefinedFieldException("startDate");
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
    this.startDateFlag = true;
  }
 
  public boolean hasStartDate() {
    return startDateFlag;
  }
  public String getEndDate() throws AccessToUndefinedFieldException {
    if(!endDateFlag) throw new AccessToUndefinedFieldException("endDate");
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
    this.endDateFlag = true;
  }
 
  public boolean hasEndDate() {
    return endDateFlag;
  }
  public String getActivePeriodEnd() throws AccessToUndefinedFieldException {
    if(!activePeriodEndFlag) throw new AccessToUndefinedFieldException("activePeriodEnd");
    return activePeriodEnd;
  }

  public void setActivePeriodEnd(String activePeriodEnd) {
    this.activePeriodEnd = activePeriodEnd;
    this.activePeriodEndFlag = true;
  }
 
  public boolean hasActivePeriodEnd() {
    return activePeriodEndFlag;
  }
  public String getActivePeriodStart() throws AccessToUndefinedFieldException {
    if(!activePeriodStartFlag) throw new AccessToUndefinedFieldException("activePeriodStart");
    return activePeriodStart;
  }

  public void setActivePeriodStart(String activePeriodStart) {
    this.activePeriodStart = activePeriodStart;
    this.activePeriodStartFlag = true;
  }
 
  public boolean hasActivePeriodStart() {
    return activePeriodStartFlag;
  }
  public String [] getActiveWeekDays() throws AccessToUndefinedFieldException {
    if(!activeWeekDaysFlag) throw new AccessToUndefinedFieldException("activeWeekDays");
    return activeWeekDays;
  }

  public void setActiveWeekDays(String [] activeWeekDays) {
    this.activeWeekDays = activeWeekDays;
    this.activeWeekDaysFlag = true;
  }
 
  public boolean hasActiveWeekDays() {
    return activeWeekDaysFlag;
  }
  public String getValidityPeriod() throws AccessToUndefinedFieldException {
    if(!validityPeriodFlag) throw new AccessToUndefinedFieldException("validityPeriod");
    return validityPeriod;
  }

  public void setValidityPeriod(String validityPeriod) {
    this.validityPeriod = validityPeriod;
    this.validityPeriodFlag = true;
  }
 
  public boolean hasValidityPeriod() {
    return validityPeriodFlag;
  }
  public boolean getFlash() throws AccessToUndefinedFieldException {
    if(!flashFlag) throw new AccessToUndefinedFieldException("flash");
    return flash;
  }

  public void setFlash(boolean flash) {
    this.flash = flash;
    this.flashFlag = true;
  }
 
  public boolean hasFlash() {
    return flashFlag;
  }
  public boolean getUseDataSm() throws AccessToUndefinedFieldException {
    if(!useDataSmFlag) throw new AccessToUndefinedFieldException("useDataSm");
    return useDataSm;
  }

  public void setUseDataSm(boolean useDataSm) {
    this.useDataSm = useDataSm;
    this.useDataSmFlag = true;
  }
 
  public boolean hasUseDataSm() {
    return useDataSmFlag;
  }
  public DeliveryMode getDeliveryMode() throws AccessToUndefinedFieldException {
    if(!deliveryModeFlag) throw new AccessToUndefinedFieldException("deliveryMode");
    return deliveryMode;
  }

  public void setDeliveryMode(DeliveryMode deliveryMode) {
    this.deliveryMode = deliveryMode;
    this.deliveryModeFlag = true;
  }
 
  public boolean hasDeliveryMode() {
    return deliveryModeFlag;
  }
  public String getOwner() throws AccessToUndefinedFieldException {
    if(!ownerFlag) throw new AccessToUndefinedFieldException("owner");
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
    this.ownerFlag = true;
  }
 
  public boolean hasOwner() {
    return ownerFlag;
  }
  public boolean getRetryOnFail() throws AccessToUndefinedFieldException {
    if(!retryOnFailFlag) throw new AccessToUndefinedFieldException("retryOnFail");
    return retryOnFail;
  }

  public void setRetryOnFail(boolean retryOnFail) {
    this.retryOnFail = retryOnFail;
    this.retryOnFailFlag = true;
  }
 
  public boolean hasRetryOnFail() {
    return retryOnFailFlag;
  }
  public String getRetryPolicy() throws AccessToUndefinedFieldException {
    if(!retryPolicyFlag) throw new AccessToUndefinedFieldException("retryPolicy");
    return retryPolicy;
  }

  public void setRetryPolicy(String retryPolicy) {
    this.retryPolicy = retryPolicy;
    this.retryPolicyFlag = true;
  }
 
  public boolean hasRetryPolicy() {
    return retryPolicyFlag;
  }
  public boolean getReplaceMessage() throws AccessToUndefinedFieldException {
    if(!replaceMessageFlag) throw new AccessToUndefinedFieldException("replaceMessage");
    return replaceMessage;
  }

  public void setReplaceMessage(boolean replaceMessage) {
    this.replaceMessage = replaceMessage;
    this.replaceMessageFlag = true;
  }
 
  public boolean hasReplaceMessage() {
    return replaceMessageFlag;
  }
  public String getSvcType() throws AccessToUndefinedFieldException {
    if(!svcTypeFlag) throw new AccessToUndefinedFieldException("svcType");
    return svcType;
  }

  public void setSvcType(String svcType) {
    this.svcType = svcType;
    this.svcTypeFlag = true;
  }
 
  public boolean hasSvcType() {
    return svcTypeFlag;
  }
  public String getUserData() throws AccessToUndefinedFieldException {
    if(!userDataFlag) throw new AccessToUndefinedFieldException("userData");
    return userData;
  }

  public void setUserData(String userData) {
    this.userData = userData;
    this.userDataFlag = true;
  }
 
  public boolean hasUserData() {
    return userDataFlag;
  }
  public String getSourceAddress() throws AccessToUndefinedFieldException {
    if(!sourceAddressFlag) throw new AccessToUndefinedFieldException("sourceAddress");
    return sourceAddress;
  }

  public void setSourceAddress(String sourceAddress) {
    this.sourceAddress = sourceAddress;
    this.sourceAddressFlag = true;
  }
 
  public boolean hasSourceAddress() {
    return sourceAddressFlag;
  }
  public boolean getFinalDlvRecords() throws AccessToUndefinedFieldException {
    if(!finalDlvRecordsFlag) throw new AccessToUndefinedFieldException("finalDlvRecords");
    return finalDlvRecords;
  }

  public void setFinalDlvRecords(boolean finalDlvRecords) {
    this.finalDlvRecords = finalDlvRecords;
    this.finalDlvRecordsFlag = true;
  }
 
  public boolean hasFinalDlvRecords() {
    return finalDlvRecordsFlag;
  }
  public boolean getFinalMsgRecords() throws AccessToUndefinedFieldException {
    if(!finalMsgRecordsFlag) throw new AccessToUndefinedFieldException("finalMsgRecords");
    return finalMsgRecords;
  }

  public void setFinalMsgRecords(boolean finalMsgRecords) {
    this.finalMsgRecords = finalMsgRecords;
    this.finalMsgRecordsFlag = true;
  }
 
  public boolean hasFinalMsgRecords() {
    return finalMsgRecordsFlag;
  }
  public String getArchivationPeriod() throws AccessToUndefinedFieldException {
    if(!archivationPeriodFlag) throw new AccessToUndefinedFieldException("archivationPeriod");
    return archivationPeriod;
  }

  public void setArchivationPeriod(String archivationPeriod) {
    this.archivationPeriod = archivationPeriod;
    this.archivationPeriodFlag = true;
  }
 
  public boolean hasArchivationPeriod() {
    return archivationPeriodFlag;
  }
  public String getMessageTimeToLive() throws AccessToUndefinedFieldException {
    if(!messageTimeToLiveFlag) throw new AccessToUndefinedFieldException("messageTimeToLive");
    return messageTimeToLive;
  }

  public void setMessageTimeToLive(String messageTimeToLive) {
    this.messageTimeToLive = messageTimeToLive;
    this.messageTimeToLiveFlag = true;
  }
 
  public boolean hasMessageTimeToLive() {
    return messageTimeToLiveFlag;
  }
  public String getCreationDate() throws AccessToUndefinedFieldException {
    if(!creationDateFlag) throw new AccessToUndefinedFieldException("creationDate");
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
    this.creationDateFlag = true;
  }
 
  public boolean hasCreationDate() {
    return creationDateFlag;
  }

  public void encode(BufferWriter writer) throws IOException {
    if(nameFlag) {
      writer.writeTag(1); // tag id
      writer.writeStringLV(name);
    }  else throw new MissingMandatoryFieldException("name");
    if(userIdFlag) {
      writer.writeTag(2); // tag id
      writer.writeStringLV(userId);
    } 
    if(priorityFlag) {
      writer.writeTag(3); // tag id
      writer.writeIntLV(priority);
    }  else throw new MissingMandatoryFieldException("priority");
    if(transactionModeFlag) {
      writer.writeTag(4); // tag id
      writer.writeBoolLV(transactionMode);
    }  else throw new MissingMandatoryFieldException("transactionMode");
    if(startDateFlag) {
      writer.writeTag(5); // tag id
      writer.writeStringLV(startDate);
    } 
    if(endDateFlag) {
      writer.writeTag(6); // tag id
      writer.writeStringLV(endDate);
    } 
    if(activePeriodEndFlag) {
      writer.writeTag(7); // tag id
      writer.writeStringLV(activePeriodEnd);
    }  else throw new MissingMandatoryFieldException("activePeriodEnd");
    if(activePeriodStartFlag) {
      writer.writeTag(8); // tag id
      writer.writeStringLV(activePeriodStart);
    }  else throw new MissingMandatoryFieldException("activePeriodStart");
    if(activeWeekDaysFlag) {
      writer.writeTag(9); // tag id
      int pos=writer.size();
      writer.writeLength(0);
      int off=writer.size();
      for(String v:activeWeekDays)
      {
        writer.writeStringLV(v);
      }
      writer.replaceLength((writer.size()-off), pos);
    }  else throw new MissingMandatoryFieldException("activeWeekDays");
    if(validityPeriodFlag) {
      writer.writeTag(11); // tag id
      writer.writeStringLV(validityPeriod);
    } 
    if(flashFlag) {
      writer.writeTag(12); // tag id
      writer.writeBoolLV(flash);
    }  else throw new MissingMandatoryFieldException("flash");
    if(useDataSmFlag) {
      writer.writeTag(16); // tag id
      writer.writeBoolLV(useDataSm);
    }  else throw new MissingMandatoryFieldException("useDataSm");
    if(deliveryModeFlag) {
      writer.writeTag(17); // tag id
      writer.writeByteLV(deliveryMode.getValue());
    }  else throw new MissingMandatoryFieldException("deliveryMode");
    if(ownerFlag) {
      writer.writeTag(18); // tag id
      writer.writeStringLV(owner);
    }  else throw new MissingMandatoryFieldException("owner");
    if(retryOnFailFlag) {
      writer.writeTag(19); // tag id
      writer.writeBoolLV(retryOnFail);
    }  else throw new MissingMandatoryFieldException("retryOnFail");
    if(retryPolicyFlag) {
      writer.writeTag(20); // tag id
      writer.writeStringLV(retryPolicy);
    } 
    if(replaceMessageFlag) {
      writer.writeTag(21); // tag id
      writer.writeBoolLV(replaceMessage);
    }  else throw new MissingMandatoryFieldException("replaceMessage");
    if(svcTypeFlag) {
      writer.writeTag(22); // tag id
      writer.writeStringLV(svcType);
    } 
    if(userDataFlag) {
      writer.writeTag(23); // tag id
      writer.writeStringLV(userData);
    } 
    if(sourceAddressFlag) {
      writer.writeTag(24); // tag id
      writer.writeStringLV(sourceAddress);
    }  else throw new MissingMandatoryFieldException("sourceAddress");
    if(finalDlvRecordsFlag) {
      writer.writeTag(25); // tag id
      writer.writeBoolLV(finalDlvRecords);
    }  else throw new MissingMandatoryFieldException("finalDlvRecords");
    if(finalMsgRecordsFlag) {
      writer.writeTag(26); // tag id
      writer.writeBoolLV(finalMsgRecords);
    }  else throw new MissingMandatoryFieldException("finalMsgRecords");
    if(archivationPeriodFlag) {
      writer.writeTag(27); // tag id
      writer.writeStringLV(archivationPeriod);
    } 
    if(messageTimeToLiveFlag) {
      writer.writeTag(28); // tag id
      writer.writeStringLV(messageTimeToLive);
    } 
    if(creationDateFlag) {
      writer.writeTag(29); // tag id
      writer.writeStringLV(creationDate);
    } 
    writer.writeTag(0xFF); // end message tag
  }

  public void decode(BufferReader reader) throws IOException {
    while( true ) {
      int tag = reader.readTag();
      if( tag == 0xFF ) break;
      switch( tag ) {
        case 1: {
          name = reader.readStringLV();
          nameFlag=true;
        } break;
        case 2: {
          userId = reader.readStringLV();
          userIdFlag=true;
        } break;
        case 3: {
          priority = reader.readIntLV();
          priorityFlag=true;
        } break;
        case 4: {
          transactionMode = reader.readBoolLV();
          transactionModeFlag=true;
        } break;
        case 5: {
          startDate = reader.readStringLV();
          startDateFlag=true;
        } break;
        case 6: {
          endDate = reader.readStringLV();
          endDateFlag=true;
        } break;
        case 7: {
          activePeriodEnd = reader.readStringLV();
          activePeriodEndFlag=true;
        } break;
        case 8: {
          activePeriodStart = reader.readStringLV();
          activePeriodStartFlag=true;
        } break;
        case 9: {
          int sz=reader.readLength();
          java.util.ArrayList<String> arr=new java.util.ArrayList<String>();
          int startOff=reader.offset();
          while(reader.offset()<startOff+sz) {
            arr.add(reader.readStringLV());
          }
          activeWeekDays=new String[arr.size()];
          arr.toArray(activeWeekDays);
          activeWeekDaysFlag=true;
        } break;
        case 11: {
          validityPeriod = reader.readStringLV();
          validityPeriodFlag=true;
        } break;
        case 12: {
          flash = reader.readBoolLV();
          flashFlag=true;
        } break;
        case 16: {
          useDataSm = reader.readBoolLV();
          useDataSmFlag=true;
        } break;
        case 17: {
          deliveryMode = DeliveryMode.valueOf(reader.readByteLV());
          deliveryModeFlag=true;
        } break;
        case 18: {
          owner = reader.readStringLV();
          ownerFlag=true;
        } break;
        case 19: {
          retryOnFail = reader.readBoolLV();
          retryOnFailFlag=true;
        } break;
        case 20: {
          retryPolicy = reader.readStringLV();
          retryPolicyFlag=true;
        } break;
        case 21: {
          replaceMessage = reader.readBoolLV();
          replaceMessageFlag=true;
        } break;
        case 22: {
          svcType = reader.readStringLV();
          svcTypeFlag=true;
        } break;
        case 23: {
          userData = reader.readStringLV();
          userDataFlag=true;
        } break;
        case 24: {
          sourceAddress = reader.readStringLV();
          sourceAddressFlag=true;
        } break;
        case 25: {
          finalDlvRecords = reader.readBoolLV();
          finalDlvRecordsFlag=true;
        } break;
        case 26: {
          finalMsgRecords = reader.readBoolLV();
          finalMsgRecordsFlag=true;
        } break;
        case 27: {
          archivationPeriod = reader.readStringLV();
          archivationPeriodFlag=true;
        } break;
        case 28: {
          messageTimeToLive = reader.readStringLV();
          messageTimeToLiveFlag=true;
        } break;
        case 29: {
          creationDate = reader.readStringLV();
          creationDateFlag=true;
        } break;
        default:
          throw new IOException( "unknown tagId: "+tag +" msg: "+DeliveryInfo.class.getName());      }
    }
  }
}
