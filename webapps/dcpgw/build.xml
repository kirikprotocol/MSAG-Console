<project name="dcpgw" default="distr" basedir=".">
    <property file="build.properties" />

    <property name="dcpgw.source.classes" value="${dcpgw.build.dir}/classes"/>

    <property name="dcpgw.test.classes" value="${dcpgw.build.dir}/test_classes"/>

    <property name="src.dir" location="src"/>
    <property name="conf.dir" location="conf"/>
    <property name="lib.dir" location="lib"/>

    <property name="one-jar.dir" value="${dcpgw.build.dir}/onejar"/>
    <import file="${one-jar.dir}/one-jar-ant-task.xml" optional="true" />

    <taskdef name="protogen" classname="mobi.eyeline.protogen.ant.Protogen" classpath="libdev/protogen.jar"/>

    <path id="project.classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>

    <path id="lib">
    <fileset dir="lib" includes="*.jar"/>
  </path>

    <path id="libdev">
       <fileset dir="libdev" includes="*.jar"/>
    </path>

    <path id="all_libs">
        <path refid="lib"/>
        <path refid="libdev"/>
    </path>

    <target name="prebuild" depends="gen_protocol"/>

    <target name="unpack">
        <delete dir="${dcpgw.build.dir}/onejar" failonerror="false"/>
        <copy file="libdev/one-jar-ant-task-0.97.jar" tofile="${dcpgw.build.dir}/onejar/one-jar-ant-task-0.97.jar"/>
        <unzip src="${dcpgw.build.dir}/onejar/one-jar-ant-task-0.97.jar" dest="${dcpgw.build.dir}/onejar/one-jar-ant-task-0.97"/>
        <copy file="libdev/one-jar-ant-task.xml" tofile="${dcpgw.build.dir}/onejar/one-jar-ant-task-0.97/one-jar-ant-task.xml"/>
    </target>

    <target name="compile" depends="prebuild">
        <delete dir="${dcpgw.source.classes}" failonerror="false"/>
        <mkdir dir="${dcpgw.build.dir}"/>
        <mkdir dir="${dcpgw.distr.dir}"/>
        <mkdir dir="${dcpgw.build.dir}/classes"/>
        <javac srcdir="${src.dir}"
               destdir="${dcpgw.build.dir}/classes"
               classpathref="project.classpath"
        />
    </target>

    <target name="onejar" depends="compile">
        <delete dir="${dcpgw.distr.dir}" failonerror="false"/>
        <mkdir dir="${dcpgw.distr.dir}/lib"/>

        <!-- Construct the One-JAR file -->
            <one-jar destfile="${dcpgw.distr.dir}/lib/dcpgw.jar">

                <manifest>
                    <attribute name="One-Jar-Main-Class" value="mobi.eyeline.dcpgw.Gateway"/>
                </manifest>

                <main>
                    <!-- Construct main.jar from classes and source code -->
                    <fileset dir="${dcpgw.build.dir}/classes"/>
                    <fileset dir="conf" includes="conf/dtds"/>
                    <fileset file="conf/log4j.properties"/>
                </main>

                <lib>
                    <fileset file="lib/*.jar" />
                </lib>

            </one-jar>

        <chmod file="${dcpgw.distr.dir}/lib/dcpgw.jar" perm="u+x"/>

     </target>

    <target name="distr" depends="onejar">
                
        <copy file="mv_logs.sh" todir="${dcpgw.distr.dir}"/>
        <chmod file="${dcpgw.distr.dir}/mv_logs.sh" perm="u+x"/>

        <mkdir dir="${dcpgw.distr.dir}/bin"/>

        <copy file="service" todir="${dcpgw.distr.dir}/bin"/>
        <chmod file="${dcpgw.distr.dir}/bin/service" perm="u+x"/>

        <copy todir="${dcpgw.distr.dir}/conf">
          <fileset dir="${conf.dir}" excludesfile="conf/log4j.properties"/>
        </copy>

    </target>

    <target name="release" depends="compile">
        <delete dir="${dcpgw.distr.dir}" failonerror="false"/>
        <mkdir dir="${dcpgw.distr.dir}/lib"/>
        <jar jarfile="${dcpgw.distr.dir}/lib/dcpgw.jar"
             basedir="${dcpgw.build.dir}/classes"
             index="true">

        </jar>

        <copy file="mv_logs.sh" todir="${dcpgw.distr.dir}"/>
        <chmod file="${dcpgw.distr.dir}/mv_logs.sh" perm="u+x"/>

        <copy file="setenv.sh" todir="${dcpgw.distr.dir}"/>
        <chmod file="${dcpgw.distr.dir}/setenv.sh" perm="u+x"/>

        <mkdir dir="${dcpgw.distr.dir}/bin"/>

        <copy file="service" todir="${dcpgw.distr.dir}/bin"/>
        <chmod file="${dcpgw.distr.dir}/bin/service" perm="u+x"/>

        <copydir src="${lib.dir}" dest="${dcpgw.distr.dir}/lib"/>
        <chmod file="${dcpgw.distr.dir}/${ant.project.name}.jar" perm="u+x"/>

        <copy todir="${dcpgw.distr.dir}/conf">
          <fileset dir="${conf.dir}"/>
        </copy>

        <mkdir dir="${dcpgw.distr.dir}/logs"/>

        <delete dir="${dcpgw.distr.dir}/conf/examples" failonerror="false"/>

    </target>

    <target name="gen_protocol">
        <protogen language="java" msgPackage="mobi.eyeline.dcpgw.admin.protogen.protocol" defFile="src/mobi/eyeline/dcpgw/admin/protogen/UpdateConfigClient.def" outDir="src"
                  tempDir="src/mobi/eyeline/dcpgw/admin/protogen/tmp">
          <cgp name="search.path" value="src/mobi/eyeline/dcpgw/admin/protogen/"/>
        </protogen>
    </target>


  <target name="compile.sources">
    <delete dir="${dcpgw.source.classes}" failonerror="false"/>
    <mkdir dir="${dcpgw.source.classes}"/>
    <javac srcdir="src" destdir="${dcpgw.source.classes}" classpathref="lib" debug="true" source="1.5"/>
    <native2ascii src="src" dest="${dcpgw.source.classes}" ext=".properties" includes="**/*.properties"/>
  </target>

  <target name="compile.tests" depends="compile.sources">
    <delete dir="${dcpgw.test.classes}" failonerror="false"/>
    <mkdir dir="${dcpgw.test.classes}"/>
    <copy todir="${dcpgw.test.classes}">
      <fileset dir="${dcpgw.source.classes}"/>
    </copy>
    <javac srcdir="test/module/src" destdir="${dcpgw.test.classes}" classpathref="all_libs" debug="true" source="1.5"/>
    <copy todir="${dcpgw.test.classes}">
      <fileset dir="test/module/src" includes="**/*.properties,**/*.bin,**/*.xml,**/*.csv,**/*.log"/>
    </copy>
    <native2ascii src="src" dest="${dcpgw.source.classes}" ext=".properties" includes="**/*.properties"/>
  </target>

  <target name="test" depends="compile.tests">
    <delete dir="${dcpgw.tests.dir}" failonerror="false"/>
    <mkdir dir="${dcpgw.tests.dir}"/>

    <taskdef resource='emma_ant.properties' classpathref='libdev' />

    <emma>
      <instr instrpath="${dcpgw.test.classes}" mode="overwrite" merge="true" metadatafile="${dcpgw.tests.dir}/metadata.emma">
        <filter file="emmafilter.txt" />
      </instr>
    </emma>

    <junit showoutput="true" printsummary="yes" fork="true">
      <classpath path="${dcpgw.test.classes}"/>
      <classpath refid="all_libs"/>
      <jvmarg value="-Demma.coverage.out.file=${dcpgw.tests.dir}/coverage.emma" />
      <jvmarg value="-Demma.coverage.out.merge=true" />

      <formatter type="xml" usefile="true"/>
      <batchtest todir="${dcpgw.tests.dir}">
        <fileset dir="${dcpgw.test.classes}" includes="**/*Test.class"/>
      </batchtest>
    </junit>

    <emma>
      <report sourcepath="java">
        <infileset dir="${dcpgw.tests.dir}" includes="*.emma" />

        <xml outfile="${dcpgw.tests.dir}/coverage.xml.report" depth="method" />
        <html outfile="${dcpgw.tests.dir}/coverage.html" depth="method" encoding="utf-8"/>

      </report>
    </emma>
  </target>

</project>

