<project name="informer" default="distr">

  <property file="build.properties"/>
  <property name="informer.source.classes" value="${informer.build.dir}/classes"/>

  <property name="informer.test.classes" value="${informer.build.dir}/test_classes"/>

  <property name="informer.exploded.dir" value="${informer.build.dir}/exploded"/>

  <taskdef name="protogen" classname="mobi.eyeline.protogen.ant.Protogen" classpath="libdev/protogen.jar"/>

  <path id="lib">
    <fileset dir="lib" includes="*.jar"/>
  </path>

  <path id="libdev">
    <fileset dir="libdev" includes="*.jar"/>
  </path>

  <path id="all_libs">
    <path refid="lib"/>
    <path refid="libdev"/>
  </path>

  <target name="gen_admin_protocol">
    <protogen language="java" msgPackage="mobi.eyeline.informer.admin.infosme.protogen.protocol" defFile="java/mobi/eyeline/informer/admin/infosme/protogen/WebappProto.def" outDir="java"
              tempDir="java/mobi/eyeline/informer/admin/infosme/protogen/tmp">
      <cgp name="search.path" value="java/mobi/eyeline/informer/admin/infosme/protogen/"/>
    </protogen>
  </target>

  <target name="gen_smpp_gw_protocol">
    <protogen language="java" msgPackage="mobi.eyeline.informer.admin.smppgw.protogen.protocol" defFile="java/mobi/eyeline/informer/admin/smppgw/protogen/UpdateConfigClient.def" outDir="java"
              tempDir="java/mobi/eyeline/informer/admin/smppgw/protogen/tmp">
      <cgp name="search.path" value="java/mobi/eyeline/informer/admin/smppgw/protogen/"/>
    </protogen>
  </target>

  <target name="gen_delivery_protocol">
    <protogen language="java" msgPackage="mobi.eyeline.informer.admin.delivery.protogen.protocol" defFile="java/mobi/eyeline/informer/admin/delivery/protogen/DcpClient.def" outDir="java"
              tempDir="java/mobi/eyeline/informer/admin/delivery/protogen/tmp">
      <cgp name="search.path" value="java/mobi/eyeline/informer/admin/delivery/protogen/"/>
    </protogen>
  </target>

  <target name="mode">
    <echo file="java/mobi/eyeline/informer/web/Mode.java">
package mobi.eyeline.informer.web;${line.separator}${line.separator}
public class Mode {${line.separator}
  public final static boolean testMode = ${informer.devMode};${line.separator}
}
    </echo>
  </target>

  <target name="version_prod" unless="is.dev">
    <echo file="java/mobi/eyeline/informer/web/Version.java">
package mobi.eyeline.informer.web;${line.separator}${line.separator}
public class Version {${line.separator}
  public final static String version = "${informer.implementation.version}";${line.separator}
}
    </echo>
  </target>

  <target name="version_dev" if="is.dev">
    <echo file="java/mobi/eyeline/informer/web/Version.java">
package mobi.eyeline.informer.web;${line.separator}${line.separator}
public class Version {${line.separator}
  public final static String version = "";${line.separator}
}
    </echo>
  </target>
   
  <target name="prebuild" depends="gen_admin_protocol, gen_delivery_protocol, gen_smpp_gw_protocol, mode, version_dev, version_prod"/>

  <target name="compile.sources" depends="prebuild">
    <delete dir="${informer.source.classes}" failonerror="false"/>
    <mkdir dir="${informer.source.classes}"/>
    <javac srcdir="java" destdir="${informer.source.classes}" classpathref="lib" debug="true" source="1.5"/>
    <native2ascii src="java" dest="${informer.source.classes}" ext=".properties" includes="**/*.properties"/>
  </target>


  <target name="compile.tests" depends="compile.sources">
    <delete dir="${informer.test.classes}" failonerror="false"/>
    <mkdir dir="${informer.test.classes}"/>
    <copy todir="${informer.test.classes}">
      <fileset dir="${informer.source.classes}"/>
    </copy>
    <javac srcdir="test" destdir="${informer.test.classes}" classpathref="all_libs" debug="true" source="1.5"/>
    <copy todir="${informer.test.classes}">
      <fileset dir="test" includes="**/*.properties,**/*.bin,**/*.xml,**/*.csv,**/*.log"/>
    </copy>
    <native2ascii src="java" dest="${informer.source.classes}" ext=".properties" includes="**/*.properties"/>
  </target>

  <target name="test" depends="compile.tests">
    <delete dir="${informer.tests.dir}" failonerror="false"/>
    <mkdir dir="${informer.tests.dir}"/>

    <taskdef resource='emma_ant.properties' classpathref='libdev' />

    <emma>
      <instr instrpath="${informer.test.classes}" mode="overwrite" merge="true" metadatafile="${informer.tests.dir}/metadata.emma">
        <filter file="emmafilter.txt" />
      </instr>
    </emma>

    <junit showoutput="true" printsummary="yes" fork="true">
      <classpath path="${informer.test.classes}"/>
      <classpath refid="all_libs"/>
      <jvmarg value="-Demma.coverage.out.file=${informer.tests.dir}/coverage.emma" />
      <jvmarg value="-Demma.coverage.out.merge=true" />

      <formatter type="xml" usefile="true"/>
      <batchtest todir="${informer.tests.dir}">
        <fileset dir="${informer.test.classes}" includes="**/*Test.class"/>
      </batchtest>
    </junit>

    <emma>
      <report sourcepath="java">
        <infileset dir="${informer.tests.dir}" includes="*.emma" />

        <xml outfile="${informer.tests.dir}/coverage.xml.report" depth="method" />
        <html outfile="${informer.tests.dir}/coverage.html" depth="method" encoding="utf-8"/>

      </report>
    </emma>
  </target>

  <target name="exploded">
    <delete dir="${informer.exploded.dir}" failonerror="false"/>
    <mkdir dir="${informer.exploded.dir}"/>
    <copy todir="${informer.exploded.dir}" >
      <fileset dir="web" includes="**/*" />
    </copy>

    <move todir="${informer.exploded.dir}/js">
      <fileset dir="${informer.exploded.dir}/js" />
      <mapper>
        <mapper type="regexp"
                from="(.*)\.js" to="\1${informer.implementation.version}\.js"/>
      </mapper>
    </move>

    <move todir="${informer.exploded.dir}/styles">
      <fileset dir="${informer.exploded.dir}/styles" />
      <mapper>
        <mapper type="regexp"
                from="(.*)\.css" to="\1${informer.implementation.version}\.css"/>
      </mapper>
    </move>


    <mkdir dir="${informer.exploded.dir}/WEB-INF/lib"/>
    <copy todir="${informer.exploded.dir}/WEB-INF/lib" >
      <fileset dir="lib" excludes="javaee*.jar"/>
    </copy>
    <mkdir dir="${informer.exploded.dir}/WEB-INF/classes/dtds"/>
    <copy todir="${informer.exploded.dir}/WEB-INF/classes/dtds">
      <fileset dir="." includes="*.dtd"/>
    </copy>
    <copy todir="${informer.exploded.dir}">
      <fileset dir="${informer.docs}" includes="*.pdf"/>
    </copy>
  </target>

  <condition property="is.dev">
    <equals arg1="${informer.devMode}" arg2="true"/>
  </condition>

  <target name="predistr.dev" if="is.dev">
    <echo>DEVELOPERS MODE</echo>
    <jar destfile="${informer.exploded.dir}/WEB-INF/lib/informer.jar" basedir="${informer.test.classes}"/>
  </target>


  <target name="predistr.prod" unless="is.dev">
    <echo>PRODUCTION</echo>         
    <jar destfile="${informer.exploded.dir}/WEB-INF/lib/informer.jar" basedir="${informer.source.classes}"/>
  </target>

  <target name="distr" depends="compile.tests, exploded, predistr.dev,predistr.prod">
    <delete dir="${informer.distr.dir}" failonerror="false"/>
    <mkdir dir="${informer.distr.dir}"/>
    <war destfile="${informer.distr.dir}/informer.war" basedir="${informer.exploded.dir}" >
      <manifest>
        <attribute name="Implementation-Version" value="${informer.implementation.version}"/>
      </manifest>
    </war>
  </target>

  <target name="mts-script.compile" depends="compile.sources">

    <javac srcdir="mts-script/src" destdir="${informer.source.classes}" classpathref="all_libs" debug="true" source="1.5"/>

  </target>

  <target name="mts-script" depends="mts-script.compile">

    <delete dir="${informer.distr.dir}" failonerror="false"/>
    <mkdir dir="${informer.distr.dir}"/>
    <mkdir dir="${informer.distr.dir}/mts-script"/>
    <mkdir dir="${informer.distr.dir}/mts-script/lib"/>

    <delete>
      <fileset dir="${informer.source.classes}" includes="mobi/eyeline/informer/web/**/*"/>
    </delete>
    <delete>
      <fileset dir="${informer.source.classes}/mobi/eyeline/informer/admin/" excludes="delivery/**/*,filesystem/**/*,AdminException.class"/>
    </delete>

    <jar destfile="${informer.distr.dir}/mts-script/lib/mts-stat-script.jar" basedir="${informer.source.classes}"/>

    <copy todir="${informer.distr.dir}/mts-script/lib">
      <fileset dir="lib" includes="log4j*.jar,"/>
    </copy>

    <copy todir="${informer.distr.dir}/mts-script">
      <fileset dir="mts-script/bin"/>
    </copy>
  </target>


</project>