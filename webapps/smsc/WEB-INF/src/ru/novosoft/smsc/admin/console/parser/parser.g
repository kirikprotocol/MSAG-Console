header {
package ru.novosoft.smsc.admin.console.parser;

/*
 * Parser code generated by ANTLR
 */

import ru.novosoft.smsc.admin.console.Command;
import ru.novosoft.smsc.admin.console.CommandContext;

import ru.novosoft.smsc.admin.console.commands.*;

}


/*
{
import java.io.*;

class Main {
	public static void main(String[] args) {
		try {
			CommandLexer lexer = new CommandLexer(new DataInputStream(System.in));
			CommandParser parser = new CommandParser(lexer);
			CommandContext ctx = new CommandContext(null);
			parser.parse(ctx);
		} catch(Exception e) {
			System.err.println("exception: "+e);
			e.printStackTrace(System.err);   // so we can get stack trace
		}
	}
}
}
*/


class CommandParser extends Parser;
options {
	importVocab=CommandLexer; // use vocab generated by lexer
	defaultErrorHandler=false;
}

/* ----------------------- Top level parser ----------------------- */
parse returns [Command cmd] {
    cmd = null;
}
	:	ACT_ADD 	cmd = add 
	| 	ACT_DELETE 	cmd = del
	| 	ACT_ALTER 	cmd = alt
	| 	ACT_LIST 	cmd = lst 
	| 	ACT_VIEW	cmd = view
	|	ACT_SHOW	cmd = show
	|	ACT_APPLY     { cmd = new ApplyCommand(); }
	;
	
/* ----------------------- Add action parser ---------------------- */
add returns [Command cmd] {
    cmd = null;
}
	:	TGT_ROUTE 	cmd = addroute
	|	TGT_ALIAS 	cmd = addalias
	|	TGT_SUBJECT	cmd = addsubject
	|	TGT_PROFILE	cmd = addprofile
	|	TGT_PRINCIPAL	cmd = addprincipal
	|	TGT_DL		cmd = adddl
	|	TGT_DLSUB	cmd = adddlsubmitter
	|	TGT_DLMEM	cmd = adddlmember
	;
	
/* ----------------------- Del action parser ---------------------- */
del returns [Command cmd] {
    cmd = null;
}
	:	TGT_ROUTE 	cmd = delroute
	|	TGT_ALIAS 	cmd = delalias
	|	TGT_SUBJECT	cmd = delsubject
	|	TGT_PROFILE	cmd = delprofile
	|	TGT_PRINCIPAL	cmd = delprincipal
	|	TGT_DL		cmd = deldl
	|	TGT_DLSUB	cmd = deldlsubmitter
	|	TGT_DLMEM	cmd = deldlmember
	;
/* ----------------------- Alt action parser ---------------------- */
alt returns [Command cmd] {
    cmd = null;
}
	:	TGT_ROUTE   	cmd = altroute
	|	TGT_ALIAS   	cmd = altalias
	|	TGT_SUBJECT 	cmd = altsubject
	|	TGT_PROFILE 	cmd = altprofile
	|	TGT_PRINCIPAL	cmd = altprincipal
	|	TGT_DL		cmd = altdl
	;
/* ----------------------- Lst action parser ---------------------- */
lst returns [Command cmd] {
    cmd = null;
}
	:	TGT_ROUTE 	{ cmd = new RouteListCommand();     }
	|	TGT_ALIAS 	{ cmd = new AliasListCommand();     }
	|	TGT_SUBJECT	{ cmd = new SubjectListCommand();   }
	|	TGT_PRINCIPAL	{ cmd = new PrincipalListCommand(); }
	|	TGT_DL		{ cmd = new DistributionListListCommand(); }
	;
/* ----------------------- View action parser --------------------- */
view returns [Command cmd] {
    cmd = null;
}
	:	TGT_ROUTE	cmd = viewroute
	|	TGT_ALIAS 	cmd = viewalias
	|	TGT_SUBJECT	cmd = viewsubject
	|	TGT_PROFILE	cmd = viewprofile
	|	TGT_PRINCIPAL	cmd = viewprincipal
	|	TGT_DL		cmd = viewdl
	;
/* ----------------------- Show action parser --------------------- */
show returns [AliasShowCommand cmd] {
    cmd = null;
}
	:	TGT_ALIAS (addr:STR { 
		    cmd = new AliasShowCommand();
		    cmd.setAddress(addr.getText());   
		})
	;
	exception[addr]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Target address for aliases expected");
	}
	
	
/* ----------------------- Common names parser ------------------------- */
getnameid[String msg] returns [String out] {
    out = null; 
}	:	(qname:QSTR {
		    out = qname.getText().trim();
		    out = out.substring(1,out.length()-1);
		}) 
		|(name:STR {
		    out = name.getText();
		})
	;
	exception
	catch [RecognitionException ex] {
           throw new RecognitionException(ex.getMessage()+". "+
					  msg+" expected. ");
	}

/* ----------------------- Common routes parsers ----------------------- */
srcdef[RouteGenCommand cmd] { // Special command required !!!
    RouteSrcDef def = new RouteSrcDef();
}
	:	( (
OPT_SUBJ { 
		    def.setType(RouteSrcDef.TYPE_SUBJECT);
		    def.setSrc(getnameid("Subject name"));
		  }) 
		| (OPT_MASK addr:STR {
		    def.setType(RouteSrcDef.TYPE_MASK); 
		    def.setSrc(addr.getText());
		  })
		) 
		({ 
		    cmd.addSrcDef(def);	
		})
	;
	       	
dstdef[RouteGenCommand cmd, boolean needSmeId] { // Special command required !!!
    RouteDstDef def = new RouteDstDef();
}
	:	( (OPT_SUBJ { 
		    def.setType(RouteDstDef.TYPE_SUBJECT);
		    def.setDst(getnameid("Subject name"));
		  }) 
		| (OPT_MASK addr:STR { 
		    def.setType(RouteDstDef.TYPE_MASK); 
		    def.setDst(addr.getText());
		  })
		)
		({
		    if (needSmeId) def.setSmeId(getnameid("SME System id"));
		    cmd.addDstDef(def);
		})
	;

/* ----------------------- Route command parsers ----------------------- */

route_src[RouteGenCommand cmd]
	:	(OPT_SRC (srcdef[cmd])+)
	;
	exception
	catch [RecognitionException ex] {
           throw new RecognitionException(
	    "Route srcdef missed or invalid. Syntax: src (subj <subject_name>|mask <mask>)+");
	}

route_dst[RouteGenCommand cmd, boolean needSmeId]
	:	(OPT_DST (dstdef[cmd, needSmeId])+)
	;
	exception
	catch [RecognitionException ex] {
           throw new RecognitionException(
	    "Route dstdef missed or invalid. Syntax: dst (subj <subject_name>|mask <mask>"+
	    ((needSmeId) ? " <systemid>)+":")+"));
	}
route_dm[RouteGenCommand cmd]
	:	(VAL_DEF      { cmd.setDeliveryMode("deafult");  }
		|VAL_STORE    { cmd.setDeliveryMode("store");    }
		|VAL_FORWARD  { cmd.setDeliveryMode("forward");  }
		|VAL_DATAGRAM { cmd.setDeliveryMode("datagram"); })
	;
	exception
	catch [RecognitionException ex] {
           throw new RecognitionException("Route delivery mode expected. Syntax: (default|store|forward|datagram)");
	}

addroute returns [RouteAddCommand cmd] {
    cmd = new RouteAddCommand();
}
	:	({
		    cmd.setRoute(getnameid("Route name"));
		})
		addroute_flags[cmd]
		(OPT_SVCID num:STR {
		    try {
			cmd.setServiceId(Integer.parseInt(num.getText()));
		    } catch (NumberFormatException ex) {
			throw new NumberFormatException("Expecting integer value for <serviceid>");
		    }
		})
		(OPT_PRI pri:STR {
		    try {
			cmd.setPriority(Integer.parseInt(pri.getText()));		    
		    } catch (NumberFormatException ex) {
			throw new NumberFormatException("Expecting integer value for <priority>");
		    }
		})
		(OPT_DM route_dm[cmd])?
		(OPT_SRCSME { cmd.setSrcSmeId(getnameid("srcSmeId value"));   } )?
		(OPT_FWD    { cmd.setForwardTo(getnameid("forwardTo value")); } )?
		route_src[cmd]
		route_dst[cmd, true]
	;

addroute_flags[RouteAddCommand cmd]
	:	( OPT_ACTIVE 	{ cmd.setActive(true);  }
		| OPT_INACTIVE	{ cmd.setActive(false);	})?
		( OPT_BILL   	{ cmd.setBill(true);   	}
		| OPT_NOBILL 	{ cmd.setBill(false);  	})
		( OPT_ARCH   	{ cmd.setArc(true);    	}
		| OPT_NOARCH 	{ cmd.setArc(false);   	})
	        ( OPT_ALLOW  	{ cmd.setAllow(true);  	}
		| OPT_DENY   	{ cmd.setAllow(false); 	})
	        ( OPT_RCPT   	{ cmd.setReceipt(true); }
		| OPT_NORCPT 	{ cmd.setReceipt(false);})
	;
	exception
	catch [RecognitionException ex] {
           throw new RecognitionException("Route flags expected. Syntax: [active|inactive] (bill|nobill) (arc|noarc) (allow|deny) (receipt|noreceipt)");
	}

delroute returns [RouteDeleteCommand cmd] {
    cmd = new RouteDeleteCommand();
}
	:	({
		    cmd.setRoute(getnameid("Route name"));
		})
	;

altroute returns [RouteAlterCommand cmd] {
    cmd = new RouteAlterCommand();
    boolean addAction = true;
}
	:	({
		    cmd.setRoute(getnameid("Route name"));
		})
		altroute_flags[cmd]
		(OPT_SVCID num:STR {
		    try {
			cmd.setServiceId(Integer.parseInt(num.getText()));
		    } catch (NumberFormatException ex) {
			throw new NumberFormatException("Expecting integer value for <serviceid>");
		    }
		}) ?
		(OPT_PRI pri:STR {
		    try {
			cmd.setPriority(Integer.parseInt(pri.getText()));		    
		    } catch (NumberFormatException ex) {
			throw new NumberFormatException("Expecting integer value for <priority>");
		    }
		}) ?
		(OPT_DM route_dm[cmd])?
		(OPT_SRCSME { cmd.setSrcSmeId(getnameid("srcSmeId value"));   } )?
		(OPT_FWD    { cmd.setForwardTo(getnameid("forwardTo value")); } )?
		(
		((ACT_ADD    { cmd.setAction(RouteAlterCommand.ACTION_ADD); addAction=true;  })
		|(ACT_DELETE { cmd.setAction(RouteAlterCommand.ACTION_DEL); addAction=false; }))
		 ( route_src[cmd] { 
			cmd.setTarget(RouteAlterCommand.TARGET_SRC);
		   }
		 | route_dst[cmd, addAction] { 
			cmd.setTarget(RouteAlterCommand.TARGET_DST); 
		   }
		 )
		)?
	;
altroute_flags[RouteAlterCommand cmd]
	:	( OPT_ACTIVE 	{ cmd.setActive(true);   }
		| OPT_INACTIVE	{ cmd.setActive(false);	 })?
		( OPT_BILL   	{ cmd.setBill(true);     } 
		| OPT_NOBILL 	{ cmd.setBill(false);    })?
		( OPT_ARCH   	{ cmd.setArc(true);      } 
		| OPT_NOARCH 	{ cmd.setArc(false);     })?
	        ( OPT_ALLOW  	{ cmd.setAllow(true);    }
		| OPT_DENY   	{ cmd.setAllow(false);   })?
	        ( OPT_RCPT   	{ cmd.setReceipt(true);  }
		| OPT_NORCPT 	{ cmd.setReceipt(false); })?
	;
	exception
	catch [RecognitionException ex] {
           throw new RecognitionException("Route flags expected. Syntax: [active|inactive] [bill|nobill] [arc|noarc] [allow|deny] [receipt|noreceipt]");
	}

viewroute returns [RouteViewCommand cmd] {
    cmd = new RouteViewCommand();
}
	:	({
		    cmd.setRoute(getnameid("Route name"));
		})
	;

/* ----------------------- Alias command parsers ----------------------- */

addalias returns [AliasAddCommand cmd] {
    cmd = new AliasAddCommand();
}
	:	(mask:STR     { cmd.setAlias(mask.getText());   })
		(addr:STR     { cmd.setAddress(addr.getText());	})
		( OPT_HIDE    { cmd.setHide(true);  }
		| OPT_NOHIDE  { cmd.setHide(false); })?
	;
	exception[mask]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Alias mask expected");
	}
	exception[addr]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Alias address expected");
	}
delalias returns [AliasDeleteCommand cmd] {
    cmd = new AliasDeleteCommand();
}
	:	(mask:STR     { cmd.setAlias(mask.getText()); })
	;
	exception[mask]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Alias mask expected");
	}
altalias returns [AliasAlterCommand cmd] {
    cmd = new AliasAlterCommand();
}
	:	(mask:STR     { cmd.setAlias(mask.getText());   })
		(addr:STR     { cmd.setAddress(addr.getText()); })
		( OPT_HIDE    { cmd.setHide(true);  }
		| OPT_NOHIDE  { cmd.setHide(false); })?
	;
	exception[mask]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Alias mask expected");
	}
	exception[addr]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Alias address expected");
	}
viewalias returns [AliasViewCommand cmd] {
    cmd = new AliasViewCommand();
}
	:	(mask:STR     { cmd.setAlias(mask.getText()); })
	;
	exception[mask]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Alias mask expected");
	}

/* ----------------------- Subject command parsers --------------------- */

addsubj_mask[SubjectGenCommand cmd]
	:	(mask:STR     { cmd.addMask(mask.getText()); })
	;
addsubj_masks[SubjectGenCommand cmd]
	:	(addsubj_mask[cmd] (COMMA addsubj_mask[cmd])*)
	;
	exception
	catch [RecognitionException ex] {
	    throw new RecognitionException("Subject mask list missed or invalid. Syntax: <subject_mask>(,<subject_mask>)*");
	}

addsubject returns [SubjectAddCommand cmd] {
    cmd = new SubjectAddCommand();
}
	:	({
		    cmd.setSubject(getnameid("Subject name"));
		})
		({
		    cmd.setDefaultSmeId(getnameid("SME id"));
		})
		addsubj_masks[cmd]
	;
altsubject returns [SubjectAlterCommand cmd] {
    cmd = new SubjectAlterCommand();
}
	:	({
		    cmd.setSubject(getnameid("Subject name"));
		})
		(((ACT_ADD {
		    cmd.setActionAdd();
		} | ACT_DELETE {
		    cmd.setActionDelete();
		}) addsubj_masks[cmd]) | 
		(OPT_DEFSME {
		    cmd.setDefaultSmeId(getnameid("SME id"));
		}))
	;
delsubject returns [SubjectDeleteCommand cmd] {
    cmd = new SubjectDeleteCommand();
}
	:	({
		    cmd.setSubject(getnameid("Subject name"));
		})
	;
viewsubject returns [SubjectViewCommand cmd] {
    cmd = new SubjectViewCommand();
}
	:	({
		    cmd.setSubject(getnameid("Subject name"));
		})
	;

/* ----------------------- Profile command parsers --------------------- */

profile_divert_opt[ProfileGenCommand cmd]
	:	(OPT_ABSENT   { cmd.setDivertActiveAbsent(true);       })?
		(OPT_BARRED   { cmd.setDivertActiveBarred(true);       })?
		(OPT_BLOCKED  { cmd.setDivertActiveBlocked(true);      })?
		(OPT_CAPACITY { cmd.setDivertActiveCapacity(true);     })?
		(OPT_UNCONDIT { cmd.setDivertActiveUnconditional(true);})?
		(OPT_MODIF    { cmd.setDivertModifiable(true);  }
		|OPT_NOTMODIF { cmd.setDivertModifiable(false); })?		
	;
	exception
	catch [RecognitionException ex] {
           throw new RecognitionException("Profile devert options expected. Syntax: [absent][barred][blocked][capacity][unconditional] [modifiable|notmodifiable]");
	}

profile_udh_concat_opt[ProfileGenCommand cmd] 
	:	(OPT_UDHCONCAT (OPT_ON  { cmd.setUdhConcat(true);  }
			       |OPT_OFF { cmd.setUdhConcat(false); }))?
	;
	exception
	catch [RecognitionException ex] {
           throw new RecognitionException("Profile udh concat option expected. Syntax: udhconcat on|off");
	}

profile_alias_opt[ProfileGenCommand cmd] {
    cmd.setAliasOptions(true);
}
	:	(OPT_HIDE     { cmd.setAliasHide(true);  } 
		|OPT_NOHIDE   { cmd.setAliasHide(false); })?
		(OPT_MODIF    { cmd.setAliasModifiable(true);  }
		|OPT_NOTMODIF { cmd.setAliasModifiable(false); })?
	;
	exception
	catch [RecognitionException ex] {
           throw new RecognitionException("Profile alias options expected. Syntax: [hide|nohide] [modifiable|notmodifiable]");
	}

profile_encode_opt[ProfileGenCommand cmd] {
    cmd.setUssd7Bit(false);
}
	:	(VAL_DEF        { cmd.setGsm7Encoding(); }
		|VAL_UCS2       { cmd.setUcs2Encoding(); }
		|VAL_LATIN1     { cmd.setLatin1Encoding(); }
		|VAL_UCS2LATIN1 { cmd.setUcs2Latin1Encoding(); })
		(OPT_USSD7BIT   { cmd.setUssd7Bit(true); })?
	;
	exception
	catch [RecognitionException ex] {
           throw new RecognitionException("Profile encoding options expected. Syntax: (default|ucs2|latin1|ucs2-latin1) [ussd7bit]");
	}
    
addprofile returns [ProfileAddCommand cmd] {
    cmd = new ProfileAddCommand();
}
	:	(mask:STR  { cmd.setMask(mask.getText());    })
		(OPT_REPORT (VAL_FULL { cmd.setFullReport(); }
			   | VAL_NONE { cmd.setNoneReport(); } ))
		(OPT_LOCALE { cmd.setLocale(getnameid("Locale name")); } )
		(OPT_ENCODE profile_encode_opt[cmd] )?
		(TGT_ALIAS  profile_alias_opt[cmd]  )?
		(OPT_DIVERT  { cmd.setDivertOptions(true); }
			    ({ cmd.setDivert(getnameid("Divert value")); })
			    profile_divert_opt[cmd] )?
		profile_udh_concat_opt[cmd]
	;
	exception[mask]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Profile mask expected");
	}
	
altprofile returns [ProfileAlterCommand cmd] {
    cmd = new ProfileAlterCommand();
}
	:	(addr:STR   { cmd.setAddress(addr.getText()); })
		(OPT_REPORT (VAL_FULL { cmd.setFullReport(); }
			   | VAL_NONE { cmd.setNoneReport(); } ))?
		(OPT_LOCALE { cmd.setLocale(getnameid("Locale name")); } )?
		(OPT_ENCODE profile_encode_opt[cmd] )?
		(TGT_ALIAS  profile_alias_opt[cmd]  )?
		(OPT_DIVERT { cmd.setDivertOptions(true); }
			    ((OPT_SET   { cmd.setDivert(getnameid("Divert value")); })|
			     (OPT_CLEAR { cmd.setDivert(""); }))?
			    ((OPT_OFF   { cmd.setDivertActiveOn(false); })|
			     (OPT_ON    { cmd.setDivertActiveOn(true);  }))?
			    profile_divert_opt[cmd] )?
		profile_udh_concat_opt[cmd]
	;
	exception[addr]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Profile address expected");
	}
delprofile returns [ProfileDeleteCommand cmd] {
    cmd = new ProfileDeleteCommand();
}
	:	(mask:STR  { cmd.setMask(mask.getText()); })
	;
	exception[mask]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Profile mask expected");
	}
viewprofile returns [ProfileViewCommand cmd] {
    cmd = new ProfileViewCommand();
}
	:	(addr:STR  { cmd.setAddress(addr.getText()); })
	;
	exception[addr]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Profile address expected");
	}

/* ------------------ Distribution lists commands parsers ---------------- */

addprincipal returns [PrincipalAddCommand cmd] {
    cmd = new PrincipalAddCommand();
}
	:	(addr:STR  { cmd.setAddress(addr.getText()); })
		(OPT_NLIST numl:STR {
		    try {
			cmd.setMaxLists(Integer.parseInt(numl.getText()));
		    } catch (NumberFormatException ex) {
			throw new NumberFormatException("Expecting integer value for <numlist>");
		    }
		})
		(OPT_NELEM nume:STR {
		    try {
			cmd.setMaxElements(Integer.parseInt(nume.getText()));
		    } catch (NumberFormatException ex) {
			throw new NumberFormatException("Expecting integer value for <numelem>");
		    }
		})
	;
	exception[addr]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Principal address expected");
	}
	exception[numl]
	catch [RecognitionException ex] {
	    throw new RecognitionException("'numlist' integer value expected");
	}
	exception[nume]
	catch [RecognitionException ex] {
	    throw new RecognitionException("'numelem' integer value expected");
	}
	exception
	catch [RecognitionException ex] {
	    throw new RecognitionException("Command invalid. Syntax: add principal <principal_address> numlist <number> numelem <number>");
	}

altprincipal returns [PrincipalAlterCommand cmd] {
    cmd = new PrincipalAlterCommand();
}
	:	(addr:STR  { cmd.setAddress(addr.getText()); })
		(OPT_NLIST numl:STR {
		    try {
			cmd.setMaxLists(Integer.parseInt(numl.getText()));
		    } catch (NumberFormatException ex) {
			throw new NumberFormatException("Expecting integer value for <numlist>");
		    }
		}) ?
		(OPT_NELEM nume:STR {
		    try {
			cmd.setMaxElements(Integer.parseInt(nume.getText()));
		    } catch (NumberFormatException ex) {
			throw new NumberFormatException("Expecting integer value for <numelem>");
		    }
		}) ?
	;
	exception[addr]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Principal address expected");
	}
	exception
	catch [RecognitionException ex] {
	    throw new RecognitionException("Command invalid. Syntax: alter principal <principal_address> [numlist <number>] [numelem <number>]");
	}
	

delprincipal returns [PrincipalDeleteCommand cmd] {
    cmd = new PrincipalDeleteCommand();
}
	:	(addr:STR  { cmd.setAddress(addr.getText()); })
	;
	exception[addr]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Principal address expected");
	}

viewprincipal returns [PrincipalViewCommand cmd] {
    cmd = new PrincipalViewCommand();
}
	:	(addr:STR  { cmd.setAddress(addr.getText()); })
	;
	exception[addr]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Principal address expected");
	}

adddl returns [DistributionListAddCommand cmd] {
    cmd = new DistributionListAddCommand();
}
	:	({	
		    cmd.setName(getnameid("Distribution list name"));
		})
		(OPT_NELEM nume:STR  {
		    try {
			cmd.setMaxElements(Integer.parseInt(nume.getText()));
		    } catch (NumberFormatException ex) {
			throw new NumberFormatException("Expecting integer value for <numelem>");
		    }
		})		
		(OPT_OWNER owner:STR { 
		    cmd.setOwner(owner.getText());
		}) ?
	;
	exception[nume]
	catch [RecognitionException ex] {
	    throw new RecognitionException("'numelem' integer value expected");
	}
	exception[owner]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Owner address expected");
	}
	exception
	catch [RecognitionException ex] {
	    throw new RecognitionException("Command invalid. Syntax: add dl <dl_name> [owner <owner_address>] numelem <number>");
	}

altdl returns [DistributionListAlterCommand cmd] {
    cmd = new DistributionListAlterCommand();
}
	:	({	
		    cmd.setName(getnameid("Distribution list name"));
		})
		(OPT_NELEM nume:STR  {
		    try {
			cmd.setMaxElements(Integer.parseInt(nume.getText()));
		    } catch (NumberFormatException ex) {
			throw new NumberFormatException("Expecting integer value for <numelem>");
		    }
		})		
	;
	exception[nume]
	catch [RecognitionException ex] {
	    throw new RecognitionException("'numelem' integer value expected");
	}


viewdl returns [DistributionListViewCommand cmd] {
    cmd = new DistributionListViewCommand();
}
	:	({	
		    cmd.setName(getnameid("Distribution list name"));
		})
	;

deldl returns [DistributionListDeleteCommand cmd] {
    cmd = new DistributionListDeleteCommand();
}
	:	({	
		    cmd.setName(getnameid("Distribution list name"));
		})
	;

adddlmember returns [MemberAddCommand cmd] {
    cmd = new MemberAddCommand();
}
	:	({	
		    cmd.setName(getnameid("Distribution list name"));
		})
		(member:STR { 
		    cmd.setMember(member.getText());
		})
	;
	exception[member]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Member address expected");
	}

deldlmember returns [MemberDeleteCommand cmd] {
    cmd = new MemberDeleteCommand();
}
	:	({	
		    cmd.setName(getnameid("Distribution list name"));
		})
		(member:STR { 
		    cmd.setMember(member.getText());
		})
	;
	exception[member]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Member address expected");
	}

adddlsubmitter returns [SubmitterAddCommand cmd] {
    cmd = new SubmitterAddCommand();
}
	:	({	
		    cmd.setName(getnameid("Distribution list name"));
		})
		(submitter:STR { 
		    cmd.setSubmitter(submitter.getText());
		})
	;
	exception[submitter]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Submitter address expected");
	}

deldlsubmitter returns [SubmitterDeleteCommand cmd] {
    cmd = new SubmitterDeleteCommand();
}
	:	({	
		    cmd.setName(getnameid("Distribution list name"));
		})
		(submitter:STR { 
		    cmd.setSubmitter(submitter.getText());
		})
	;
	exception[submitter]
	catch [RecognitionException ex] {
	    throw new RecognitionException("Submitter address expected");
	}
