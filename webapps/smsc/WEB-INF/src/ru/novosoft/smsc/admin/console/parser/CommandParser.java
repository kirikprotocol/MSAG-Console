// $ANTLR 2.7.1: "parser.g" -> "CommandParser.java"$

package ru.novosoft.smsc.admin.console.parser;

/*
 * Parser code generated by ANTLR
 */

import ru.novosoft.smsc.admin.console.Command;
import ru.novosoft.smsc.admin.console.CommandContext;

import ru.novosoft.smsc.admin.console.commands.*;


import antlr.TokenBuffer;
import antlr.TokenStreamException;
import antlr.TokenStreamIOException;
import antlr.ANTLRException;
import antlr.LLkParser;
import antlr.Token;
import antlr.TokenStream;
import antlr.RecognitionException;
import antlr.NoViableAltException;
import antlr.MismatchedTokenException;
import antlr.SemanticException;
import antlr.ParserSharedInputState;
import antlr.collections.impl.BitSet;
import antlr.collections.AST;
import antlr.ASTPair;
import antlr.collections.impl.ASTArray;

import java.io.*;

class Main {
	public static void main(String[] args) {
		try {
			CommandLexer lexer = new CommandLexer(new DataInputStream(System.in));
			CommandParser parser = new CommandParser(lexer);
			CommandContext ctx = new CommandContext(null);
			parser.parse(ctx);
		} catch(Exception e) {
			System.err.println("exception: "+e);
			e.printStackTrace(System.err);   // so we can get stack trace
		}
	}
}

public class CommandParser extends antlr.LLkParser
       implements CommandParserTokenTypes
 {

protected CommandParser(TokenBuffer tokenBuf, int k) {
  super(tokenBuf,k);
  tokenNames = _tokenNames;
}

public CommandParser(TokenBuffer tokenBuf) {
  this(tokenBuf,1);
}

protected CommandParser(TokenStream lexer, int k) {
  super(lexer,k);
  tokenNames = _tokenNames;
}

public CommandParser(TokenStream lexer) {
  this(lexer,1);
}

public CommandParser(ParserSharedInputState state) {
  super(state,1);
  tokenNames = _tokenNames;
}

	public final void parse(
		CommandContext ctx
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case ACT_ADD:
			{
				match(ACT_ADD);
				add(ctx);
				break;
			}
			case ACT_DELETE:
			{
				match(ACT_DELETE);
				del(ctx);
				break;
			}
			case ACT_ALTER:
			{
				match(ACT_ALTER);
				alt(ctx);
				break;
			}
			case ACT_LIST:
			{
				match(ACT_LIST);
				lst(ctx);
				break;
			}
			case ACT_VIEW:
			{
				match(ACT_VIEW);
				view(ctx);
				break;
			}
			case ACT_APPLY:
			{
				match(ACT_APPLY);
				
						    System.out.println("Apply");
						    ApplyCommand cmd = new ApplyCommand();
						    cmd.process(ctx);
						
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void add(
		CommandContext ctx
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case TGT_ROUTE:
			{
				match(TGT_ROUTE);
				
						    RouteAddCommand cmd = new RouteAddCommand();
						
				addroute(ctx, cmd);
				break;
			}
			case TGT_ALIAS:
			{
				match(TGT_ALIAS);
				
						    AliasAddCommand cmd = new AliasAddCommand();
						
				addalias(ctx, cmd);
				break;
			}
			case TGT_SUBJECT:
			{
				match(TGT_SUBJECT);
				
						    SubjectAddCommand cmd = new SubjectAddCommand();
						
				addsubject(ctx, cmd);
				break;
			}
			case TGT_PROFILE:
			{
				match(TGT_PROFILE);
				
						    ProfileAddCommand cmd = new ProfileAddCommand();
						
				addprofile(ctx, cmd);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void del(
		CommandContext ctx
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case TGT_ROUTE:
			{
				match(TGT_ROUTE);
				
						    RouteDeleteCommand cmd = new RouteDeleteCommand();
						
				delroute(ctx, cmd);
				break;
			}
			case TGT_ALIAS:
			{
				match(TGT_ALIAS);
				
						    AliasDeleteCommand cmd = new AliasDeleteCommand();
						
				delalias(ctx, cmd);
				break;
			}
			case TGT_SUBJECT:
			{
				match(TGT_SUBJECT);
				
						    SubjectDeleteCommand cmd = new SubjectDeleteCommand();
						
				delsubject(ctx, cmd);
				break;
			}
			case TGT_PROFILE:
			{
				match(TGT_PROFILE);
				
						    ProfileDeleteCommand cmd = new ProfileDeleteCommand();
						
				delprofile(ctx, cmd);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void alt(
		CommandContext ctx
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case TGT_ROUTE:
			{
				match(TGT_ROUTE);
				
						    RouteAlterCommand cmd = new RouteAlterCommand();
						
				altroute(ctx, cmd);
				break;
			}
			case TGT_ALIAS:
			{
				match(TGT_ALIAS);
				
						    AliasAlterCommand cmd = new AliasAlterCommand();
					 	
				altalias(ctx, cmd);
				break;
			}
			case TGT_SUBJECT:
			{
				match(TGT_SUBJECT);
				
						    SubjectAlterCommand cmd = new SubjectAlterCommand();
						
				altsubject(ctx, cmd);
				break;
			}
			case TGT_PROFILE:
			{
				match(TGT_PROFILE);
				
						    ProfileAlterCommand cmd = new ProfileAlterCommand();
						
				altprofile(ctx, cmd);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void lst(
		CommandContext ctx
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case TGT_ROUTE:
			{
				match(TGT_ROUTE);
				
						    RouteListCommand cmd = new RouteListCommand();
						
				lstroute(ctx, cmd);
				break;
			}
			case TGT_ALIAS:
			{
				match(TGT_ALIAS);
				
						    AliasListCommand cmd = new AliasListCommand();
						
				lstalias(ctx, cmd);
				break;
			}
			case TGT_SUBJECT:
			{
				match(TGT_SUBJECT);
				
						    SubjectListCommand cmd = new SubjectListCommand();
						
				lstsubject(ctx, cmd);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void view(
		CommandContext ctx
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			switch ( LA(1)) {
			case TGT_ROUTE:
			{
				match(TGT_ROUTE);
				
						    RouteViewCommand cmd = new RouteViewCommand();
						
				viewroute(ctx, cmd);
				break;
			}
			case TGT_ALIAS:
			{
				match(TGT_ALIAS);
				
						    AliasViewCommand cmd = new AliasViewCommand();
						
				viewalias(ctx, cmd);
				break;
			}
			case TGT_SUBJECT:
			{
				match(TGT_SUBJECT);
				
						    SubjectViewCommand cmd = new SubjectViewCommand();
						
				viewsubject(ctx, cmd);
				break;
			}
			case TGT_PROFILE:
			{
				match(TGT_PROFILE);
				
						    ProfileViewCommand cmd = new ProfileViewCommand();
						
				viewprofile(ctx, cmd);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void addroute(
		CommandContext ctx, RouteAddCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    System.out.println("Add route="+out);
					    cmd.setRoute(out);
					
			addroute_flags(cmd);
			route_serviceid(cmd);
			route_priority(cmd);
			route_src(cmd);
			route_dst(cmd);
			
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void addalias(
		CommandContext ctx, AliasAddCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		Token  val = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    System.out.println("Add alias="+out);
					    cmd.setAlias(out);
					
			{
			val = LT(1);
			match(ADDRESS);
			}
			
					    cmd.setAddress(val.getText());
					
			{
			switch ( LA(1)) {
			case OPT_HIDE:
			{
				match(OPT_HIDE);
				cmd.setHide(true);
				break;
			}
			case OPT_NOHIDE:
			{
				match(OPT_NOHIDE);
				cmd.setHide(false);
				break;
			}
			case EOF:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void addsubject(
		CommandContext ctx, SubjectAddCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		Token  smeId = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    System.out.println("Add subject="+out);
					    cmd.setSubject(out);
					
			{
			smeId = LT(1);
			match(ID);
			}
			
					    cmd.setDefaultSmeId(smeId.getText());
					
			addsubj_masks(cmd);
			
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void addprofile(
		CommandContext ctx, ProfileAddCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  mask = null;
		Token  rep = null;
		Token  enc = null;
		
		try {      // for error handling
			{
			mask = LT(1);
			match(ADDRESS);
			}
			
					    System.out.println("Add profile, mask="+mask.getText());
					    cmd.setMask(mask.getText());
					
			{
			match(OPT_REPORT);
			rep = LT(1);
			match(ID);
			}
			
					    cmd.setReport(rep.getText());
					
			{
			switch ( LA(1)) {
			case OPT_ENCODE:
			{
				match(OPT_ENCODE);
				enc = LT(1);
				match(ID);
				break;
			}
			case EOF:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    cmd.setEncoding(enc.getText());
					
			
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void delroute(
		CommandContext ctx, RouteDeleteCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    System.out.println("Delete route="+out);
					    cmd.setRoute(out);
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void delalias(
		CommandContext ctx, AliasDeleteCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    System.out.println("Add alias="+out);
					    cmd.setAlias(out);
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void delsubject(
		CommandContext ctx, SubjectDeleteCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    System.out.println("Delete subject="+out);
					    cmd.setSubject(out);
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void delprofile(
		CommandContext ctx, ProfileDeleteCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  mask = null;
		
		try {      // for error handling
			{
			mask = LT(1);
			match(ADDRESS);
			}
			
					    System.out.println("Delete profile, mask="+mask.getText());
					    cmd.setMask(mask.getText());
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void altroute(
		CommandContext ctx, RouteAlterCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    System.out.println("Alter route="+out);
					    cmd.setRoute(out);
					
			altroute_flags(cmd);
			{
			switch ( LA(1)) {
			case OPT_SVCID:
			{
				route_serviceid(cmd);
				break;
			}
			case ACT_ADD:
			case ACT_DELETE:
			case OPT_PRI:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OPT_PRI:
			{
				route_priority(cmd);
				break;
			}
			case ACT_ADD:
			case ACT_DELETE:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case ACT_ADD:
			{
				match(ACT_ADD);
				break;
			}
			case ACT_DELETE:
			{
				match(ACT_DELETE);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OPT_SRC:
			{
				route_src(cmd);
				break;
			}
			case OPT_DST:
			{
				route_dst(cmd);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void altalias(
		CommandContext ctx, AliasAlterCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		Token  val = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    System.out.println("Alter alias="+out);
					    cmd.setAlias(out);
					
			{
			val = LT(1);
			match(ADDRESS);
			}
			
					    cmd.setAddress(val.getText());
					
			{
			switch ( LA(1)) {
			case OPT_HIDE:
			{
				match(OPT_HIDE);
				cmd.setHide(true);
				break;
			}
			case OPT_NOHIDE:
			{
				match(OPT_NOHIDE);
				cmd.setHide(false);
				break;
			}
			case EOF:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void altsubject(
		CommandContext ctx, SubjectAlterCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		Token  smeId = null;
		
		try {      // for error handling
			switch ( LA(1)) {
			case STRING:
			case ID:
			{
				{
				switch ( LA(1)) {
				case STRING:
				{
					qname = LT(1);
					match(STRING);
					break;
				}
				case ID:
				{
					name = LT(1);
					match(ID);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				
						    String out = (qname == null) ? name.getText():qname.getText();
						    System.out.println("Alter subject="+out);
						    cmd.setSubject(out);
						
				{
				{
				switch ( LA(1)) {
				case ACT_ADD:
				{
					match(ACT_ADD);
					
							    //cmd.setActionAdd();
							
					break;
				}
				case ACT_DELETE:
				{
					match(ACT_DELETE);
					
							    //cmd.setActionDelete();
							
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				addsubj_masks(cmd);
				}
				break;
			}
			case OPT_DEFSME:
			{
				{
				match(OPT_DEFSME);
				smeId = LT(1);
				match(ID);
				}
				
						    cmd.setDefaultSmeId(smeId.getText());
						
				
						    cmd.process(ctx);
						
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void altprofile(
		CommandContext ctx, ProfileAlterCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  addr = null;
		Token  rep = null;
		Token  enc = null;
		
		try {      // for error handling
			{
			addr = LT(1);
			match(ADDRESS);
			}
			
					    System.out.println("Alter profile, addr="+addr.getText());
					    cmd.setAddress(addr.getText());
					
			{
			match(OPT_REPORT);
			rep = LT(1);
			match(ID);
			}
			
					    cmd.setReport(rep.getText());
					
			{
			switch ( LA(1)) {
			case OPT_ENCODE:
			{
				match(OPT_ENCODE);
				enc = LT(1);
				match(ID);
				break;
			}
			case EOF:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    cmd.setEncoding(enc.getText());
					
			
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void lstroute(
		CommandContext ctx, RouteListCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case WS:
			{
				match(WS);
				break;
			}
			case EOF:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    System.out.println("List route");
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void lstalias(
		CommandContext ctx, AliasListCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case WS:
			{
				match(WS);
				break;
			}
			case EOF:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    System.out.println("List alias");
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void lstsubject(
		CommandContext ctx, SubjectListCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case WS:
			{
				match(WS);
				break;
			}
			case EOF:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    System.out.println("List subject");
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void viewroute(
		CommandContext ctx, RouteViewCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    System.out.println("View route="+out);
					    cmd.setRoute(out);
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void viewalias(
		CommandContext ctx, AliasViewCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    System.out.println("View alias="+out);
					    cmd.setAlias(out);
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void viewsubject(
		CommandContext ctx, SubjectViewCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    System.out.println("View subject="+out);
					    cmd.setSubject(out);
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void viewprofile(
		CommandContext ctx, ProfileViewCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  addr = null;
		
		try {      // for error handling
			{
			addr = LT(1);
			match(ADDRESS);
			}
			
					    System.out.println("View profile, addr="+addr.getText());
					    cmd.setAddress(addr.getText());
					    cmd.process(ctx);
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void srcdef(
		RouteGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  val = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case OPT_SUBJ:
			{
				match(OPT_SUBJ);
				break;
			}
			case OPT_MASK:
			{
				match(OPT_MASK);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			val = LT(1);
			match(ADDRESS);
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_1);
		}
	}
	
	public final void dstdef(
		RouteGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  val = null;
		Token  sysid = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case OPT_SUBJ:
			{
				match(OPT_SUBJ);
				break;
			}
			case OPT_MASK:
			{
				match(OPT_MASK);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			val = LT(1);
			match(ADDRESS);
			sysid = LT(1);
			match(NUMBER);
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_2);
		}
	}
	
	public final void route_src(
		RouteGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(OPT_SRC);
			{
			int _cnt13=0;
			_loop13:
			do {
				if ((LA(1)==OPT_MASK||LA(1)==OPT_SUBJ)) {
					srcdef(cmd);
				}
				else {
					if ( _cnt13>=1 ) { break _loop13; } else {throw new NoViableAltException(LT(1), getFilename());}
				}
				
				_cnt13++;
			} while (true);
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_3);
		}
	}
	
	public final void route_dst(
		RouteGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			match(OPT_DST);
			{
			int _cnt16=0;
			_loop16:
			do {
				if ((LA(1)==OPT_MASK||LA(1)==OPT_SUBJ)) {
					dstdef(cmd);
				}
				else {
					if ( _cnt16>=1 ) { break _loop16; } else {throw new NoViableAltException(LT(1), getFilename());}
				}
				
				_cnt16++;
			} while (true);
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	public final void route_serviceid(
		RouteGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  num = null;
		
		try {      // for error handling
			match(OPT_SVCID);
			num = LT(1);
			match(NUMBER);
			
					    System.out.println("Service id="+num.getText());
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_4);
		}
	}
	
	public final void route_priority(
		RouteGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  pri = null;
		
		try {      // for error handling
			match(OPT_PRI);
			pri = LT(1);
			match(NUMBER);
			
					    System.out.println("priority="+pri.getText());
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_5);
		}
	}
	
	public final void addroute_flags(
		RouteAddCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case OPT_BILL:
			{
				match(OPT_BILL);
				cmd.setBill(true);
				break;
			}
			case OPT_NOBILL:
			{
				match(OPT_NOBILL);
				cmd.setBill(false);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OPT_ARCH:
			{
				match(OPT_ARCH);
				cmd.setArc(true);
				break;
			}
			case OPT_NOARCH:
			{
				match(OPT_NOARCH);
				cmd.setArc(false);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OPT_ALLOW:
			{
				match(OPT_ALLOW);
				cmd.setAllow(true);
				break;
			}
			case OPT_DENY:
			{
				match(OPT_DENY);
				cmd.setAllow(false);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_6);
		}
	}
	
	public final void altroute_flags(
		RouteAlterCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case OPT_BILL:
			{
				match(OPT_BILL);
				cmd.setBill(true);
				break;
			}
			case OPT_NOBILL:
			{
				match(OPT_NOBILL);
				cmd.setBill(false);
				break;
			}
			case ACT_ADD:
			case ACT_DELETE:
			case OPT_ARCH:
			case OPT_NOARCH:
			case OPT_ALLOW:
			case OPT_DENY:
			case OPT_SVCID:
			case OPT_PRI:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OPT_ARCH:
			{
				match(OPT_ARCH);
				cmd.setArc(true);
				break;
			}
			case OPT_NOARCH:
			{
				match(OPT_NOARCH);
				cmd.setArc(false);
				break;
			}
			case ACT_ADD:
			case ACT_DELETE:
			case OPT_ALLOW:
			case OPT_DENY:
			case OPT_SVCID:
			case OPT_PRI:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OPT_ALLOW:
			{
				match(OPT_ALLOW);
				cmd.setAllow(true);
				break;
			}
			case OPT_DENY:
			{
				match(OPT_DENY);
				cmd.setAllow(false);
				break;
			}
			case ACT_ADD:
			case ACT_DELETE:
			case OPT_SVCID:
			case OPT_PRI:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_7);
		}
	}
	
	public final void addsubj_mask(
		SubjectGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  mask = null;
		
		try {      // for error handling
			{
			mask = LT(1);
			match(ADDRESS);
			}
			
					    //cmd.addMask(mask.getText());
					
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_8);
		}
	}
	
	public final void addsubj_masks(
		SubjectGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		try {      // for error handling
			{
			addsubj_mask(cmd);
			{
			_loop60:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					addsubj_mask(cmd);
				}
				else {
					break _loop60;
				}
				
			} while (true);
			}
			}
		}
		catch (RecognitionException ex) {
			reportError(ex);
			consume();
			consumeUntil(_tokenSet_0);
		}
	}
	
	
	public static final String[] _tokenNames = {
		"<0>",
		"EOF",
		"<2>",
		"NULL_TREE_LOOKAHEAD",
		"\"add\"",
		"\"alter\"",
		"\"delete\"",
		"\"list\"",
		"\"view\"",
		"\"apply\"",
		"\"alias\"",
		"\"route\"",
		"\"profile\"",
		"\"subject\"",
		"\"bill\"",
		"\"nobill\"",
		"\"arc\"",
		"\"noarc\"",
		"\"allow\"",
		"\"deny\"",
		"\"src\"",
		"\"dst\"",
		"\"mask\"",
		"\"subj\"",
		"\"serviceid\"",
		"\"priority\"",
		"\"defaultsme\"",
		"\"report\"",
		"\"encoding\"",
		"WS",
		"STRING",
		"ID",
		"NUMBER",
		"ADDRESS",
		"COMMA",
		"ESC",
		"DIGIT",
		"OPT_HIDE",
		"OPT_NOHIDE"
	};
	
	private static final long _tokenSet_0_data_[] = { 2L, 0L };
	public static final BitSet _tokenSet_0 = new BitSet(_tokenSet_0_data_);
	private static final long _tokenSet_1_data_[] = { 14680066L, 0L };
	public static final BitSet _tokenSet_1 = new BitSet(_tokenSet_1_data_);
	private static final long _tokenSet_2_data_[] = { 12582914L, 0L };
	public static final BitSet _tokenSet_2 = new BitSet(_tokenSet_2_data_);
	private static final long _tokenSet_3_data_[] = { 2097154L, 0L };
	public static final BitSet _tokenSet_3 = new BitSet(_tokenSet_3_data_);
	private static final long _tokenSet_4_data_[] = { 33554512L, 0L };
	public static final BitSet _tokenSet_4 = new BitSet(_tokenSet_4_data_);
	private static final long _tokenSet_5_data_[] = { 1048656L, 0L };
	public static final BitSet _tokenSet_5 = new BitSet(_tokenSet_5_data_);
	private static final long _tokenSet_6_data_[] = { 16777216L, 0L };
	public static final BitSet _tokenSet_6 = new BitSet(_tokenSet_6_data_);
	private static final long _tokenSet_7_data_[] = { 50331728L, 0L };
	public static final BitSet _tokenSet_7 = new BitSet(_tokenSet_7_data_);
	private static final long _tokenSet_8_data_[] = { 17179869186L, 0L };
	public static final BitSet _tokenSet_8 = new BitSet(_tokenSet_8_data_);
	
	}
