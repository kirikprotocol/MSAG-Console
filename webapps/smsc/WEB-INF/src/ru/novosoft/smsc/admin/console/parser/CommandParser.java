// $ANTLR 2.7.1: "parser.g" -> "CommandParser.java"$

package ru.novosoft.smsc.admin.console.parser;

/*
 * Parser code generated by ANTLR
 */

import ru.novosoft.smsc.admin.console.Command;
import ru.novosoft.smsc.admin.console.CommandContext;

import ru.novosoft.smsc.admin.console.commands.*;


import antlr.TokenBuffer;
import antlr.TokenStreamException;
import antlr.TokenStreamIOException;
import antlr.ANTLRException;
import antlr.LLkParser;
import antlr.Token;
import antlr.TokenStream;
import antlr.RecognitionException;
import antlr.NoViableAltException;
import antlr.MismatchedTokenException;
import antlr.SemanticException;
import antlr.ParserSharedInputState;
import antlr.collections.impl.BitSet;
import antlr.collections.AST;
import antlr.ASTPair;
import antlr.collections.impl.ASTArray;

public class CommandParser extends antlr.LLkParser
       implements CommandParserTokenTypes
 {

protected CommandParser(TokenBuffer tokenBuf, int k) {
  super(tokenBuf,k);
  tokenNames = _tokenNames;
}

public CommandParser(TokenBuffer tokenBuf) {
  this(tokenBuf,1);
}

protected CommandParser(TokenStream lexer, int k) {
  super(lexer,k);
  tokenNames = _tokenNames;
}

public CommandParser(TokenStream lexer) {
  this(lexer,1);
}

public CommandParser(ParserSharedInputState state) {
  super(state,1);
  tokenNames = _tokenNames;
}

	public final Command  parse() throws RecognitionException, TokenStreamException {
		Command cmd;
		
		
		cmd = null;
		
		
		switch ( LA(1)) {
		case ACT_ADD:
		{
			match(ACT_ADD);
			cmd=add();
			break;
		}
		case ACT_DELETE:
		{
			match(ACT_DELETE);
			cmd=del();
			break;
		}
		case ACT_ALTER:
		{
			match(ACT_ALTER);
			cmd=alt();
			break;
		}
		case ACT_LIST:
		{
			match(ACT_LIST);
			cmd=lst();
			break;
		}
		case ACT_VIEW:
		{
			match(ACT_VIEW);
			cmd=view();
			break;
		}
		case ACT_APPLY:
		{
			match(ACT_APPLY);
			cmd = new ApplyCommand();
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		return cmd;
	}
	
	public final Command  add() throws RecognitionException, TokenStreamException {
		Command cmd;
		
		
		cmd = null;
		
		
		switch ( LA(1)) {
		case TGT_ROUTE:
		{
			match(TGT_ROUTE);
			cmd=addroute();
			break;
		}
		case TGT_ALIAS:
		{
			match(TGT_ALIAS);
			cmd=addalias();
			break;
		}
		case TGT_SUBJECT:
		{
			match(TGT_SUBJECT);
			cmd=addsubject();
			break;
		}
		case TGT_PROFILE:
		{
			match(TGT_PROFILE);
			cmd=addprofile();
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		return cmd;
	}
	
	public final Command  del() throws RecognitionException, TokenStreamException {
		Command cmd;
		
		
		cmd = null;
		
		
		switch ( LA(1)) {
		case TGT_ROUTE:
		{
			match(TGT_ROUTE);
			cmd=delroute();
			break;
		}
		case TGT_ALIAS:
		{
			match(TGT_ALIAS);
			cmd=delalias();
			break;
		}
		case TGT_SUBJECT:
		{
			match(TGT_SUBJECT);
			cmd=delsubject();
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		return cmd;
	}
	
	public final Command  alt() throws RecognitionException, TokenStreamException {
		Command cmd;
		
		
		cmd = null;
		
		
		switch ( LA(1)) {
		case TGT_ROUTE:
		{
			match(TGT_ROUTE);
			cmd=altroute();
			break;
		}
		case TGT_ALIAS:
		{
			match(TGT_ALIAS);
			cmd=altalias();
			break;
		}
		case TGT_SUBJECT:
		{
			match(TGT_SUBJECT);
			cmd=altsubject();
			break;
		}
		case TGT_PROFILE:
		{
			match(TGT_PROFILE);
			cmd=altprofile();
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		return cmd;
	}
	
	public final Command  lst() throws RecognitionException, TokenStreamException {
		Command cmd;
		
		
		cmd = null;
		
		
		switch ( LA(1)) {
		case TGT_ROUTE:
		{
			match(TGT_ROUTE);
			cmd = new RouteListCommand();
			break;
		}
		case TGT_ALIAS:
		{
			match(TGT_ALIAS);
			cmd = new AliasListCommand();
			break;
		}
		case TGT_SUBJECT:
		{
			match(TGT_SUBJECT);
			cmd = new SubjectListCommand();
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		return cmd;
	}
	
	public final Command  view() throws RecognitionException, TokenStreamException {
		Command cmd;
		
		
		cmd = null;
		
		
		switch ( LA(1)) {
		case TGT_ROUTE:
		{
			match(TGT_ROUTE);
			cmd=viewroute();
			break;
		}
		case TGT_ALIAS:
		{
			match(TGT_ALIAS);
			cmd=viewalias();
			break;
		}
		case TGT_SUBJECT:
		{
			match(TGT_SUBJECT);
			cmd=viewsubject();
			break;
		}
		case TGT_PROFILE:
		{
			match(TGT_PROFILE);
			cmd=viewprofile();
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		return cmd;
	}
	
	public final RouteAddCommand  addroute() throws RecognitionException, TokenStreamException {
		RouteAddCommand cmd;
		
		Token  qname = null;
		Token  name = null;
		Token  num = null;
		Token  pri = null;
		
		cmd = new RouteAddCommand();
		
		
		{
		switch ( LA(1)) {
		case STRING:
		{
			qname = LT(1);
			match(STRING);
			break;
		}
		case ID:
		{
			name = LT(1);
			match(ID);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String out = (qname == null) ? name.getText():qname.getText();
				    cmd.setRoute(out);
				
		addroute_flags(cmd);
		{
		match(OPT_SVCID);
		num = LT(1);
		match(NUMBER);
		
				    cmd.setServiceId(Integer.parseInt(num.getText()));
				
		}
		{
		match(OPT_PRI);
		pri = LT(1);
		match(NUMBER);
		
				    cmd.setPriority(Integer.parseInt(pri.getText()));
				
		}
		route_src(cmd);
		route_dst(cmd);
		return cmd;
	}
	
	public final AliasAddCommand  addalias() throws RecognitionException, TokenStreamException {
		AliasAddCommand cmd;
		
		Token  maddr = null;
		Token  manum = null;
		Token  aaddr = null;
		Token  aanum = null;
		
		cmd = new AliasAddCommand();
		
		
		{
		switch ( LA(1)) {
		case ADDRESS:
		{
			maddr = LT(1);
			match(ADDRESS);
			break;
		}
		case NUMBER:
		{
			manum = LT(1);
			match(NUMBER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String mal = (maddr == null) ? manum.getText():maddr.getText();
				    cmd.setAlias(mal);
				
		{
		switch ( LA(1)) {
		case ADDRESS:
		{
			aaddr = LT(1);
			match(ADDRESS);
			break;
		}
		case NUMBER:
		{
			aanum = LT(1);
			match(NUMBER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String aal = (aaddr == null) ? aanum.getText():aaddr.getText();
				    cmd.setAddress(aal);
				
		{
		switch ( LA(1)) {
		case OPT_HIDE:
		{
			match(OPT_HIDE);
			cmd.setHide(true);
			break;
		}
		case OPT_NOHIDE:
		{
			match(OPT_NOHIDE);
			cmd.setHide(false);
			break;
		}
		case EOF:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return cmd;
	}
	
	public final SubjectAddCommand  addsubject() throws RecognitionException, TokenStreamException {
		SubjectAddCommand cmd;
		
		Token  qname = null;
		Token  name = null;
		Token  qsys = null;
		Token  isys = null;
		
		cmd = new SubjectAddCommand();
		
		
		{
		switch ( LA(1)) {
		case STRING:
		{
			qname = LT(1);
			match(STRING);
			break;
		}
		case ID:
		{
			name = LT(1);
			match(ID);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String out = (qname == null) ? name.getText():qname.getText();
				    cmd.setSubject(out);
				
		{
		switch ( LA(1)) {
		case STRING:
		{
			qsys = LT(1);
			match(STRING);
			break;
		}
		case ID:
		{
			isys = LT(1);
			match(ID);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String smeid = (qsys == null) ? qsys.getText():isys.getText();
				    cmd.setDefaultSmeId(smeid);
				
		addsubj_masks(cmd);
		return cmd;
	}
	
	public final ProfileAddCommand  addprofile() throws RecognitionException, TokenStreamException {
		ProfileAddCommand cmd;
		
		Token  maddr = null;
		Token  manum = null;
		
		cmd = new ProfileAddCommand();
		
		
		{
		switch ( LA(1)) {
		case ADDRESS:
		{
			maddr = LT(1);
			match(ADDRESS);
			break;
		}
		case NUMBER:
		{
			manum = LT(1);
			match(NUMBER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String mal = (maddr == null) ? manum.getText():maddr.getText();
				    cmd.setMask(mal);
				
		{
		match(OPT_REPORT);
		{
		switch ( LA(1)) {
		case VAL_FULL:
		{
			match(VAL_FULL);
			cmd.setFullReport();
			break;
		}
		case VAL_NONE:
		{
			match(VAL_NONE);
			cmd.setNoneReport();
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		}
		{
		switch ( LA(1)) {
		case OPT_ENCODE:
		{
			match(OPT_ENCODE);
			{
			switch ( LA(1)) {
			case VAL_GSM7:
			{
				match(VAL_GSM7);
				cmd.setGsm7Encoding();
				break;
			}
			case VAL_UCS2:
			{
				match(VAL_UCS2);
				cmd.setUcs2Encoding();
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			break;
		}
		case EOF:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return cmd;
	}
	
	public final RouteDeleteCommand  delroute() throws RecognitionException, TokenStreamException {
		RouteDeleteCommand cmd;
		
		Token  qname = null;
		Token  name = null;
		
		cmd = new RouteDeleteCommand();
		
		
		{
		switch ( LA(1)) {
		case STRING:
		{
			qname = LT(1);
			match(STRING);
			break;
		}
		case ID:
		{
			name = LT(1);
			match(ID);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String out = (qname == null) ? name.getText():qname.getText();
				    cmd.setRoute(out);
				
		return cmd;
	}
	
	public final AliasDeleteCommand  delalias() throws RecognitionException, TokenStreamException {
		AliasDeleteCommand cmd;
		
		Token  aaddr = null;
		Token  aanum = null;
		
		cmd = new AliasDeleteCommand();
		
		
		{
		switch ( LA(1)) {
		case ADDRESS:
		{
			aaddr = LT(1);
			match(ADDRESS);
			break;
		}
		case NUMBER:
		{
			aanum = LT(1);
			match(NUMBER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String aal = (aaddr == null) ? aanum.getText():aaddr.getText();
				    cmd.setAlias(aal);
				
		return cmd;
	}
	
	public final SubjectDeleteCommand  delsubject() throws RecognitionException, TokenStreamException {
		SubjectDeleteCommand cmd;
		
		Token  qname = null;
		Token  name = null;
		
		cmd = new SubjectDeleteCommand();
		
		
		{
		switch ( LA(1)) {
		case STRING:
		{
			qname = LT(1);
			match(STRING);
			break;
		}
		case ID:
		{
			name = LT(1);
			match(ID);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String out = (qname == null) ? name.getText():qname.getText();
				    cmd.setSubject(out);
				
		return cmd;
	}
	
	public final RouteAlterCommand  altroute() throws RecognitionException, TokenStreamException {
		RouteAlterCommand cmd;
		
		Token  qname = null;
		Token  name = null;
		Token  num = null;
		Token  pri = null;
		
		cmd = new RouteAlterCommand();
		
		
		{
		switch ( LA(1)) {
		case STRING:
		{
			qname = LT(1);
			match(STRING);
			break;
		}
		case ID:
		{
			name = LT(1);
			match(ID);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String out = (qname == null) ? name.getText():qname.getText();
				    cmd.setRoute(out);
				
		altroute_flags(cmd);
		{
		switch ( LA(1)) {
		case OPT_SVCID:
		{
			match(OPT_SVCID);
			num = LT(1);
			match(NUMBER);
			
					    cmd.setServiceId(Integer.parseInt(num.getText()));
					
			break;
		}
		case ACT_ADD:
		case ACT_DELETE:
		case OPT_PRI:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case OPT_PRI:
		{
			match(OPT_PRI);
			pri = LT(1);
			match(NUMBER);
			
					    cmd.setPriority(Integer.parseInt(pri.getText()));
					
			break;
		}
		case ACT_ADD:
		case ACT_DELETE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case ACT_ADD:
		{
			match(ACT_ADD);
			cmd.setAction(RouteAlterCommand.ACTION_ADD);
			break;
		}
		case ACT_DELETE:
		{
			match(ACT_DELETE);
			cmd.setAction(RouteAlterCommand.ACTION_DEL);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case OPT_SRC:
		{
			route_src(cmd);
			cmd.setTarget(RouteAlterCommand.TARGET_SRC);
			break;
		}
		case OPT_DST:
		{
			route_dst(cmd);
			cmd.setTarget(RouteAlterCommand.TARGET_DST);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return cmd;
	}
	
	public final AliasAlterCommand  altalias() throws RecognitionException, TokenStreamException {
		AliasAlterCommand cmd;
		
		Token  maddr = null;
		Token  manum = null;
		Token  aaddr = null;
		Token  aanum = null;
		
		cmd = new AliasAlterCommand();
		
		
		{
		switch ( LA(1)) {
		case ADDRESS:
		{
			maddr = LT(1);
			match(ADDRESS);
			break;
		}
		case NUMBER:
		{
			manum = LT(1);
			match(NUMBER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String mal = (maddr == null) ? manum.getText():maddr.getText();
				    cmd.setAlias(mal);
				
		{
		switch ( LA(1)) {
		case ADDRESS:
		{
			aaddr = LT(1);
			match(ADDRESS);
			break;
		}
		case NUMBER:
		{
			aanum = LT(1);
			match(NUMBER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String aal = (aaddr == null) ? aanum.getText():aaddr.getText();
				    cmd.setAddress(aal);
				
		{
		switch ( LA(1)) {
		case OPT_HIDE:
		{
			match(OPT_HIDE);
			cmd.setHide(true);
			break;
		}
		case OPT_NOHIDE:
		{
			match(OPT_NOHIDE);
			cmd.setHide(false);
			break;
		}
		case EOF:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return cmd;
	}
	
	public final SubjectAlterCommand  altsubject() throws RecognitionException, TokenStreamException {
		SubjectAlterCommand cmd;
		
		Token  qname = null;
		Token  name = null;
		Token  qsys = null;
		Token  isys = null;
		
		cmd = new SubjectAlterCommand();
		
		
		switch ( LA(1)) {
		case STRING:
		case ID:
		{
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    cmd.setSubject(out);
					
			{
			{
			switch ( LA(1)) {
			case ACT_ADD:
			{
				match(ACT_ADD);
				
						    cmd.setActionAdd();
						
				break;
			}
			case ACT_DELETE:
			{
				match(ACT_DELETE);
				
						    cmd.setActionDelete();
						
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			addsubj_masks(cmd);
			}
			break;
		}
		case OPT_DEFSME:
		{
			{
			match(OPT_DEFSME);
			{
			switch ( LA(1)) {
			case STRING:
			{
				qsys = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				isys = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String smeid = (qsys == null) ? qsys.getText():isys.getText();
					    cmd.setDefaultSmeId(smeid);
					
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		return cmd;
	}
	
	public final ProfileAlterCommand  altprofile() throws RecognitionException, TokenStreamException {
		ProfileAlterCommand cmd;
		
		Token  aaddr = null;
		Token  aanum = null;
		
		cmd = new ProfileAlterCommand();
		
		
		{
		switch ( LA(1)) {
		case ADDRESS:
		{
			aaddr = LT(1);
			match(ADDRESS);
			break;
		}
		case NUMBER:
		{
			aanum = LT(1);
			match(NUMBER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String aal = (aaddr == null) ? aanum.getText():aaddr.getText();
				    cmd.setAddress(aal);
				
		{
		match(OPT_REPORT);
		{
		switch ( LA(1)) {
		case VAL_FULL:
		{
			match(VAL_FULL);
			cmd.setFullReport();
			break;
		}
		case VAL_NONE:
		{
			match(VAL_NONE);
			cmd.setNoneReport();
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		}
		{
		switch ( LA(1)) {
		case OPT_ENCODE:
		{
			match(OPT_ENCODE);
			{
			switch ( LA(1)) {
			case VAL_GSM7:
			{
				match(VAL_GSM7);
				cmd.setGsm7Encoding();
				break;
			}
			case VAL_UCS2:
			{
				match(VAL_UCS2);
				cmd.setUcs2Encoding();
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			break;
		}
		case EOF:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return cmd;
	}
	
	public final RouteViewCommand  viewroute() throws RecognitionException, TokenStreamException {
		RouteViewCommand cmd;
		
		Token  qname = null;
		Token  name = null;
		
		cmd = new RouteViewCommand();
		
		
		{
		switch ( LA(1)) {
		case STRING:
		{
			qname = LT(1);
			match(STRING);
			break;
		}
		case ID:
		{
			name = LT(1);
			match(ID);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String out = (qname == null) ? name.getText():qname.getText();
				    cmd.setRoute(out);
				
		return cmd;
	}
	
	public final AliasViewCommand  viewalias() throws RecognitionException, TokenStreamException {
		AliasViewCommand cmd;
		
		Token  aaddr = null;
		Token  aanum = null;
		
		cmd = new AliasViewCommand();
		
		
		{
		switch ( LA(1)) {
		case ADDRESS:
		{
			aaddr = LT(1);
			match(ADDRESS);
			break;
		}
		case NUMBER:
		{
			aanum = LT(1);
			match(NUMBER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String aal = (aaddr == null) ? aanum.getText():aaddr.getText();
				    cmd.setAlias(aal);
				
		return cmd;
	}
	
	public final SubjectViewCommand  viewsubject() throws RecognitionException, TokenStreamException {
		SubjectViewCommand cmd;
		
		Token  qname = null;
		Token  name = null;
		
		cmd = new SubjectViewCommand();
		
		
		{
		switch ( LA(1)) {
		case STRING:
		{
			qname = LT(1);
			match(STRING);
			break;
		}
		case ID:
		{
			name = LT(1);
			match(ID);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String out = (qname == null) ? name.getText():qname.getText();
				    cmd.setSubject(out);
				
		return cmd;
	}
	
	public final ProfileViewCommand  viewprofile() throws RecognitionException, TokenStreamException {
		ProfileViewCommand cmd;
		
		Token  aaddr = null;
		Token  aanum = null;
		
		cmd = new ProfileViewCommand();
		
		
		{
		switch ( LA(1)) {
		case ADDRESS:
		{
			aaddr = LT(1);
			match(ADDRESS);
			break;
		}
		case NUMBER:
		{
			aanum = LT(1);
			match(NUMBER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String aal = (aaddr == null) ? aanum.getText():aaddr.getText();
				    cmd.setAddress(aal);
				
		return cmd;
	}
	
	public final void srcdef(
		RouteGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		Token  addr = null;
		Token  anum = null;
		// Special command required !!!
		RouteSrcDef def = new RouteSrcDef();
		
		
		{
		switch ( LA(1)) {
		case OPT_SUBJ:
		{
			{
			match(OPT_SUBJ);
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    def.setType(RouteSrcDef.TYPE_SUBJECT);
					    def.setSrc(out);
					
			}
			break;
		}
		case OPT_MASK:
		{
			{
			match(OPT_MASK);
			{
			switch ( LA(1)) {
			case ADDRESS:
			{
				addr = LT(1);
				match(ADDRESS);
				break;
			}
			case NUMBER:
			{
				anum = LT(1);
				match(NUMBER);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String val = (addr == null) ? anum.getText():addr.getText(); 
					    def.setType(RouteSrcDef.TYPE_MASK); 
					    def.setSrc(val);
					
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    cmd.addSrcDef(def);
				
	}
	
	public final void dstdef(
		RouteGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  qname = null;
		Token  name = null;
		Token  addr = null;
		Token  anum = null;
		Token  qsys = null;
		Token  isys = null;
		// Special command required !!!
		RouteDstDef def = new RouteDstDef();
		
		
		{
		switch ( LA(1)) {
		case OPT_SUBJ:
		{
			{
			match(OPT_SUBJ);
			{
			switch ( LA(1)) {
			case STRING:
			{
				qname = LT(1);
				match(STRING);
				break;
			}
			case ID:
			{
				name = LT(1);
				match(ID);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String out = (qname == null) ? name.getText():qname.getText();
					    def.setType(RouteDstDef.TYPE_SUBJECT);
					    def.setDst(out);
					
			}
			break;
		}
		case OPT_MASK:
		{
			{
			match(OPT_MASK);
			{
			switch ( LA(1)) {
			case ADDRESS:
			{
				addr = LT(1);
				match(ADDRESS);
				break;
			}
			case NUMBER:
			{
				anum = LT(1);
				match(NUMBER);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			
					    String val = (addr == null) ? anum.getText():addr.getText(); 
					    def.setType(RouteDstDef.TYPE_MASK); 
					    def.setDst(val);
					
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case STRING:
		{
			qsys = LT(1);
			match(STRING);
			break;
		}
		case ID:
		{
			isys = LT(1);
			match(ID);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String sysid = (qsys == null) ? qsys.getText():isys.getText();
				    def.setSmeId(sysid);
				    cmd.addDstDef(def);
				
	}
	
	public final void route_src(
		RouteGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		match(OPT_SRC);
		{
		int _cnt22=0;
		_loop22:
		do {
			if ((LA(1)==OPT_MASK||LA(1)==OPT_SUBJ)) {
				srcdef(cmd);
			}
			else {
				if ( _cnt22>=1 ) { break _loop22; } else {throw new NoViableAltException(LT(1), getFilename());}
			}
			
			_cnt22++;
		} while (true);
		}
	}
	
	public final void route_dst(
		RouteGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		match(OPT_DST);
		{
		int _cnt25=0;
		_loop25:
		do {
			if ((LA(1)==OPT_MASK||LA(1)==OPT_SUBJ)) {
				dstdef(cmd);
			}
			else {
				if ( _cnt25>=1 ) { break _loop25; } else {throw new NoViableAltException(LT(1), getFilename());}
			}
			
			_cnt25++;
		} while (true);
		}
	}
	
	public final void addroute_flags(
		RouteAddCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		{
		switch ( LA(1)) {
		case OPT_BILL:
		{
			match(OPT_BILL);
			cmd.setBill(true);
			break;
		}
		case OPT_NOBILL:
		{
			match(OPT_NOBILL);
			cmd.setBill(false);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case OPT_ARCH:
		{
			match(OPT_ARCH);
			cmd.setArc(true);
			break;
		}
		case OPT_NOARCH:
		{
			match(OPT_NOARCH);
			cmd.setArc(false);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case OPT_ALLOW:
		{
			match(OPT_ALLOW);
			cmd.setAllow(true);
			break;
		}
		case OPT_DENY:
		{
			match(OPT_DENY);
			cmd.setAllow(false);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
	}
	
	public final void altroute_flags(
		RouteAlterCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		{
		switch ( LA(1)) {
		case OPT_BILL:
		{
			match(OPT_BILL);
			cmd.setBill(true);
			break;
		}
		case OPT_NOBILL:
		{
			match(OPT_NOBILL);
			cmd.setBill(false);
			break;
		}
		case ACT_ADD:
		case ACT_DELETE:
		case OPT_ARCH:
		case OPT_NOARCH:
		case OPT_ALLOW:
		case OPT_DENY:
		case OPT_SVCID:
		case OPT_PRI:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case OPT_ARCH:
		{
			match(OPT_ARCH);
			cmd.setArc(true);
			break;
		}
		case OPT_NOARCH:
		{
			match(OPT_NOARCH);
			cmd.setArc(false);
			break;
		}
		case ACT_ADD:
		case ACT_DELETE:
		case OPT_ALLOW:
		case OPT_DENY:
		case OPT_SVCID:
		case OPT_PRI:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case OPT_ALLOW:
		{
			match(OPT_ALLOW);
			cmd.setAllow(true);
			break;
		}
		case OPT_DENY:
		{
			match(OPT_DENY);
			cmd.setAllow(false);
			break;
		}
		case ACT_ADD:
		case ACT_DELETE:
		case OPT_SVCID:
		case OPT_PRI:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
	}
	
	public final void addsubj_mask(
		SubjectGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		Token  maddr = null;
		Token  manum = null;
		
		{
		switch ( LA(1)) {
		case ADDRESS:
		{
			maddr = LT(1);
			match(ADDRESS);
			break;
		}
		case NUMBER:
		{
			manum = LT(1);
			match(NUMBER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String mal = (maddr == null) ? manum.getText():maddr.getText();	
				    cmd.addMask(mal);
				
	}
	
	public final void addsubj_masks(
		SubjectGenCommand cmd
	) throws RecognitionException, TokenStreamException {
		
		
		{
		addsubj_mask(cmd);
		{
		_loop65:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				addsubj_mask(cmd);
			}
			else {
				break _loop65;
			}
			
		} while (true);
		}
		}
	}
	
	public final ProfileDeleteCommand  delprofile() throws RecognitionException, TokenStreamException {
		ProfileDeleteCommand cmd;
		
		Token  maddr = null;
		Token  manum = null;
		
		cmd = new ProfileDeleteCommand();
		
		
		{
		switch ( LA(1)) {
		case ADDRESS:
		{
			maddr = LT(1);
			match(ADDRESS);
			break;
		}
		case NUMBER:
		{
			manum = LT(1);
			match(NUMBER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		
				    String mal = (maddr == null) ? manum.getText():maddr.getText();
				    cmd.setMask(mal);
				
		return cmd;
	}
	
	
	public static final String[] _tokenNames = {
		"<0>",
		"EOF",
		"<2>",
		"NULL_TREE_LOOKAHEAD",
		"\"add\"",
		"\"alter\"",
		"\"delete\"",
		"\"list\"",
		"\"view\"",
		"\"apply\"",
		"\"alias\"",
		"\"route\"",
		"\"profile\"",
		"\"subject\"",
		"\"hide\"",
		"\"nohide\"",
		"\"bill\"",
		"\"nobill\"",
		"\"arc\"",
		"\"noarc\"",
		"\"allow\"",
		"\"deny\"",
		"\"src\"",
		"\"dst\"",
		"\"mask\"",
		"\"subj\"",
		"\"serviceid\"",
		"\"priority\"",
		"\"defaultsme\"",
		"\"report\"",
		"\"full\"",
		"\"none\"",
		"\"encoding\"",
		"\"gsm7\"",
		"\"ucs2\"",
		"WS",
		"STRING",
		"ID",
		"NUMBER",
		"ADDRESS",
		"COMMA",
		"ESC",
		"DIGIT"
	};
	
	
	}
